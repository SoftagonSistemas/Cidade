import { z } from 'zod';
import type { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const UserScalarFieldEnumSchema = z.enum(['id','apiUserId','email','name','phoneNumber','jobTitle','profilePhoto','role','createdAt','updatedAt']);

export const DocumentScalarFieldEnumSchema = z.enum(['id','title','filePath','mimeType','keywords','ocrText','ownerId','signed','signedAt','signature','createdAt']);

export const UserOnDocumentsScalarFieldEnumSchema = z.enum(['userId','documentId','assignedAt','role','createdAt']);

export const DocumentUserScalarFieldEnumSchema = z.enum(['id','userId','documentId','createdAt']);

export const DocumentVersionScalarFieldEnumSchema = z.enum(['id','documentId','versionNumber','filePath','changesDescription','createdById','createdAt']);

export const DocumentVersionCreatorScalarFieldEnumSchema = z.enum(['id','userId','versionId','createdAt']);

export const SharedDocumentScalarFieldEnumSchema = z.enum(['id','documentId','userId','sharedAt','permission','createdAt']);

export const WorkflowScalarFieldEnumSchema = z.enum(['id','name','description','type','status','createdAt','updatedAt']);

export const TaskScalarFieldEnumSchema = z.enum(['id','workflowId','assignedToId','documentId','title','description','status','dueDate','createdAt','updatedAt']);

export const AuditLogScalarFieldEnumSchema = z.enum(['id','taskId','workflowId','action','performedById','timestamp','description']);

export const NotificationScalarFieldEnumSchema = z.enum(['id','userId','message','read','createdAt']);

export const AttachmentScalarFieldEnumSchema = z.enum(['id','documentId','filePath','fileName','mimeType','createdAt']);

export const DigitalCertificateScalarFieldEnumSchema = z.enum(['id','userId','alias','filePath','password','createdAt','expiration']);

export const FileMetadataScalarFieldEnumSchema = z.enum(['id','documentId','fileSize','mimeType','checksum','createdAt']);

export const InstitutionScalarFieldEnumSchema = z.enum(['id','name','address','phone','email','flag','emblem','mayorId','viceMayorId','createdAt','updatedAt']);

export const DepartmentScalarFieldEnumSchema = z.enum(['id','name','description','isSecretariat','institutionId','parentDepartmentId','headId','createdAt','updatedAt']);

export const UserDepartmentScalarFieldEnumSchema = z.enum(['id','userId','departmentId','role','createdAt']);

export const TicketScalarFieldEnumSchema = z.enum(['id','subject','description','statusId','priorityId','createdById','assignedToId','departmentId','helpTopicId','slaPlanId','dueDate','createdAt','updatedAt','closedAt','lastResponseAt']);

export const TicketStatusScalarFieldEnumSchema = z.enum(['id','name','createdAt']);

export const TicketPriorityScalarFieldEnumSchema = z.enum(['id','name','createdAt']);

export const HelpTopicScalarFieldEnumSchema = z.enum(['id','topic','description','departmentId','createdAt']);

export const SLAPlanScalarFieldEnumSchema = z.enum(['id','name','gracePeriod','createdAt']);

export const TicketThreadScalarFieldEnumSchema = z.enum(['id','ticketId','userId','message','createdAt']);

export const TicketAttachmentScalarFieldEnumSchema = z.enum(['id','ticketId','ticketThreadId','filePath','fileName','mimeType','createdAt']);

export const TicketCollaboratorScalarFieldEnumSchema = z.enum(['id','ticketId','userId']);

export const CustomFieldScalarFieldEnumSchema = z.enum(['id','name','fieldType','createdAt']);

export const TicketCustomFieldScalarFieldEnumSchema = z.enum(['id','ticketId','fieldId','value']);

export const TaskUserScalarFieldEnumSchema = z.enum(['id','taskId','userId']);

export const TicketUserScalarFieldEnumSchema = z.enum(['id','ticketId','userId']);

export const Back3nd_userScalarFieldEnumSchema = z.enum(['id','name','email','password','reset_token','created_at','updated_at']);

export const Back3nd_roleScalarFieldEnumSchema = z.enum(['id','name','description','created_at','updated_at']);

export const Back3nd_user_roleScalarFieldEnumSchema = z.enum(['id','user_id','role_id','created_at']);

export const Back3nd_permissionScalarFieldEnumSchema = z.enum(['id','role_id','can_create','can_read','can_update','can_delete','created_at','collection']);

export const Back3nd_password_resetScalarFieldEnumSchema = z.enum(['id','user_id','token','created_at','expires_at']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const UserOrderByRelevanceFieldEnumSchema = z.enum(['id','apiUserId','email','name','phoneNumber','jobTitle','profilePhoto','role']);

export const DocumentOrderByRelevanceFieldEnumSchema = z.enum(['id','title','filePath','mimeType','keywords','ocrText','ownerId','signature']);

export const UserOnDocumentsOrderByRelevanceFieldEnumSchema = z.enum(['userId','documentId','role']);

export const DocumentUserOrderByRelevanceFieldEnumSchema = z.enum(['id','userId','documentId']);

export const DocumentVersionOrderByRelevanceFieldEnumSchema = z.enum(['id','documentId','filePath','changesDescription','createdById']);

export const DocumentVersionCreatorOrderByRelevanceFieldEnumSchema = z.enum(['id','userId','versionId']);

export const SharedDocumentOrderByRelevanceFieldEnumSchema = z.enum(['id','documentId','userId','permission']);

export const WorkflowOrderByRelevanceFieldEnumSchema = z.enum(['id','name','description','type','status']);

export const TaskOrderByRelevanceFieldEnumSchema = z.enum(['id','workflowId','assignedToId','documentId','title','description','status']);

export const AuditLogOrderByRelevanceFieldEnumSchema = z.enum(['id','taskId','workflowId','action','performedById','description']);

export const NotificationOrderByRelevanceFieldEnumSchema = z.enum(['id','userId','message']);

export const AttachmentOrderByRelevanceFieldEnumSchema = z.enum(['id','documentId','filePath','fileName','mimeType']);

export const DigitalCertificateOrderByRelevanceFieldEnumSchema = z.enum(['id','userId','alias','filePath','password']);

export const FileMetadataOrderByRelevanceFieldEnumSchema = z.enum(['id','documentId','mimeType','checksum']);

export const InstitutionOrderByRelevanceFieldEnumSchema = z.enum(['id','name','address','phone','email','flag','emblem','mayorId','viceMayorId']);

export const DepartmentOrderByRelevanceFieldEnumSchema = z.enum(['name','description','institutionId','headId']);

export const UserDepartmentOrderByRelevanceFieldEnumSchema = z.enum(['id','userId','role']);

export const TicketOrderByRelevanceFieldEnumSchema = z.enum(['id','subject','description','createdById','assignedToId']);

export const TicketStatusOrderByRelevanceFieldEnumSchema = z.enum(['name']);

export const TicketPriorityOrderByRelevanceFieldEnumSchema = z.enum(['name']);

export const HelpTopicOrderByRelevanceFieldEnumSchema = z.enum(['topic','description']);

export const SLAPlanOrderByRelevanceFieldEnumSchema = z.enum(['name']);

export const TicketThreadOrderByRelevanceFieldEnumSchema = z.enum(['id','ticketId','userId','message']);

export const TicketAttachmentOrderByRelevanceFieldEnumSchema = z.enum(['id','ticketId','ticketThreadId','filePath','fileName','mimeType']);

export const TicketCollaboratorOrderByRelevanceFieldEnumSchema = z.enum(['id','ticketId','userId']);

export const CustomFieldOrderByRelevanceFieldEnumSchema = z.enum(['name','fieldType']);

export const TicketCustomFieldOrderByRelevanceFieldEnumSchema = z.enum(['id','ticketId','value']);

export const TaskUserOrderByRelevanceFieldEnumSchema = z.enum(['id','taskId','userId']);

export const TicketUserOrderByRelevanceFieldEnumSchema = z.enum(['id','ticketId','userId']);

export const back3nd_userOrderByRelevanceFieldEnumSchema = z.enum(['id','name','email','password','reset_token']);

export const back3nd_roleOrderByRelevanceFieldEnumSchema = z.enum(['id','name','description']);

export const back3nd_user_roleOrderByRelevanceFieldEnumSchema = z.enum(['id','user_id','role_id']);

export const back3nd_permissionOrderByRelevanceFieldEnumSchema = z.enum(['id','role_id','collection']);

export const back3nd_password_resetOrderByRelevanceFieldEnumSchema = z.enum(['id','user_id','token']);
/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

/**
 * The `User` model represents system users.
 * In a GED context, users can create, own, and share documents.
 * In a BPM context, users may be assigned tasks within workflows or manage them.
 * A `role` field helps define user permissions and responsibilities.
 * The `User` model represents system users with roles in the organizational structure.
 */
export const UserSchema = z.object({
  id: z.string(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().nullable(),
  jobTitle: z.string().nullable(),
  profilePhoto: z.string().nullable(),
  role: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// DOCUMENT SCHEMA
/////////////////////////////////////////

export const DocumentSchema = z.object({
  id: z.string(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.string().array(),
  ocrText: z.string().nullable(),
  ownerId: z.string(),
  signed: z.boolean(),
  signedAt: z.coerce.date().nullable(),
  signature: z.string().nullable(),
  createdAt: z.coerce.date(),
})

export type Document = z.infer<typeof DocumentSchema>

/////////////////////////////////////////
// USER ON DOCUMENTS SCHEMA
/////////////////////////////////////////

export const UserOnDocumentsSchema = z.object({
  userId: z.string(),
  documentId: z.string(),
  assignedAt: z.coerce.date(),
  role: z.string(),
  createdAt: z.coerce.date(),
})

export type UserOnDocuments = z.infer<typeof UserOnDocumentsSchema>

/////////////////////////////////////////
// DOCUMENT USER SCHEMA
/////////////////////////////////////////

export const DocumentUserSchema = z.object({
  id: z.string(),
  userId: z.string(),
  documentId: z.string(),
  createdAt: z.coerce.date(),
})

export type DocumentUser = z.infer<typeof DocumentUserSchema>

/////////////////////////////////////////
// DOCUMENT VERSION SCHEMA
/////////////////////////////////////////

export const DocumentVersionSchema = z.object({
  id: z.string(),
  documentId: z.string(),
  versionNumber: z.number().int(),
  filePath: z.string(),
  changesDescription: z.string().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date(),
})

export type DocumentVersion = z.infer<typeof DocumentVersionSchema>

/////////////////////////////////////////
// DOCUMENT VERSION CREATOR SCHEMA
/////////////////////////////////////////

export const DocumentVersionCreatorSchema = z.object({
  id: z.string(),
  userId: z.string(),
  versionId: z.string(),
  createdAt: z.coerce.date(),
})

export type DocumentVersionCreator = z.infer<typeof DocumentVersionCreatorSchema>

/////////////////////////////////////////
// SHARED DOCUMENT SCHEMA
/////////////////////////////////////////

export const SharedDocumentSchema = z.object({
  id: z.string(),
  documentId: z.string(),
  userId: z.string(),
  sharedAt: z.coerce.date(),
  permission: z.string(),
  createdAt: z.coerce.date(),
})

export type SharedDocument = z.infer<typeof SharedDocumentSchema>

/////////////////////////////////////////
// WORKFLOW SCHEMA
/////////////////////////////////////////

/**
 * The `Workflow` model organizes business processes for document-based tasks in BPM.
 * Workflows represent entire processes with multiple tasks (`steps`) for document approvals,
 * reviews, and other interactions. `status` allows monitoring of the workflow's current state.
 */
export const WorkflowSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  type: z.string(),
  status: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Workflow = z.infer<typeof WorkflowSchema>

/////////////////////////////////////////
// TASK SCHEMA
/////////////////////////////////////////

/**
 * The `Task` model defines a single step in a `Workflow`, representing an actionable item.
 * Tasks can be associated with specific documents (e.g., approval or review) and assigned to users.
 * `status` tracks task progress, and `dueDate` enforces deadlines, aiding in process management.
 */
export const TaskSchema = z.object({
  id: z.string(),
  workflowId: z.string(),
  assignedToId: z.string().nullable(),
  documentId: z.string().nullable(),
  title: z.string(),
  description: z.string().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Task = z.infer<typeof TaskSchema>

/////////////////////////////////////////
// AUDIT LOG SCHEMA
/////////////////////////////////////////

/**
 * The `AuditLog` model tracks actions taken on a `Task` or `Workflow`, supporting a detailed audit trail.
 * It records each action, who performed it, and when, enabling transparency and accountability.
 */
export const AuditLogSchema = z.object({
  id: z.string(),
  taskId: z.string().nullable(),
  workflowId: z.string().nullable(),
  action: z.string(),
  performedById: z.string(),
  timestamp: z.coerce.date(),
  description: z.string().nullable(),
})

export type AuditLog = z.infer<typeof AuditLogSchema>

/////////////////////////////////////////
// NOTIFICATION SCHEMA
/////////////////////////////////////////

/**
 * The `Notification` model centralizes alerts and updates sent to users.
 * It tracks which notifications have been read.
 */
export const NotificationSchema = z.object({
  id: z.string(),
  userId: z.string(),
  message: z.string(),
  read: z.boolean(),
  createdAt: z.coerce.date(),
})

export type Notification = z.infer<typeof NotificationSchema>

/////////////////////////////////////////
// ATTACHMENT SCHEMA
/////////////////////////////////////////

/**
 * The `Attachment` model stores additional files linked to a document.
 * Attachments provide supplemental information for a document or task.
 */
export const AttachmentSchema = z.object({
  id: z.string(),
  documentId: z.string(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date(),
})

export type Attachment = z.infer<typeof AttachmentSchema>

/////////////////////////////////////////
// DIGITAL CERTIFICATE SCHEMA
/////////////////////////////////////////

/**
 * The `DigitalCertificate` model holds certificates for digital signing, crucial for document authentication.
 */
export const DigitalCertificateSchema = z.object({
  id: z.string(),
  userId: z.string(),
  alias: z.string(),
  filePath: z.string(),
  password: z.string(),
  createdAt: z.coerce.date(),
  expiration: z.coerce.date(),
})

export type DigitalCertificate = z.infer<typeof DigitalCertificateSchema>

/////////////////////////////////////////
// FILE METADATA SCHEMA
/////////////////////////////////////////

/**
 * The `FileMetadata` model stores additional information for document files.
 */
export const FileMetadataSchema = z.object({
  id: z.string(),
  documentId: z.string(),
  fileSize: z.number().int(),
  mimeType: z.string(),
  checksum: z.string(),
  createdAt: z.coerce.date(),
})

export type FileMetadata = z.infer<typeof FileMetadataSchema>

/////////////////////////////////////////
// INSTITUTION SCHEMA
/////////////////////////////////////////

/**
 * The `Institution` model represents a municipality or organizational entity.
 */
export const InstitutionSchema = z.object({
  id: z.string(),
  name: z.string(),
  address: z.string().nullable(),
  phone: z.string().nullable(),
  email: z.string().nullable(),
  flag: z.string().nullable(),
  emblem: z.string().nullable(),
  mayorId: z.string().nullable(),
  viceMayorId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Institution = z.infer<typeof InstitutionSchema>

/////////////////////////////////////////
// DEPARTMENT SCHEMA
/////////////////////////////////////////

/**
 * The `Department` model represents organizational units within an institution.
 */
export const DepartmentSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  isSecretariat: z.boolean(),
  institutionId: z.string(),
  parentDepartmentId: z.number().int().nullable(),
  headId: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Department = z.infer<typeof DepartmentSchema>

/////////////////////////////////////////
// USER DEPARTMENT SCHEMA
/////////////////////////////////////////

/**
 * The `UserDepartment` model links users to departments with specific roles.
 */
export const UserDepartmentSchema = z.object({
  id: z.string(),
  userId: z.string(),
  departmentId: z.number().int(),
  role: z.string(),
  createdAt: z.coerce.date(),
})

export type UserDepartment = z.infer<typeof UserDepartmentSchema>

/////////////////////////////////////////
// TICKET SCHEMA
/////////////////////////////////////////

export const TicketSchema = z.object({
  id: z.string(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().nullable(),
  dueDate: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  closedAt: z.coerce.date().nullable(),
  lastResponseAt: z.coerce.date().nullable(),
})

export type Ticket = z.infer<typeof TicketSchema>

/////////////////////////////////////////
// TICKET STATUS SCHEMA
/////////////////////////////////////////

export const TicketStatusSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  createdAt: z.coerce.date(),
})

export type TicketStatus = z.infer<typeof TicketStatusSchema>

/////////////////////////////////////////
// TICKET PRIORITY SCHEMA
/////////////////////////////////////////

export const TicketPrioritySchema = z.object({
  id: z.number().int(),
  name: z.string(),
  createdAt: z.coerce.date(),
})

export type TicketPriority = z.infer<typeof TicketPrioritySchema>

/////////////////////////////////////////
// HELP TOPIC SCHEMA
/////////////////////////////////////////

export const HelpTopicSchema = z.object({
  id: z.number().int(),
  topic: z.string(),
  description: z.string().nullable(),
  departmentId: z.number().int(),
  createdAt: z.coerce.date(),
})

export type HelpTopic = z.infer<typeof HelpTopicSchema>

/////////////////////////////////////////
// SLA PLAN SCHEMA
/////////////////////////////////////////

export const SLAPlanSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  gracePeriod: z.number().int(),
  createdAt: z.coerce.date(),
})

export type SLAPlan = z.infer<typeof SLAPlanSchema>

/////////////////////////////////////////
// TICKET THREAD SCHEMA
/////////////////////////////////////////

export const TicketThreadSchema = z.object({
  id: z.string(),
  ticketId: z.string(),
  userId: z.string(),
  message: z.string(),
  createdAt: z.coerce.date(),
})

export type TicketThread = z.infer<typeof TicketThreadSchema>

/////////////////////////////////////////
// TICKET ATTACHMENT SCHEMA
/////////////////////////////////////////

export const TicketAttachmentSchema = z.object({
  id: z.string(),
  ticketId: z.string(),
  ticketThreadId: z.string(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date(),
})

export type TicketAttachment = z.infer<typeof TicketAttachmentSchema>

/////////////////////////////////////////
// TICKET COLLABORATOR SCHEMA
/////////////////////////////////////////

export const TicketCollaboratorSchema = z.object({
  id: z.string(),
  ticketId: z.string(),
  userId: z.string(),
})

export type TicketCollaborator = z.infer<typeof TicketCollaboratorSchema>

/////////////////////////////////////////
// CUSTOM FIELD SCHEMA
/////////////////////////////////////////

export const CustomFieldSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  fieldType: z.string(),
  createdAt: z.coerce.date(),
})

export type CustomField = z.infer<typeof CustomFieldSchema>

/////////////////////////////////////////
// TICKET CUSTOM FIELD SCHEMA
/////////////////////////////////////////

export const TicketCustomFieldSchema = z.object({
  id: z.string(),
  ticketId: z.string(),
  fieldId: z.number().int(),
  value: z.string(),
})

export type TicketCustomField = z.infer<typeof TicketCustomFieldSchema>

/////////////////////////////////////////
// TASK USER SCHEMA
/////////////////////////////////////////

export const TaskUserSchema = z.object({
  id: z.string(),
  taskId: z.string(),
  userId: z.string(),
})

export type TaskUser = z.infer<typeof TaskUserSchema>

/////////////////////////////////////////
// TICKET USER SCHEMA
/////////////////////////////////////////

export const TicketUserSchema = z.object({
  id: z.string(),
  ticketId: z.string(),
  userId: z.string(),
})

export type TicketUser = z.infer<typeof TicketUserSchema>

/////////////////////////////////////////
// BACK 3 ND USER SCHEMA
/////////////////////////////////////////

export const back3nd_userSchema = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  password: z.string(),
  reset_token: z.string().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type back3nd_user = z.infer<typeof back3nd_userSchema>

/////////////////////////////////////////
// BACK 3 ND ROLE SCHEMA
/////////////////////////////////////////

export const back3nd_roleSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type back3nd_role = z.infer<typeof back3nd_roleSchema>

/////////////////////////////////////////
// BACK 3 ND USER ROLE SCHEMA
/////////////////////////////////////////

export const back3nd_user_roleSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  role_id: z.string(),
  created_at: z.coerce.date(),
})

export type back3nd_user_role = z.infer<typeof back3nd_user_roleSchema>

/////////////////////////////////////////
// BACK 3 ND PERMISSION SCHEMA
/////////////////////////////////////////

export const back3nd_permissionSchema = z.object({
  id: z.string(),
  role_id: z.string(),
  can_create: z.boolean(),
  can_read: z.boolean(),
  can_update: z.boolean(),
  can_delete: z.boolean(),
  created_at: z.coerce.date(),
  collection: z.string(),
})

export type back3nd_permission = z.infer<typeof back3nd_permissionSchema>

/////////////////////////////////////////
// BACK 3 ND PASSWORD RESET SCHEMA
/////////////////////////////////////////

export const back3nd_password_resetSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  token: z.string(),
  created_at: z.coerce.date(),
  expires_at: z.coerce.date(),
})

export type back3nd_password_reset = z.infer<typeof back3nd_password_resetSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  digitalCertificates: z.union([z.boolean(),z.lazy(() => DigitalCertificateFindManyArgsSchema)]).optional(),
  documentUsers: z.union([z.boolean(),z.lazy(() => DocumentUserFindManyArgsSchema)]).optional(),
  documentVersionCreators: z.union([z.boolean(),z.lazy(() => DocumentVersionCreatorFindManyArgsSchema)]).optional(),
  notifications: z.union([z.boolean(),z.lazy(() => NotificationFindManyArgsSchema)]).optional(),
  sharedDocuments: z.union([z.boolean(),z.lazy(() => SharedDocumentFindManyArgsSchema)]).optional(),
  tasksAssigned: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  taskUsers: z.union([z.boolean(),z.lazy(() => TaskUserFindManyArgsSchema)]).optional(),
  ticketsAssigned: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  ticketsCreated: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  ticketCollaborators: z.union([z.boolean(),z.lazy(() => TicketCollaboratorFindManyArgsSchema)]).optional(),
  ticketThreads: z.union([z.boolean(),z.lazy(() => TicketThreadFindManyArgsSchema)]).optional(),
  ticketUsers: z.union([z.boolean(),z.lazy(() => TicketUserFindManyArgsSchema)]).optional(),
  userDepartments: z.union([z.boolean(),z.lazy(() => UserDepartmentFindManyArgsSchema)]).optional(),
  headOfDepartments: z.union([z.boolean(),z.lazy(() => DepartmentFindManyArgsSchema)]).optional(),
  mayorInstitutions: z.union([z.boolean(),z.lazy(() => InstitutionFindManyArgsSchema)]).optional(),
  viceMayorInstitutions: z.union([z.boolean(),z.lazy(() => InstitutionFindManyArgsSchema)]).optional(),
  userOnDocuments: z.union([z.boolean(),z.lazy(() => UserOnDocumentsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  auditLogs: z.boolean().optional(),
  digitalCertificates: z.boolean().optional(),
  documentUsers: z.boolean().optional(),
  documentVersionCreators: z.boolean().optional(),
  notifications: z.boolean().optional(),
  sharedDocuments: z.boolean().optional(),
  tasksAssigned: z.boolean().optional(),
  taskUsers: z.boolean().optional(),
  ticketsAssigned: z.boolean().optional(),
  ticketsCreated: z.boolean().optional(),
  ticketCollaborators: z.boolean().optional(),
  ticketThreads: z.boolean().optional(),
  ticketUsers: z.boolean().optional(),
  userDepartments: z.boolean().optional(),
  headOfDepartments: z.boolean().optional(),
  mayorInstitutions: z.boolean().optional(),
  viceMayorInstitutions: z.boolean().optional(),
  userOnDocuments: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  apiUserId: z.boolean().optional(),
  email: z.boolean().optional(),
  name: z.boolean().optional(),
  phoneNumber: z.boolean().optional(),
  jobTitle: z.boolean().optional(),
  profilePhoto: z.boolean().optional(),
  role: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  digitalCertificates: z.union([z.boolean(),z.lazy(() => DigitalCertificateFindManyArgsSchema)]).optional(),
  documentUsers: z.union([z.boolean(),z.lazy(() => DocumentUserFindManyArgsSchema)]).optional(),
  documentVersionCreators: z.union([z.boolean(),z.lazy(() => DocumentVersionCreatorFindManyArgsSchema)]).optional(),
  notifications: z.union([z.boolean(),z.lazy(() => NotificationFindManyArgsSchema)]).optional(),
  sharedDocuments: z.union([z.boolean(),z.lazy(() => SharedDocumentFindManyArgsSchema)]).optional(),
  tasksAssigned: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  taskUsers: z.union([z.boolean(),z.lazy(() => TaskUserFindManyArgsSchema)]).optional(),
  ticketsAssigned: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  ticketsCreated: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  ticketCollaborators: z.union([z.boolean(),z.lazy(() => TicketCollaboratorFindManyArgsSchema)]).optional(),
  ticketThreads: z.union([z.boolean(),z.lazy(() => TicketThreadFindManyArgsSchema)]).optional(),
  ticketUsers: z.union([z.boolean(),z.lazy(() => TicketUserFindManyArgsSchema)]).optional(),
  userDepartments: z.union([z.boolean(),z.lazy(() => UserDepartmentFindManyArgsSchema)]).optional(),
  headOfDepartments: z.union([z.boolean(),z.lazy(() => DepartmentFindManyArgsSchema)]).optional(),
  mayorInstitutions: z.union([z.boolean(),z.lazy(() => InstitutionFindManyArgsSchema)]).optional(),
  viceMayorInstitutions: z.union([z.boolean(),z.lazy(() => InstitutionFindManyArgsSchema)]).optional(),
  userOnDocuments: z.union([z.boolean(),z.lazy(() => UserOnDocumentsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DOCUMENT
//------------------------------------------------------

export const DocumentIncludeSchema: z.ZodType<Prisma.DocumentInclude> = z.object({
  attachments: z.union([z.boolean(),z.lazy(() => AttachmentFindManyArgsSchema)]).optional(),
  documentUsers: z.union([z.boolean(),z.lazy(() => DocumentUserFindManyArgsSchema)]).optional(),
  versions: z.union([z.boolean(),z.lazy(() => DocumentVersionFindManyArgsSchema)]).optional(),
  fileMetadata: z.union([z.boolean(),z.lazy(() => FileMetadataArgsSchema)]).optional(),
  sharedDocuments: z.union([z.boolean(),z.lazy(() => SharedDocumentFindManyArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  userOnDocuments: z.union([z.boolean(),z.lazy(() => UserOnDocumentsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DocumentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const DocumentArgsSchema: z.ZodType<Prisma.DocumentDefaultArgs> = z.object({
  select: z.lazy(() => DocumentSelectSchema).optional(),
  include: z.lazy(() => DocumentIncludeSchema).optional(),
}).strict();

export const DocumentCountOutputTypeArgsSchema: z.ZodType<Prisma.DocumentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => DocumentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const DocumentCountOutputTypeSelectSchema: z.ZodType<Prisma.DocumentCountOutputTypeSelect> = z.object({
  attachments: z.boolean().optional(),
  documentUsers: z.boolean().optional(),
  versions: z.boolean().optional(),
  sharedDocuments: z.boolean().optional(),
  tasks: z.boolean().optional(),
  userOnDocuments: z.boolean().optional(),
}).strict();

export const DocumentSelectSchema: z.ZodType<Prisma.DocumentSelect> = z.object({
  id: z.boolean().optional(),
  title: z.boolean().optional(),
  filePath: z.boolean().optional(),
  mimeType: z.boolean().optional(),
  keywords: z.boolean().optional(),
  ocrText: z.boolean().optional(),
  ownerId: z.boolean().optional(),
  signed: z.boolean().optional(),
  signedAt: z.boolean().optional(),
  signature: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  attachments: z.union([z.boolean(),z.lazy(() => AttachmentFindManyArgsSchema)]).optional(),
  documentUsers: z.union([z.boolean(),z.lazy(() => DocumentUserFindManyArgsSchema)]).optional(),
  versions: z.union([z.boolean(),z.lazy(() => DocumentVersionFindManyArgsSchema)]).optional(),
  fileMetadata: z.union([z.boolean(),z.lazy(() => FileMetadataArgsSchema)]).optional(),
  sharedDocuments: z.union([z.boolean(),z.lazy(() => SharedDocumentFindManyArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  userOnDocuments: z.union([z.boolean(),z.lazy(() => UserOnDocumentsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DocumentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER ON DOCUMENTS
//------------------------------------------------------

export const UserOnDocumentsIncludeSchema: z.ZodType<Prisma.UserOnDocumentsInclude> = z.object({
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const UserOnDocumentsArgsSchema: z.ZodType<Prisma.UserOnDocumentsDefaultArgs> = z.object({
  select: z.lazy(() => UserOnDocumentsSelectSchema).optional(),
  include: z.lazy(() => UserOnDocumentsIncludeSchema).optional(),
}).strict();

export const UserOnDocumentsSelectSchema: z.ZodType<Prisma.UserOnDocumentsSelect> = z.object({
  userId: z.boolean().optional(),
  documentId: z.boolean().optional(),
  assignedAt: z.boolean().optional(),
  role: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// DOCUMENT USER
//------------------------------------------------------

export const DocumentUserIncludeSchema: z.ZodType<Prisma.DocumentUserInclude> = z.object({
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const DocumentUserArgsSchema: z.ZodType<Prisma.DocumentUserDefaultArgs> = z.object({
  select: z.lazy(() => DocumentUserSelectSchema).optional(),
  include: z.lazy(() => DocumentUserIncludeSchema).optional(),
}).strict();

export const DocumentUserSelectSchema: z.ZodType<Prisma.DocumentUserSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  documentId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// DOCUMENT VERSION
//------------------------------------------------------

export const DocumentVersionIncludeSchema: z.ZodType<Prisma.DocumentVersionInclude> = z.object({
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
  documentVersionCreators: z.union([z.boolean(),z.lazy(() => DocumentVersionCreatorFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DocumentVersionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const DocumentVersionArgsSchema: z.ZodType<Prisma.DocumentVersionDefaultArgs> = z.object({
  select: z.lazy(() => DocumentVersionSelectSchema).optional(),
  include: z.lazy(() => DocumentVersionIncludeSchema).optional(),
}).strict();

export const DocumentVersionCountOutputTypeArgsSchema: z.ZodType<Prisma.DocumentVersionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => DocumentVersionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const DocumentVersionCountOutputTypeSelectSchema: z.ZodType<Prisma.DocumentVersionCountOutputTypeSelect> = z.object({
  documentVersionCreators: z.boolean().optional(),
}).strict();

export const DocumentVersionSelectSchema: z.ZodType<Prisma.DocumentVersionSelect> = z.object({
  id: z.boolean().optional(),
  documentId: z.boolean().optional(),
  versionNumber: z.boolean().optional(),
  filePath: z.boolean().optional(),
  changesDescription: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
  documentVersionCreators: z.union([z.boolean(),z.lazy(() => DocumentVersionCreatorFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DocumentVersionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DOCUMENT VERSION CREATOR
//------------------------------------------------------

export const DocumentVersionCreatorIncludeSchema: z.ZodType<Prisma.DocumentVersionCreatorInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  version: z.union([z.boolean(),z.lazy(() => DocumentVersionArgsSchema)]).optional(),
}).strict()

export const DocumentVersionCreatorArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorDefaultArgs> = z.object({
  select: z.lazy(() => DocumentVersionCreatorSelectSchema).optional(),
  include: z.lazy(() => DocumentVersionCreatorIncludeSchema).optional(),
}).strict();

export const DocumentVersionCreatorSelectSchema: z.ZodType<Prisma.DocumentVersionCreatorSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  versionId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  version: z.union([z.boolean(),z.lazy(() => DocumentVersionArgsSchema)]).optional(),
}).strict()

// SHARED DOCUMENT
//------------------------------------------------------

export const SharedDocumentIncludeSchema: z.ZodType<Prisma.SharedDocumentInclude> = z.object({
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SharedDocumentArgsSchema: z.ZodType<Prisma.SharedDocumentDefaultArgs> = z.object({
  select: z.lazy(() => SharedDocumentSelectSchema).optional(),
  include: z.lazy(() => SharedDocumentIncludeSchema).optional(),
}).strict();

export const SharedDocumentSelectSchema: z.ZodType<Prisma.SharedDocumentSelect> = z.object({
  id: z.boolean().optional(),
  documentId: z.boolean().optional(),
  userId: z.boolean().optional(),
  sharedAt: z.boolean().optional(),
  permission: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// WORKFLOW
//------------------------------------------------------

export const WorkflowIncludeSchema: z.ZodType<Prisma.WorkflowInclude> = z.object({
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WorkflowCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const WorkflowArgsSchema: z.ZodType<Prisma.WorkflowDefaultArgs> = z.object({
  select: z.lazy(() => WorkflowSelectSchema).optional(),
  include: z.lazy(() => WorkflowIncludeSchema).optional(),
}).strict();

export const WorkflowCountOutputTypeArgsSchema: z.ZodType<Prisma.WorkflowCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => WorkflowCountOutputTypeSelectSchema).nullish(),
}).strict();

export const WorkflowCountOutputTypeSelectSchema: z.ZodType<Prisma.WorkflowCountOutputTypeSelect> = z.object({
  auditLogs: z.boolean().optional(),
  tasks: z.boolean().optional(),
}).strict();

export const WorkflowSelectSchema: z.ZodType<Prisma.WorkflowSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  type: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => TaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => WorkflowCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TASK
//------------------------------------------------------

export const TaskIncludeSchema: z.ZodType<Prisma.TaskInclude> = z.object({
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  assignedTo: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
  workflow: z.union([z.boolean(),z.lazy(() => WorkflowArgsSchema)]).optional(),
  taskUsers: z.union([z.boolean(),z.lazy(() => TaskUserFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaskCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TaskArgsSchema: z.ZodType<Prisma.TaskDefaultArgs> = z.object({
  select: z.lazy(() => TaskSelectSchema).optional(),
  include: z.lazy(() => TaskIncludeSchema).optional(),
}).strict();

export const TaskCountOutputTypeArgsSchema: z.ZodType<Prisma.TaskCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TaskCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TaskCountOutputTypeSelectSchema: z.ZodType<Prisma.TaskCountOutputTypeSelect> = z.object({
  auditLogs: z.boolean().optional(),
  taskUsers: z.boolean().optional(),
}).strict();

export const TaskSelectSchema: z.ZodType<Prisma.TaskSelect> = z.object({
  id: z.boolean().optional(),
  workflowId: z.boolean().optional(),
  assignedToId: z.boolean().optional(),
  documentId: z.boolean().optional(),
  title: z.boolean().optional(),
  description: z.boolean().optional(),
  status: z.boolean().optional(),
  dueDate: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogFindManyArgsSchema)]).optional(),
  assignedTo: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
  workflow: z.union([z.boolean(),z.lazy(() => WorkflowArgsSchema)]).optional(),
  taskUsers: z.union([z.boolean(),z.lazy(() => TaskUserFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaskCountOutputTypeArgsSchema)]).optional(),
}).strict()

// AUDIT LOG
//------------------------------------------------------

export const AuditLogIncludeSchema: z.ZodType<Prisma.AuditLogInclude> = z.object({
  performedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  workflow: z.union([z.boolean(),z.lazy(() => WorkflowArgsSchema)]).optional(),
}).strict()

export const AuditLogArgsSchema: z.ZodType<Prisma.AuditLogDefaultArgs> = z.object({
  select: z.lazy(() => AuditLogSelectSchema).optional(),
  include: z.lazy(() => AuditLogIncludeSchema).optional(),
}).strict();

export const AuditLogSelectSchema: z.ZodType<Prisma.AuditLogSelect> = z.object({
  id: z.boolean().optional(),
  taskId: z.boolean().optional(),
  workflowId: z.boolean().optional(),
  action: z.boolean().optional(),
  performedById: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  description: z.boolean().optional(),
  performedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  workflow: z.union([z.boolean(),z.lazy(() => WorkflowArgsSchema)]).optional(),
}).strict()

// NOTIFICATION
//------------------------------------------------------

export const NotificationIncludeSchema: z.ZodType<Prisma.NotificationInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const NotificationArgsSchema: z.ZodType<Prisma.NotificationDefaultArgs> = z.object({
  select: z.lazy(() => NotificationSelectSchema).optional(),
  include: z.lazy(() => NotificationIncludeSchema).optional(),
}).strict();

export const NotificationSelectSchema: z.ZodType<Prisma.NotificationSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  message: z.boolean().optional(),
  read: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ATTACHMENT
//------------------------------------------------------

export const AttachmentIncludeSchema: z.ZodType<Prisma.AttachmentInclude> = z.object({
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
}).strict()

export const AttachmentArgsSchema: z.ZodType<Prisma.AttachmentDefaultArgs> = z.object({
  select: z.lazy(() => AttachmentSelectSchema).optional(),
  include: z.lazy(() => AttachmentIncludeSchema).optional(),
}).strict();

export const AttachmentSelectSchema: z.ZodType<Prisma.AttachmentSelect> = z.object({
  id: z.boolean().optional(),
  documentId: z.boolean().optional(),
  filePath: z.boolean().optional(),
  fileName: z.boolean().optional(),
  mimeType: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
}).strict()

// DIGITAL CERTIFICATE
//------------------------------------------------------

export const DigitalCertificateIncludeSchema: z.ZodType<Prisma.DigitalCertificateInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const DigitalCertificateArgsSchema: z.ZodType<Prisma.DigitalCertificateDefaultArgs> = z.object({
  select: z.lazy(() => DigitalCertificateSelectSchema).optional(),
  include: z.lazy(() => DigitalCertificateIncludeSchema).optional(),
}).strict();

export const DigitalCertificateSelectSchema: z.ZodType<Prisma.DigitalCertificateSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  alias: z.boolean().optional(),
  filePath: z.boolean().optional(),
  password: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  expiration: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// FILE METADATA
//------------------------------------------------------

export const FileMetadataIncludeSchema: z.ZodType<Prisma.FileMetadataInclude> = z.object({
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
}).strict()

export const FileMetadataArgsSchema: z.ZodType<Prisma.FileMetadataDefaultArgs> = z.object({
  select: z.lazy(() => FileMetadataSelectSchema).optional(),
  include: z.lazy(() => FileMetadataIncludeSchema).optional(),
}).strict();

export const FileMetadataSelectSchema: z.ZodType<Prisma.FileMetadataSelect> = z.object({
  id: z.boolean().optional(),
  documentId: z.boolean().optional(),
  fileSize: z.boolean().optional(),
  mimeType: z.boolean().optional(),
  checksum: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  document: z.union([z.boolean(),z.lazy(() => DocumentArgsSchema)]).optional(),
}).strict()

// INSTITUTION
//------------------------------------------------------

export const InstitutionIncludeSchema: z.ZodType<Prisma.InstitutionInclude> = z.object({
  mayor: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  viceMayor: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  departments: z.union([z.boolean(),z.lazy(() => DepartmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => InstitutionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const InstitutionArgsSchema: z.ZodType<Prisma.InstitutionDefaultArgs> = z.object({
  select: z.lazy(() => InstitutionSelectSchema).optional(),
  include: z.lazy(() => InstitutionIncludeSchema).optional(),
}).strict();

export const InstitutionCountOutputTypeArgsSchema: z.ZodType<Prisma.InstitutionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => InstitutionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const InstitutionCountOutputTypeSelectSchema: z.ZodType<Prisma.InstitutionCountOutputTypeSelect> = z.object({
  departments: z.boolean().optional(),
}).strict();

export const InstitutionSelectSchema: z.ZodType<Prisma.InstitutionSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  address: z.boolean().optional(),
  phone: z.boolean().optional(),
  email: z.boolean().optional(),
  flag: z.boolean().optional(),
  emblem: z.boolean().optional(),
  mayorId: z.boolean().optional(),
  viceMayorId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  mayor: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  viceMayor: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  departments: z.union([z.boolean(),z.lazy(() => DepartmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => InstitutionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// DEPARTMENT
//------------------------------------------------------

export const DepartmentIncludeSchema: z.ZodType<Prisma.DepartmentInclude> = z.object({
  institution: z.union([z.boolean(),z.lazy(() => InstitutionArgsSchema)]).optional(),
  parentDepartment: z.union([z.boolean(),z.lazy(() => DepartmentArgsSchema)]).optional(),
  childDepartments: z.union([z.boolean(),z.lazy(() => DepartmentFindManyArgsSchema)]).optional(),
  head: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  userDepartments: z.union([z.boolean(),z.lazy(() => UserDepartmentFindManyArgsSchema)]).optional(),
  tickets: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  helpTopics: z.union([z.boolean(),z.lazy(() => HelpTopicFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DepartmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const DepartmentArgsSchema: z.ZodType<Prisma.DepartmentDefaultArgs> = z.object({
  select: z.lazy(() => DepartmentSelectSchema).optional(),
  include: z.lazy(() => DepartmentIncludeSchema).optional(),
}).strict();

export const DepartmentCountOutputTypeArgsSchema: z.ZodType<Prisma.DepartmentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => DepartmentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const DepartmentCountOutputTypeSelectSchema: z.ZodType<Prisma.DepartmentCountOutputTypeSelect> = z.object({
  childDepartments: z.boolean().optional(),
  userDepartments: z.boolean().optional(),
  tickets: z.boolean().optional(),
  helpTopics: z.boolean().optional(),
}).strict();

export const DepartmentSelectSchema: z.ZodType<Prisma.DepartmentSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  isSecretariat: z.boolean().optional(),
  institutionId: z.boolean().optional(),
  parentDepartmentId: z.boolean().optional(),
  headId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  institution: z.union([z.boolean(),z.lazy(() => InstitutionArgsSchema)]).optional(),
  parentDepartment: z.union([z.boolean(),z.lazy(() => DepartmentArgsSchema)]).optional(),
  childDepartments: z.union([z.boolean(),z.lazy(() => DepartmentFindManyArgsSchema)]).optional(),
  head: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  userDepartments: z.union([z.boolean(),z.lazy(() => UserDepartmentFindManyArgsSchema)]).optional(),
  tickets: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  helpTopics: z.union([z.boolean(),z.lazy(() => HelpTopicFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DepartmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER DEPARTMENT
//------------------------------------------------------

export const UserDepartmentIncludeSchema: z.ZodType<Prisma.UserDepartmentInclude> = z.object({
  department: z.union([z.boolean(),z.lazy(() => DepartmentArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const UserDepartmentArgsSchema: z.ZodType<Prisma.UserDepartmentDefaultArgs> = z.object({
  select: z.lazy(() => UserDepartmentSelectSchema).optional(),
  include: z.lazy(() => UserDepartmentIncludeSchema).optional(),
}).strict();

export const UserDepartmentSelectSchema: z.ZodType<Prisma.UserDepartmentSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  departmentId: z.boolean().optional(),
  role: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  department: z.union([z.boolean(),z.lazy(() => DepartmentArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// TICKET
//------------------------------------------------------

export const TicketIncludeSchema: z.ZodType<Prisma.TicketInclude> = z.object({
  assignedTo: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  department: z.union([z.boolean(),z.lazy(() => DepartmentArgsSchema)]).optional(),
  helpTopic: z.union([z.boolean(),z.lazy(() => HelpTopicArgsSchema)]).optional(),
  priority: z.union([z.boolean(),z.lazy(() => TicketPriorityArgsSchema)]).optional(),
  slaPlan: z.union([z.boolean(),z.lazy(() => SLAPlanArgsSchema)]).optional(),
  status: z.union([z.boolean(),z.lazy(() => TicketStatusArgsSchema)]).optional(),
  attachments: z.union([z.boolean(),z.lazy(() => TicketAttachmentFindManyArgsSchema)]).optional(),
  collaborators: z.union([z.boolean(),z.lazy(() => TicketCollaboratorFindManyArgsSchema)]).optional(),
  customFields: z.union([z.boolean(),z.lazy(() => TicketCustomFieldFindManyArgsSchema)]).optional(),
  threads: z.union([z.boolean(),z.lazy(() => TicketThreadArgsSchema)]).optional(),
  ticketUsers: z.union([z.boolean(),z.lazy(() => TicketUserFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TicketCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TicketArgsSchema: z.ZodType<Prisma.TicketDefaultArgs> = z.object({
  select: z.lazy(() => TicketSelectSchema).optional(),
  include: z.lazy(() => TicketIncludeSchema).optional(),
}).strict();

export const TicketCountOutputTypeArgsSchema: z.ZodType<Prisma.TicketCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TicketCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TicketCountOutputTypeSelectSchema: z.ZodType<Prisma.TicketCountOutputTypeSelect> = z.object({
  attachments: z.boolean().optional(),
  collaborators: z.boolean().optional(),
  customFields: z.boolean().optional(),
  ticketUsers: z.boolean().optional(),
}).strict();

export const TicketSelectSchema: z.ZodType<Prisma.TicketSelect> = z.object({
  id: z.boolean().optional(),
  subject: z.boolean().optional(),
  description: z.boolean().optional(),
  statusId: z.boolean().optional(),
  priorityId: z.boolean().optional(),
  createdById: z.boolean().optional(),
  assignedToId: z.boolean().optional(),
  departmentId: z.boolean().optional(),
  helpTopicId: z.boolean().optional(),
  slaPlanId: z.boolean().optional(),
  dueDate: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  closedAt: z.boolean().optional(),
  lastResponseAt: z.boolean().optional(),
  assignedTo: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  department: z.union([z.boolean(),z.lazy(() => DepartmentArgsSchema)]).optional(),
  helpTopic: z.union([z.boolean(),z.lazy(() => HelpTopicArgsSchema)]).optional(),
  priority: z.union([z.boolean(),z.lazy(() => TicketPriorityArgsSchema)]).optional(),
  slaPlan: z.union([z.boolean(),z.lazy(() => SLAPlanArgsSchema)]).optional(),
  status: z.union([z.boolean(),z.lazy(() => TicketStatusArgsSchema)]).optional(),
  attachments: z.union([z.boolean(),z.lazy(() => TicketAttachmentFindManyArgsSchema)]).optional(),
  collaborators: z.union([z.boolean(),z.lazy(() => TicketCollaboratorFindManyArgsSchema)]).optional(),
  customFields: z.union([z.boolean(),z.lazy(() => TicketCustomFieldFindManyArgsSchema)]).optional(),
  threads: z.union([z.boolean(),z.lazy(() => TicketThreadArgsSchema)]).optional(),
  ticketUsers: z.union([z.boolean(),z.lazy(() => TicketUserFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TicketCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TICKET STATUS
//------------------------------------------------------

export const TicketStatusIncludeSchema: z.ZodType<Prisma.TicketStatusInclude> = z.object({
  tickets: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TicketStatusCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TicketStatusArgsSchema: z.ZodType<Prisma.TicketStatusDefaultArgs> = z.object({
  select: z.lazy(() => TicketStatusSelectSchema).optional(),
  include: z.lazy(() => TicketStatusIncludeSchema).optional(),
}).strict();

export const TicketStatusCountOutputTypeArgsSchema: z.ZodType<Prisma.TicketStatusCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TicketStatusCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TicketStatusCountOutputTypeSelectSchema: z.ZodType<Prisma.TicketStatusCountOutputTypeSelect> = z.object({
  tickets: z.boolean().optional(),
}).strict();

export const TicketStatusSelectSchema: z.ZodType<Prisma.TicketStatusSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  tickets: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TicketStatusCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TICKET PRIORITY
//------------------------------------------------------

export const TicketPriorityIncludeSchema: z.ZodType<Prisma.TicketPriorityInclude> = z.object({
  tickets: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TicketPriorityCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TicketPriorityArgsSchema: z.ZodType<Prisma.TicketPriorityDefaultArgs> = z.object({
  select: z.lazy(() => TicketPrioritySelectSchema).optional(),
  include: z.lazy(() => TicketPriorityIncludeSchema).optional(),
}).strict();

export const TicketPriorityCountOutputTypeArgsSchema: z.ZodType<Prisma.TicketPriorityCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TicketPriorityCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TicketPriorityCountOutputTypeSelectSchema: z.ZodType<Prisma.TicketPriorityCountOutputTypeSelect> = z.object({
  tickets: z.boolean().optional(),
}).strict();

export const TicketPrioritySelectSchema: z.ZodType<Prisma.TicketPrioritySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  tickets: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TicketPriorityCountOutputTypeArgsSchema)]).optional(),
}).strict()

// HELP TOPIC
//------------------------------------------------------

export const HelpTopicIncludeSchema: z.ZodType<Prisma.HelpTopicInclude> = z.object({
  department: z.union([z.boolean(),z.lazy(() => DepartmentArgsSchema)]).optional(),
  tickets: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => HelpTopicCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const HelpTopicArgsSchema: z.ZodType<Prisma.HelpTopicDefaultArgs> = z.object({
  select: z.lazy(() => HelpTopicSelectSchema).optional(),
  include: z.lazy(() => HelpTopicIncludeSchema).optional(),
}).strict();

export const HelpTopicCountOutputTypeArgsSchema: z.ZodType<Prisma.HelpTopicCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => HelpTopicCountOutputTypeSelectSchema).nullish(),
}).strict();

export const HelpTopicCountOutputTypeSelectSchema: z.ZodType<Prisma.HelpTopicCountOutputTypeSelect> = z.object({
  tickets: z.boolean().optional(),
}).strict();

export const HelpTopicSelectSchema: z.ZodType<Prisma.HelpTopicSelect> = z.object({
  id: z.boolean().optional(),
  topic: z.boolean().optional(),
  description: z.boolean().optional(),
  departmentId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  department: z.union([z.boolean(),z.lazy(() => DepartmentArgsSchema)]).optional(),
  tickets: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => HelpTopicCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SLA PLAN
//------------------------------------------------------

export const SLAPlanIncludeSchema: z.ZodType<Prisma.SLAPlanInclude> = z.object({
  tickets: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SLAPlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SLAPlanArgsSchema: z.ZodType<Prisma.SLAPlanDefaultArgs> = z.object({
  select: z.lazy(() => SLAPlanSelectSchema).optional(),
  include: z.lazy(() => SLAPlanIncludeSchema).optional(),
}).strict();

export const SLAPlanCountOutputTypeArgsSchema: z.ZodType<Prisma.SLAPlanCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SLAPlanCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SLAPlanCountOutputTypeSelectSchema: z.ZodType<Prisma.SLAPlanCountOutputTypeSelect> = z.object({
  tickets: z.boolean().optional(),
}).strict();

export const SLAPlanSelectSchema: z.ZodType<Prisma.SLAPlanSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  gracePeriod: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  tickets: z.union([z.boolean(),z.lazy(() => TicketFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SLAPlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TICKET THREAD
//------------------------------------------------------

export const TicketThreadIncludeSchema: z.ZodType<Prisma.TicketThreadInclude> = z.object({
  attachments: z.union([z.boolean(),z.lazy(() => TicketAttachmentFindManyArgsSchema)]).optional(),
  ticket: z.union([z.boolean(),z.lazy(() => TicketArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TicketThreadCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TicketThreadArgsSchema: z.ZodType<Prisma.TicketThreadDefaultArgs> = z.object({
  select: z.lazy(() => TicketThreadSelectSchema).optional(),
  include: z.lazy(() => TicketThreadIncludeSchema).optional(),
}).strict();

export const TicketThreadCountOutputTypeArgsSchema: z.ZodType<Prisma.TicketThreadCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TicketThreadCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TicketThreadCountOutputTypeSelectSchema: z.ZodType<Prisma.TicketThreadCountOutputTypeSelect> = z.object({
  attachments: z.boolean().optional(),
}).strict();

export const TicketThreadSelectSchema: z.ZodType<Prisma.TicketThreadSelect> = z.object({
  id: z.boolean().optional(),
  ticketId: z.boolean().optional(),
  userId: z.boolean().optional(),
  message: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  attachments: z.union([z.boolean(),z.lazy(() => TicketAttachmentFindManyArgsSchema)]).optional(),
  ticket: z.union([z.boolean(),z.lazy(() => TicketArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TicketThreadCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TICKET ATTACHMENT
//------------------------------------------------------

export const TicketAttachmentIncludeSchema: z.ZodType<Prisma.TicketAttachmentInclude> = z.object({
  ticket: z.union([z.boolean(),z.lazy(() => TicketArgsSchema)]).optional(),
  ticketThread: z.union([z.boolean(),z.lazy(() => TicketThreadArgsSchema)]).optional(),
}).strict()

export const TicketAttachmentArgsSchema: z.ZodType<Prisma.TicketAttachmentDefaultArgs> = z.object({
  select: z.lazy(() => TicketAttachmentSelectSchema).optional(),
  include: z.lazy(() => TicketAttachmentIncludeSchema).optional(),
}).strict();

export const TicketAttachmentSelectSchema: z.ZodType<Prisma.TicketAttachmentSelect> = z.object({
  id: z.boolean().optional(),
  ticketId: z.boolean().optional(),
  ticketThreadId: z.boolean().optional(),
  filePath: z.boolean().optional(),
  fileName: z.boolean().optional(),
  mimeType: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  ticket: z.union([z.boolean(),z.lazy(() => TicketArgsSchema)]).optional(),
  ticketThread: z.union([z.boolean(),z.lazy(() => TicketThreadArgsSchema)]).optional(),
}).strict()

// TICKET COLLABORATOR
//------------------------------------------------------

export const TicketCollaboratorIncludeSchema: z.ZodType<Prisma.TicketCollaboratorInclude> = z.object({
  ticket: z.union([z.boolean(),z.lazy(() => TicketArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const TicketCollaboratorArgsSchema: z.ZodType<Prisma.TicketCollaboratorDefaultArgs> = z.object({
  select: z.lazy(() => TicketCollaboratorSelectSchema).optional(),
  include: z.lazy(() => TicketCollaboratorIncludeSchema).optional(),
}).strict();

export const TicketCollaboratorSelectSchema: z.ZodType<Prisma.TicketCollaboratorSelect> = z.object({
  id: z.boolean().optional(),
  ticketId: z.boolean().optional(),
  userId: z.boolean().optional(),
  ticket: z.union([z.boolean(),z.lazy(() => TicketArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// CUSTOM FIELD
//------------------------------------------------------

export const CustomFieldIncludeSchema: z.ZodType<Prisma.CustomFieldInclude> = z.object({
  tickets: z.union([z.boolean(),z.lazy(() => TicketCustomFieldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomFieldCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CustomFieldArgsSchema: z.ZodType<Prisma.CustomFieldDefaultArgs> = z.object({
  select: z.lazy(() => CustomFieldSelectSchema).optional(),
  include: z.lazy(() => CustomFieldIncludeSchema).optional(),
}).strict();

export const CustomFieldCountOutputTypeArgsSchema: z.ZodType<Prisma.CustomFieldCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CustomFieldCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CustomFieldCountOutputTypeSelectSchema: z.ZodType<Prisma.CustomFieldCountOutputTypeSelect> = z.object({
  tickets: z.boolean().optional(),
}).strict();

export const CustomFieldSelectSchema: z.ZodType<Prisma.CustomFieldSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  fieldType: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  tickets: z.union([z.boolean(),z.lazy(() => TicketCustomFieldFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CustomFieldCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TICKET CUSTOM FIELD
//------------------------------------------------------

export const TicketCustomFieldIncludeSchema: z.ZodType<Prisma.TicketCustomFieldInclude> = z.object({
  field: z.union([z.boolean(),z.lazy(() => CustomFieldArgsSchema)]).optional(),
  ticket: z.union([z.boolean(),z.lazy(() => TicketArgsSchema)]).optional(),
}).strict()

export const TicketCustomFieldArgsSchema: z.ZodType<Prisma.TicketCustomFieldDefaultArgs> = z.object({
  select: z.lazy(() => TicketCustomFieldSelectSchema).optional(),
  include: z.lazy(() => TicketCustomFieldIncludeSchema).optional(),
}).strict();

export const TicketCustomFieldSelectSchema: z.ZodType<Prisma.TicketCustomFieldSelect> = z.object({
  id: z.boolean().optional(),
  ticketId: z.boolean().optional(),
  fieldId: z.boolean().optional(),
  value: z.boolean().optional(),
  field: z.union([z.boolean(),z.lazy(() => CustomFieldArgsSchema)]).optional(),
  ticket: z.union([z.boolean(),z.lazy(() => TicketArgsSchema)]).optional(),
}).strict()

// TASK USER
//------------------------------------------------------

export const TaskUserIncludeSchema: z.ZodType<Prisma.TaskUserInclude> = z.object({
  task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const TaskUserArgsSchema: z.ZodType<Prisma.TaskUserDefaultArgs> = z.object({
  select: z.lazy(() => TaskUserSelectSchema).optional(),
  include: z.lazy(() => TaskUserIncludeSchema).optional(),
}).strict();

export const TaskUserSelectSchema: z.ZodType<Prisma.TaskUserSelect> = z.object({
  id: z.boolean().optional(),
  taskId: z.boolean().optional(),
  userId: z.boolean().optional(),
  task: z.union([z.boolean(),z.lazy(() => TaskArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// TICKET USER
//------------------------------------------------------

export const TicketUserIncludeSchema: z.ZodType<Prisma.TicketUserInclude> = z.object({
  ticket: z.union([z.boolean(),z.lazy(() => TicketArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const TicketUserArgsSchema: z.ZodType<Prisma.TicketUserDefaultArgs> = z.object({
  select: z.lazy(() => TicketUserSelectSchema).optional(),
  include: z.lazy(() => TicketUserIncludeSchema).optional(),
}).strict();

export const TicketUserSelectSchema: z.ZodType<Prisma.TicketUserSelect> = z.object({
  id: z.boolean().optional(),
  ticketId: z.boolean().optional(),
  userId: z.boolean().optional(),
  ticket: z.union([z.boolean(),z.lazy(() => TicketArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// BACK 3 ND USER
//------------------------------------------------------

export const back3nd_userIncludeSchema: z.ZodType<Prisma.back3nd_userInclude> = z.object({
  back3nd_password_reset: z.union([z.boolean(),z.lazy(() => back3nd_password_resetFindManyArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => back3nd_user_roleFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Back3nd_userCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const back3nd_userArgsSchema: z.ZodType<Prisma.back3nd_userDefaultArgs> = z.object({
  select: z.lazy(() => back3nd_userSelectSchema).optional(),
  include: z.lazy(() => back3nd_userIncludeSchema).optional(),
}).strict();

export const back3nd_userCountOutputTypeArgsSchema: z.ZodType<Prisma.back3nd_userCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => back3nd_userCountOutputTypeSelectSchema).nullish(),
}).strict();

export const back3nd_userCountOutputTypeSelectSchema: z.ZodType<Prisma.back3nd_userCountOutputTypeSelect> = z.object({
  back3nd_password_reset: z.boolean().optional(),
  roles: z.boolean().optional(),
}).strict();

export const back3nd_userSelectSchema: z.ZodType<Prisma.back3nd_userSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  password: z.boolean().optional(),
  reset_token: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  back3nd_password_reset: z.union([z.boolean(),z.lazy(() => back3nd_password_resetFindManyArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => back3nd_user_roleFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Back3nd_userCountOutputTypeArgsSchema)]).optional(),
}).strict()

// BACK 3 ND ROLE
//------------------------------------------------------

export const back3nd_roleIncludeSchema: z.ZodType<Prisma.back3nd_roleInclude> = z.object({
  permissions: z.union([z.boolean(),z.lazy(() => back3nd_permissionFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => back3nd_user_roleFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Back3nd_roleCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const back3nd_roleArgsSchema: z.ZodType<Prisma.back3nd_roleDefaultArgs> = z.object({
  select: z.lazy(() => back3nd_roleSelectSchema).optional(),
  include: z.lazy(() => back3nd_roleIncludeSchema).optional(),
}).strict();

export const back3nd_roleCountOutputTypeArgsSchema: z.ZodType<Prisma.back3nd_roleCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => back3nd_roleCountOutputTypeSelectSchema).nullish(),
}).strict();

export const back3nd_roleCountOutputTypeSelectSchema: z.ZodType<Prisma.back3nd_roleCountOutputTypeSelect> = z.object({
  permissions: z.boolean().optional(),
  users: z.boolean().optional(),
}).strict();

export const back3nd_roleSelectSchema: z.ZodType<Prisma.back3nd_roleSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  permissions: z.union([z.boolean(),z.lazy(() => back3nd_permissionFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => back3nd_user_roleFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Back3nd_roleCountOutputTypeArgsSchema)]).optional(),
}).strict()

// BACK 3 ND USER ROLE
//------------------------------------------------------

export const back3nd_user_roleIncludeSchema: z.ZodType<Prisma.back3nd_user_roleInclude> = z.object({
  role: z.union([z.boolean(),z.lazy(() => back3nd_roleArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => back3nd_userArgsSchema)]).optional(),
}).strict()

export const back3nd_user_roleArgsSchema: z.ZodType<Prisma.back3nd_user_roleDefaultArgs> = z.object({
  select: z.lazy(() => back3nd_user_roleSelectSchema).optional(),
  include: z.lazy(() => back3nd_user_roleIncludeSchema).optional(),
}).strict();

export const back3nd_user_roleSelectSchema: z.ZodType<Prisma.back3nd_user_roleSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  role_id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  role: z.union([z.boolean(),z.lazy(() => back3nd_roleArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => back3nd_userArgsSchema)]).optional(),
}).strict()

// BACK 3 ND PERMISSION
//------------------------------------------------------

export const back3nd_permissionIncludeSchema: z.ZodType<Prisma.back3nd_permissionInclude> = z.object({
  role: z.union([z.boolean(),z.lazy(() => back3nd_roleArgsSchema)]).optional(),
}).strict()

export const back3nd_permissionArgsSchema: z.ZodType<Prisma.back3nd_permissionDefaultArgs> = z.object({
  select: z.lazy(() => back3nd_permissionSelectSchema).optional(),
  include: z.lazy(() => back3nd_permissionIncludeSchema).optional(),
}).strict();

export const back3nd_permissionSelectSchema: z.ZodType<Prisma.back3nd_permissionSelect> = z.object({
  id: z.boolean().optional(),
  role_id: z.boolean().optional(),
  can_create: z.boolean().optional(),
  can_read: z.boolean().optional(),
  can_update: z.boolean().optional(),
  can_delete: z.boolean().optional(),
  created_at: z.boolean().optional(),
  collection: z.boolean().optional(),
  role: z.union([z.boolean(),z.lazy(() => back3nd_roleArgsSchema)]).optional(),
}).strict()

// BACK 3 ND PASSWORD RESET
//------------------------------------------------------

export const back3nd_password_resetIncludeSchema: z.ZodType<Prisma.back3nd_password_resetInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => back3nd_userArgsSchema)]).optional(),
}).strict()

export const back3nd_password_resetArgsSchema: z.ZodType<Prisma.back3nd_password_resetDefaultArgs> = z.object({
  select: z.lazy(() => back3nd_password_resetSelectSchema).optional(),
  include: z.lazy(() => back3nd_password_resetIncludeSchema).optional(),
}).strict();

export const back3nd_password_resetSelectSchema: z.ZodType<Prisma.back3nd_password_resetSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  token: z.boolean().optional(),
  created_at: z.boolean().optional(),
  expires_at: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => back3nd_userArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  apiUserId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phoneNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  jobTitle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profilePhoto: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateListRelationFilterSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserListRelationFilterSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorListRelationFilterSchema).optional(),
  notifications: z.lazy(() => NotificationListRelationFilterSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentListRelationFilterSchema).optional(),
  tasksAssigned: z.lazy(() => TaskListRelationFilterSchema).optional(),
  taskUsers: z.lazy(() => TaskUserListRelationFilterSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketListRelationFilterSchema).optional(),
  ticketsCreated: z.lazy(() => TicketListRelationFilterSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorListRelationFilterSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadListRelationFilterSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserListRelationFilterSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentListRelationFilterSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentListRelationFilterSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionListRelationFilterSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionListRelationFilterSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  apiUserId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  phoneNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  jobTitle: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  profilePhoto: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  auditLogs: z.lazy(() => AuditLogOrderByRelationAggregateInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateOrderByRelationAggregateInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserOrderByRelationAggregateInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorOrderByRelationAggregateInputSchema).optional(),
  notifications: z.lazy(() => NotificationOrderByRelationAggregateInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentOrderByRelationAggregateInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserOrderByRelationAggregateInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketOrderByRelationAggregateInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketOrderByRelationAggregateInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorOrderByRelationAggregateInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadOrderByRelationAggregateInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserOrderByRelationAggregateInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentOrderByRelationAggregateInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentOrderByRelationAggregateInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionOrderByRelationAggregateInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionOrderByRelationAggregateInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => UserOrderByRelevanceInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    apiUserId: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.string(),
    apiUserId: z.string(),
  }),
  z.object({
    id: z.string(),
    email: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    apiUserId: z.string(),
    email: z.string(),
  }),
  z.object({
    apiUserId: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  apiUserId: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phoneNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  jobTitle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  profilePhoto: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateListRelationFilterSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserListRelationFilterSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorListRelationFilterSchema).optional(),
  notifications: z.lazy(() => NotificationListRelationFilterSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentListRelationFilterSchema).optional(),
  tasksAssigned: z.lazy(() => TaskListRelationFilterSchema).optional(),
  taskUsers: z.lazy(() => TaskUserListRelationFilterSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketListRelationFilterSchema).optional(),
  ticketsCreated: z.lazy(() => TicketListRelationFilterSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorListRelationFilterSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadListRelationFilterSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserListRelationFilterSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentListRelationFilterSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentListRelationFilterSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionListRelationFilterSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionListRelationFilterSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  apiUserId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  phoneNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  jobTitle: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  profilePhoto: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  apiUserId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  phoneNumber: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  jobTitle: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  profilePhoto: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DocumentWhereInputSchema: z.ZodType<Prisma.DocumentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentWhereInputSchema),z.lazy(() => DocumentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentWhereInputSchema),z.lazy(() => DocumentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  keywords: z.lazy(() => StringNullableListFilterSchema).optional(),
  ocrText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ownerId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  signed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  signedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  signature: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  attachments: z.lazy(() => AttachmentListRelationFilterSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserListRelationFilterSchema).optional(),
  versions: z.lazy(() => DocumentVersionListRelationFilterSchema).optional(),
  fileMetadata: z.union([ z.lazy(() => FileMetadataNullableRelationFilterSchema),z.lazy(() => FileMetadataWhereInputSchema) ]).optional().nullable(),
  sharedDocuments: z.lazy(() => SharedDocumentListRelationFilterSchema).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsListRelationFilterSchema).optional()
}).strict();

export const DocumentOrderByWithRelationInputSchema: z.ZodType<Prisma.DocumentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  keywords: z.lazy(() => SortOrderSchema).optional(),
  ocrText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional(),
  signed: z.lazy(() => SortOrderSchema).optional(),
  signedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  signature: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  attachments: z.lazy(() => AttachmentOrderByRelationAggregateInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserOrderByRelationAggregateInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionOrderByRelationAggregateInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataOrderByWithRelationInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentOrderByRelationAggregateInputSchema).optional(),
  tasks: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => DocumentOrderByRelevanceInputSchema).optional()
}).strict();

export const DocumentWhereUniqueInputSchema: z.ZodType<Prisma.DocumentWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => DocumentWhereInputSchema),z.lazy(() => DocumentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentWhereInputSchema),z.lazy(() => DocumentWhereInputSchema).array() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  keywords: z.lazy(() => StringNullableListFilterSchema).optional(),
  ocrText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ownerId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  signed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  signedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  signature: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  attachments: z.lazy(() => AttachmentListRelationFilterSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserListRelationFilterSchema).optional(),
  versions: z.lazy(() => DocumentVersionListRelationFilterSchema).optional(),
  fileMetadata: z.union([ z.lazy(() => FileMetadataNullableRelationFilterSchema),z.lazy(() => FileMetadataWhereInputSchema) ]).optional().nullable(),
  sharedDocuments: z.lazy(() => SharedDocumentListRelationFilterSchema).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsListRelationFilterSchema).optional()
}).strict());

export const DocumentOrderByWithAggregationInputSchema: z.ZodType<Prisma.DocumentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  keywords: z.lazy(() => SortOrderSchema).optional(),
  ocrText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional(),
  signed: z.lazy(() => SortOrderSchema).optional(),
  signedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  signature: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DocumentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DocumentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DocumentMinOrderByAggregateInputSchema).optional()
}).strict();

export const DocumentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DocumentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentScalarWhereWithAggregatesInputSchema),z.lazy(() => DocumentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentScalarWhereWithAggregatesInputSchema),z.lazy(() => DocumentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  keywords: z.lazy(() => StringNullableListFilterSchema).optional(),
  ocrText: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ownerId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  signed: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  signedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  signature: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserOnDocumentsWhereInputSchema: z.ZodType<Prisma.UserOnDocumentsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserOnDocumentsWhereInputSchema),z.lazy(() => UserOnDocumentsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserOnDocumentsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserOnDocumentsWhereInputSchema),z.lazy(() => UserOnDocumentsWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  assignedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const UserOnDocumentsOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOnDocumentsOrderByWithRelationInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  assignedAt: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  document: z.lazy(() => DocumentOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => UserOnDocumentsOrderByRelevanceInputSchema).optional()
}).strict();

export const UserOnDocumentsWhereUniqueInputSchema: z.ZodType<Prisma.UserOnDocumentsWhereUniqueInput> = z.object({
  userId_documentId: z.lazy(() => UserOnDocumentsUserIdDocumentIdCompoundUniqueInputSchema)
})
.and(z.object({
  userId_documentId: z.lazy(() => UserOnDocumentsUserIdDocumentIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => UserOnDocumentsWhereInputSchema),z.lazy(() => UserOnDocumentsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserOnDocumentsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserOnDocumentsWhereInputSchema),z.lazy(() => UserOnDocumentsWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  assignedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const UserOnDocumentsOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOnDocumentsOrderByWithAggregationInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  assignedAt: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserOnDocumentsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserOnDocumentsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserOnDocumentsMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserOnDocumentsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserOnDocumentsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserOnDocumentsScalarWhereWithAggregatesInputSchema),z.lazy(() => UserOnDocumentsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserOnDocumentsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserOnDocumentsScalarWhereWithAggregatesInputSchema),z.lazy(() => UserOnDocumentsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  assignedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  role: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DocumentUserWhereInputSchema: z.ZodType<Prisma.DocumentUserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentUserWhereInputSchema),z.lazy(() => DocumentUserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentUserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentUserWhereInputSchema),z.lazy(() => DocumentUserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const DocumentUserOrderByWithRelationInputSchema: z.ZodType<Prisma.DocumentUserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  document: z.lazy(() => DocumentOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => DocumentUserOrderByRelevanceInputSchema).optional()
}).strict();

export const DocumentUserWhereUniqueInputSchema: z.ZodType<Prisma.DocumentUserWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => DocumentUserWhereInputSchema),z.lazy(() => DocumentUserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentUserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentUserWhereInputSchema),z.lazy(() => DocumentUserWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const DocumentUserOrderByWithAggregationInputSchema: z.ZodType<Prisma.DocumentUserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DocumentUserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DocumentUserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DocumentUserMinOrderByAggregateInputSchema).optional()
}).strict();

export const DocumentUserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DocumentUserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentUserScalarWhereWithAggregatesInputSchema),z.lazy(() => DocumentUserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentUserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentUserScalarWhereWithAggregatesInputSchema),z.lazy(() => DocumentUserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DocumentVersionWhereInputSchema: z.ZodType<Prisma.DocumentVersionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentVersionWhereInputSchema),z.lazy(() => DocumentVersionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentVersionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentVersionWhereInputSchema),z.lazy(() => DocumentVersionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  versionNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  changesDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorListRelationFilterSchema).optional()
}).strict();

export const DocumentVersionOrderByWithRelationInputSchema: z.ZodType<Prisma.DocumentVersionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  changesDescription: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  document: z.lazy(() => DocumentOrderByWithRelationInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => DocumentVersionOrderByRelevanceInputSchema).optional()
}).strict();

export const DocumentVersionWhereUniqueInputSchema: z.ZodType<Prisma.DocumentVersionWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => DocumentVersionWhereInputSchema),z.lazy(() => DocumentVersionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentVersionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentVersionWhereInputSchema),z.lazy(() => DocumentVersionWhereInputSchema).array() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  versionNumber: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  changesDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorListRelationFilterSchema).optional()
}).strict());

export const DocumentVersionOrderByWithAggregationInputSchema: z.ZodType<Prisma.DocumentVersionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  changesDescription: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DocumentVersionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => DocumentVersionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DocumentVersionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DocumentVersionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => DocumentVersionSumOrderByAggregateInputSchema).optional()
}).strict();

export const DocumentVersionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DocumentVersionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentVersionScalarWhereWithAggregatesInputSchema),z.lazy(() => DocumentVersionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentVersionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentVersionScalarWhereWithAggregatesInputSchema),z.lazy(() => DocumentVersionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  versionNumber: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  filePath: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  changesDescription: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DocumentVersionCreatorWhereInputSchema: z.ZodType<Prisma.DocumentVersionCreatorWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentVersionCreatorWhereInputSchema),z.lazy(() => DocumentVersionCreatorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentVersionCreatorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentVersionCreatorWhereInputSchema),z.lazy(() => DocumentVersionCreatorWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  versionId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  version: z.union([ z.lazy(() => DocumentVersionRelationFilterSchema),z.lazy(() => DocumentVersionWhereInputSchema) ]).optional(),
}).strict();

export const DocumentVersionCreatorOrderByWithRelationInputSchema: z.ZodType<Prisma.DocumentVersionCreatorOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  versionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  version: z.lazy(() => DocumentVersionOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => DocumentVersionCreatorOrderByRelevanceInputSchema).optional()
}).strict();

export const DocumentVersionCreatorWhereUniqueInputSchema: z.ZodType<Prisma.DocumentVersionCreatorWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => DocumentVersionCreatorWhereInputSchema),z.lazy(() => DocumentVersionCreatorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentVersionCreatorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentVersionCreatorWhereInputSchema),z.lazy(() => DocumentVersionCreatorWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  versionId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  version: z.union([ z.lazy(() => DocumentVersionRelationFilterSchema),z.lazy(() => DocumentVersionWhereInputSchema) ]).optional(),
}).strict());

export const DocumentVersionCreatorOrderByWithAggregationInputSchema: z.ZodType<Prisma.DocumentVersionCreatorOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  versionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DocumentVersionCreatorCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DocumentVersionCreatorMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DocumentVersionCreatorMinOrderByAggregateInputSchema).optional()
}).strict();

export const DocumentVersionCreatorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DocumentVersionCreatorScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentVersionCreatorScalarWhereWithAggregatesInputSchema),z.lazy(() => DocumentVersionCreatorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentVersionCreatorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentVersionCreatorScalarWhereWithAggregatesInputSchema),z.lazy(() => DocumentVersionCreatorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  versionId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SharedDocumentWhereInputSchema: z.ZodType<Prisma.SharedDocumentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SharedDocumentWhereInputSchema),z.lazy(() => SharedDocumentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SharedDocumentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SharedDocumentWhereInputSchema),z.lazy(() => SharedDocumentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  sharedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  permission: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SharedDocumentOrderByWithRelationInputSchema: z.ZodType<Prisma.SharedDocumentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  sharedAt: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  document: z.lazy(() => DocumentOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => SharedDocumentOrderByRelevanceInputSchema).optional()
}).strict();

export const SharedDocumentWhereUniqueInputSchema: z.ZodType<Prisma.SharedDocumentWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => SharedDocumentWhereInputSchema),z.lazy(() => SharedDocumentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SharedDocumentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SharedDocumentWhereInputSchema),z.lazy(() => SharedDocumentWhereInputSchema).array() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  sharedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  permission: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SharedDocumentOrderByWithAggregationInputSchema: z.ZodType<Prisma.SharedDocumentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  sharedAt: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SharedDocumentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SharedDocumentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SharedDocumentMinOrderByAggregateInputSchema).optional()
}).strict();

export const SharedDocumentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SharedDocumentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SharedDocumentScalarWhereWithAggregatesInputSchema),z.lazy(() => SharedDocumentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SharedDocumentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SharedDocumentScalarWhereWithAggregatesInputSchema),z.lazy(() => SharedDocumentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  sharedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  permission: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WorkflowWhereInputSchema: z.ZodType<Prisma.WorkflowWhereInput> = z.object({
  AND: z.union([ z.lazy(() => WorkflowWhereInputSchema),z.lazy(() => WorkflowWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WorkflowWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WorkflowWhereInputSchema),z.lazy(() => WorkflowWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional()
}).strict();

export const WorkflowOrderByWithRelationInputSchema: z.ZodType<Prisma.WorkflowOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  auditLogs: z.lazy(() => AuditLogOrderByRelationAggregateInputSchema).optional(),
  tasks: z.lazy(() => TaskOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => WorkflowOrderByRelevanceInputSchema).optional()
}).strict();

export const WorkflowWhereUniqueInputSchema: z.ZodType<Prisma.WorkflowWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => WorkflowWhereInputSchema),z.lazy(() => WorkflowWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WorkflowWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WorkflowWhereInputSchema),z.lazy(() => WorkflowWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  tasks: z.lazy(() => TaskListRelationFilterSchema).optional()
}).strict());

export const WorkflowOrderByWithAggregationInputSchema: z.ZodType<Prisma.WorkflowOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => WorkflowCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => WorkflowMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => WorkflowMinOrderByAggregateInputSchema).optional()
}).strict();

export const WorkflowScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.WorkflowScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => WorkflowScalarWhereWithAggregatesInputSchema),z.lazy(() => WorkflowScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => WorkflowScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WorkflowScalarWhereWithAggregatesInputSchema),z.lazy(() => WorkflowScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TaskWhereInputSchema: z.ZodType<Prisma.TaskWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  workflowId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  documentId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  assignedTo: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  document: z.union([ z.lazy(() => DocumentNullableRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional().nullable(),
  workflow: z.union([ z.lazy(() => WorkflowRelationFilterSchema),z.lazy(() => WorkflowWhereInputSchema) ]).optional(),
  taskUsers: z.lazy(() => TaskUserListRelationFilterSchema).optional()
}).strict();

export const TaskOrderByWithRelationInputSchema: z.ZodType<Prisma.TaskOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  documentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  auditLogs: z.lazy(() => AuditLogOrderByRelationAggregateInputSchema).optional(),
  assignedTo: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  document: z.lazy(() => DocumentOrderByWithRelationInputSchema).optional(),
  workflow: z.lazy(() => WorkflowOrderByWithRelationInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => TaskOrderByRelevanceInputSchema).optional()
}).strict();

export const TaskWhereUniqueInputSchema: z.ZodType<Prisma.TaskWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskWhereInputSchema),z.lazy(() => TaskWhereInputSchema).array() ]).optional(),
  workflowId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  documentId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional(),
  assignedTo: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  document: z.union([ z.lazy(() => DocumentNullableRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional().nullable(),
  workflow: z.union([ z.lazy(() => WorkflowRelationFilterSchema),z.lazy(() => WorkflowWhereInputSchema) ]).optional(),
  taskUsers: z.lazy(() => TaskUserListRelationFilterSchema).optional()
}).strict());

export const TaskOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaskOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  documentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaskCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaskMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaskMinOrderByAggregateInputSchema).optional()
}).strict();

export const TaskScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaskScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaskScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  workflowId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  documentId: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AuditLogWhereInputSchema: z.ZodType<Prisma.AuditLogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  workflowId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  performedById: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  performedBy: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  task: z.union([ z.lazy(() => TaskNullableRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional().nullable(),
  workflow: z.union([ z.lazy(() => WorkflowNullableRelationFilterSchema),z.lazy(() => WorkflowWhereInputSchema) ]).optional().nullable(),
}).strict();

export const AuditLogOrderByWithRelationInputSchema: z.ZodType<Prisma.AuditLogOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workflowId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  performedById: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  performedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  task: z.lazy(() => TaskOrderByWithRelationInputSchema).optional(),
  workflow: z.lazy(() => WorkflowOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => AuditLogOrderByRelevanceInputSchema).optional()
}).strict();

export const AuditLogWhereUniqueInputSchema: z.ZodType<Prisma.AuditLogWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  taskId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  workflowId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  performedById: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  performedBy: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  task: z.union([ z.lazy(() => TaskNullableRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional().nullable(),
  workflow: z.union([ z.lazy(() => WorkflowNullableRelationFilterSchema),z.lazy(() => WorkflowWhereInputSchema) ]).optional().nullable(),
}).strict());

export const AuditLogOrderByWithAggregationInputSchema: z.ZodType<Prisma.AuditLogOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  workflowId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  performedById: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AuditLogCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AuditLogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AuditLogMinOrderByAggregateInputSchema).optional()
}).strict();

export const AuditLogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AuditLogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema),z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema),z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  workflowId: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  performedById: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const NotificationWhereInputSchema: z.ZodType<Prisma.NotificationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => NotificationWhereInputSchema),z.lazy(() => NotificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NotificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NotificationWhereInputSchema),z.lazy(() => NotificationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const NotificationOrderByWithRelationInputSchema: z.ZodType<Prisma.NotificationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => NotificationOrderByRelevanceInputSchema).optional()
}).strict();

export const NotificationWhereUniqueInputSchema: z.ZodType<Prisma.NotificationWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => NotificationWhereInputSchema),z.lazy(() => NotificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NotificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NotificationWhereInputSchema),z.lazy(() => NotificationWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const NotificationOrderByWithAggregationInputSchema: z.ZodType<Prisma.NotificationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => NotificationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => NotificationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => NotificationMinOrderByAggregateInputSchema).optional()
}).strict();

export const NotificationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.NotificationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema),z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema),z.lazy(() => NotificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AttachmentWhereInputSchema: z.ZodType<Prisma.AttachmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AttachmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
}).strict();

export const AttachmentOrderByWithRelationInputSchema: z.ZodType<Prisma.AttachmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  document: z.lazy(() => DocumentOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => AttachmentOrderByRelevanceInputSchema).optional()
}).strict();

export const AttachmentWhereUniqueInputSchema: z.ZodType<Prisma.AttachmentWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AttachmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AttachmentWhereInputSchema),z.lazy(() => AttachmentWhereInputSchema).array() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
}).strict());

export const AttachmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.AttachmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AttachmentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AttachmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AttachmentMinOrderByAggregateInputSchema).optional()
}).strict();

export const AttachmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AttachmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema),z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema),z.lazy(() => AttachmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fileName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DigitalCertificateWhereInputSchema: z.ZodType<Prisma.DigitalCertificateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DigitalCertificateWhereInputSchema),z.lazy(() => DigitalCertificateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DigitalCertificateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DigitalCertificateWhereInputSchema),z.lazy(() => DigitalCertificateWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  alias: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expiration: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const DigitalCertificateOrderByWithRelationInputSchema: z.ZodType<Prisma.DigitalCertificateOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  alias: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  expiration: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => DigitalCertificateOrderByRelevanceInputSchema).optional()
}).strict();

export const DigitalCertificateWhereUniqueInputSchema: z.ZodType<Prisma.DigitalCertificateWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => DigitalCertificateWhereInputSchema),z.lazy(() => DigitalCertificateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DigitalCertificateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DigitalCertificateWhereInputSchema),z.lazy(() => DigitalCertificateWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  alias: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expiration: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const DigitalCertificateOrderByWithAggregationInputSchema: z.ZodType<Prisma.DigitalCertificateOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  alias: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  expiration: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DigitalCertificateCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DigitalCertificateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DigitalCertificateMinOrderByAggregateInputSchema).optional()
}).strict();

export const DigitalCertificateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DigitalCertificateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DigitalCertificateScalarWhereWithAggregatesInputSchema),z.lazy(() => DigitalCertificateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DigitalCertificateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DigitalCertificateScalarWhereWithAggregatesInputSchema),z.lazy(() => DigitalCertificateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  alias: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  expiration: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FileMetadataWhereInputSchema: z.ZodType<Prisma.FileMetadataWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FileMetadataWhereInputSchema),z.lazy(() => FileMetadataWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FileMetadataWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FileMetadataWhereInputSchema),z.lazy(() => FileMetadataWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  fileSize: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  checksum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
}).strict();

export const FileMetadataOrderByWithRelationInputSchema: z.ZodType<Prisma.FileMetadataOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  checksum: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  document: z.lazy(() => DocumentOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => FileMetadataOrderByRelevanceInputSchema).optional()
}).strict();

export const FileMetadataWhereUniqueInputSchema: z.ZodType<Prisma.FileMetadataWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    documentId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    documentId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  documentId: z.string().optional(),
  AND: z.union([ z.lazy(() => FileMetadataWhereInputSchema),z.lazy(() => FileMetadataWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FileMetadataWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FileMetadataWhereInputSchema),z.lazy(() => FileMetadataWhereInputSchema).array() ]).optional(),
  fileSize: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  checksum: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  document: z.union([ z.lazy(() => DocumentRelationFilterSchema),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
}).strict());

export const FileMetadataOrderByWithAggregationInputSchema: z.ZodType<Prisma.FileMetadataOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  checksum: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FileMetadataCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FileMetadataAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FileMetadataMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FileMetadataMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FileMetadataSumOrderByAggregateInputSchema).optional()
}).strict();

export const FileMetadataScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FileMetadataScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FileMetadataScalarWhereWithAggregatesInputSchema),z.lazy(() => FileMetadataScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FileMetadataScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FileMetadataScalarWhereWithAggregatesInputSchema),z.lazy(() => FileMetadataScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  fileSize: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  checksum: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InstitutionWhereInputSchema: z.ZodType<Prisma.InstitutionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InstitutionWhereInputSchema),z.lazy(() => InstitutionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InstitutionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InstitutionWhereInputSchema),z.lazy(() => InstitutionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  flag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emblem: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mayorId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  viceMayorId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  mayor: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  viceMayor: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  departments: z.lazy(() => DepartmentListRelationFilterSchema).optional()
}).strict();

export const InstitutionOrderByWithRelationInputSchema: z.ZodType<Prisma.InstitutionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  flag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emblem: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mayorId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  viceMayorId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  mayor: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  viceMayor: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  departments: z.lazy(() => DepartmentOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => InstitutionOrderByRelevanceInputSchema).optional()
}).strict();

export const InstitutionWhereUniqueInputSchema: z.ZodType<Prisma.InstitutionWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => InstitutionWhereInputSchema),z.lazy(() => InstitutionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InstitutionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InstitutionWhereInputSchema),z.lazy(() => InstitutionWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  flag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emblem: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mayorId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  viceMayorId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  mayor: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  viceMayor: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  departments: z.lazy(() => DepartmentListRelationFilterSchema).optional()
}).strict());

export const InstitutionOrderByWithAggregationInputSchema: z.ZodType<Prisma.InstitutionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  flag: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  emblem: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mayorId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  viceMayorId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InstitutionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InstitutionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InstitutionMinOrderByAggregateInputSchema).optional()
}).strict();

export const InstitutionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InstitutionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InstitutionScalarWhereWithAggregatesInputSchema),z.lazy(() => InstitutionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InstitutionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InstitutionScalarWhereWithAggregatesInputSchema),z.lazy(() => InstitutionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  flag: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  emblem: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mayorId: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  viceMayorId: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DepartmentWhereInputSchema: z.ZodType<Prisma.DepartmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DepartmentWhereInputSchema),z.lazy(() => DepartmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DepartmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DepartmentWhereInputSchema),z.lazy(() => DepartmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isSecretariat: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  institutionId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  parentDepartmentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  headId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  institution: z.union([ z.lazy(() => InstitutionRelationFilterSchema),z.lazy(() => InstitutionWhereInputSchema) ]).optional(),
  parentDepartment: z.union([ z.lazy(() => DepartmentNullableRelationFilterSchema),z.lazy(() => DepartmentWhereInputSchema) ]).optional().nullable(),
  childDepartments: z.lazy(() => DepartmentListRelationFilterSchema).optional(),
  head: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  userDepartments: z.lazy(() => UserDepartmentListRelationFilterSchema).optional(),
  tickets: z.lazy(() => TicketListRelationFilterSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicListRelationFilterSchema).optional()
}).strict();

export const DepartmentOrderByWithRelationInputSchema: z.ZodType<Prisma.DepartmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isSecretariat: z.lazy(() => SortOrderSchema).optional(),
  institutionId: z.lazy(() => SortOrderSchema).optional(),
  parentDepartmentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  headId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  institution: z.lazy(() => InstitutionOrderByWithRelationInputSchema).optional(),
  parentDepartment: z.lazy(() => DepartmentOrderByWithRelationInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentOrderByRelationAggregateInputSchema).optional(),
  head: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentOrderByRelationAggregateInputSchema).optional(),
  tickets: z.lazy(() => TicketOrderByRelationAggregateInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => DepartmentOrderByRelevanceInputSchema).optional()
}).strict();

export const DepartmentWhereUniqueInputSchema: z.ZodType<Prisma.DepartmentWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => DepartmentWhereInputSchema),z.lazy(() => DepartmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DepartmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DepartmentWhereInputSchema),z.lazy(() => DepartmentWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isSecretariat: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  institutionId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  parentDepartmentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  headId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  institution: z.union([ z.lazy(() => InstitutionRelationFilterSchema),z.lazy(() => InstitutionWhereInputSchema) ]).optional(),
  parentDepartment: z.union([ z.lazy(() => DepartmentNullableRelationFilterSchema),z.lazy(() => DepartmentWhereInputSchema) ]).optional().nullable(),
  childDepartments: z.lazy(() => DepartmentListRelationFilterSchema).optional(),
  head: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  userDepartments: z.lazy(() => UserDepartmentListRelationFilterSchema).optional(),
  tickets: z.lazy(() => TicketListRelationFilterSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicListRelationFilterSchema).optional()
}).strict());

export const DepartmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.DepartmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isSecretariat: z.lazy(() => SortOrderSchema).optional(),
  institutionId: z.lazy(() => SortOrderSchema).optional(),
  parentDepartmentId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  headId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DepartmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => DepartmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DepartmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DepartmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => DepartmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const DepartmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DepartmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DepartmentScalarWhereWithAggregatesInputSchema),z.lazy(() => DepartmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DepartmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DepartmentScalarWhereWithAggregatesInputSchema),z.lazy(() => DepartmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isSecretariat: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  institutionId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  parentDepartmentId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  headId: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserDepartmentWhereInputSchema: z.ZodType<Prisma.UserDepartmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserDepartmentWhereInputSchema),z.lazy(() => UserDepartmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserDepartmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserDepartmentWhereInputSchema),z.lazy(() => UserDepartmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  departmentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  department: z.union([ z.lazy(() => DepartmentRelationFilterSchema),z.lazy(() => DepartmentWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const UserDepartmentOrderByWithRelationInputSchema: z.ZodType<Prisma.UserDepartmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  department: z.lazy(() => DepartmentOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => UserDepartmentOrderByRelevanceInputSchema).optional()
}).strict();

export const UserDepartmentWhereUniqueInputSchema: z.ZodType<Prisma.UserDepartmentWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => UserDepartmentWhereInputSchema),z.lazy(() => UserDepartmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserDepartmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserDepartmentWhereInputSchema),z.lazy(() => UserDepartmentWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  departmentId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  department: z.union([ z.lazy(() => DepartmentRelationFilterSchema),z.lazy(() => DepartmentWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const UserDepartmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserDepartmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserDepartmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UserDepartmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserDepartmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserDepartmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UserDepartmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const UserDepartmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserDepartmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserDepartmentScalarWhereWithAggregatesInputSchema),z.lazy(() => UserDepartmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserDepartmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserDepartmentScalarWhereWithAggregatesInputSchema),z.lazy(() => UserDepartmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  departmentId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  role: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TicketWhereInputSchema: z.ZodType<Prisma.TicketWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketWhereInputSchema),z.lazy(() => TicketWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketWhereInputSchema),z.lazy(() => TicketWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  subject: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  statusId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  priorityId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdById: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  departmentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  helpTopicId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  slaPlanId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  closedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastResponseAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  assignedTo: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  department: z.union([ z.lazy(() => DepartmentRelationFilterSchema),z.lazy(() => DepartmentWhereInputSchema) ]).optional(),
  helpTopic: z.union([ z.lazy(() => HelpTopicRelationFilterSchema),z.lazy(() => HelpTopicWhereInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => TicketPriorityRelationFilterSchema),z.lazy(() => TicketPriorityWhereInputSchema) ]).optional(),
  slaPlan: z.union([ z.lazy(() => SLAPlanNullableRelationFilterSchema),z.lazy(() => SLAPlanWhereInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TicketStatusRelationFilterSchema),z.lazy(() => TicketStatusWhereInputSchema) ]).optional(),
  attachments: z.lazy(() => TicketAttachmentListRelationFilterSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorListRelationFilterSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldListRelationFilterSchema).optional(),
  threads: z.union([ z.lazy(() => TicketThreadNullableRelationFilterSchema),z.lazy(() => TicketThreadWhereInputSchema) ]).optional().nullable(),
  ticketUsers: z.lazy(() => TicketUserListRelationFilterSchema).optional()
}).strict();

export const TicketOrderByWithRelationInputSchema: z.ZodType<Prisma.TicketOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  statusId: z.lazy(() => SortOrderSchema).optional(),
  priorityId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  helpTopicId: z.lazy(() => SortOrderSchema).optional(),
  slaPlanId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dueDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  closedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastResponseAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  assignedTo: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  department: z.lazy(() => DepartmentOrderByWithRelationInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicOrderByWithRelationInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityOrderByWithRelationInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanOrderByWithRelationInputSchema).optional(),
  status: z.lazy(() => TicketStatusOrderByWithRelationInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentOrderByRelationAggregateInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorOrderByRelationAggregateInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldOrderByRelationAggregateInputSchema).optional(),
  threads: z.lazy(() => TicketThreadOrderByWithRelationInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => TicketOrderByRelevanceInputSchema).optional()
}).strict();

export const TicketWhereUniqueInputSchema: z.ZodType<Prisma.TicketWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => TicketWhereInputSchema),z.lazy(() => TicketWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketWhereInputSchema),z.lazy(() => TicketWhereInputSchema).array() ]).optional(),
  subject: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  statusId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  priorityId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdById: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  departmentId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  helpTopicId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  slaPlanId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  closedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastResponseAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  assignedTo: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  department: z.union([ z.lazy(() => DepartmentRelationFilterSchema),z.lazy(() => DepartmentWhereInputSchema) ]).optional(),
  helpTopic: z.union([ z.lazy(() => HelpTopicRelationFilterSchema),z.lazy(() => HelpTopicWhereInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => TicketPriorityRelationFilterSchema),z.lazy(() => TicketPriorityWhereInputSchema) ]).optional(),
  slaPlan: z.union([ z.lazy(() => SLAPlanNullableRelationFilterSchema),z.lazy(() => SLAPlanWhereInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => TicketStatusRelationFilterSchema),z.lazy(() => TicketStatusWhereInputSchema) ]).optional(),
  attachments: z.lazy(() => TicketAttachmentListRelationFilterSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorListRelationFilterSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldListRelationFilterSchema).optional(),
  threads: z.union([ z.lazy(() => TicketThreadNullableRelationFilterSchema),z.lazy(() => TicketThreadWhereInputSchema) ]).optional().nullable(),
  ticketUsers: z.lazy(() => TicketUserListRelationFilterSchema).optional()
}).strict());

export const TicketOrderByWithAggregationInputSchema: z.ZodType<Prisma.TicketOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  statusId: z.lazy(() => SortOrderSchema).optional(),
  priorityId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  helpTopicId: z.lazy(() => SortOrderSchema).optional(),
  slaPlanId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dueDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  closedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastResponseAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => TicketCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TicketAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TicketMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TicketMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TicketSumOrderByAggregateInputSchema).optional()
}).strict();

export const TicketScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TicketScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TicketScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  subject: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  statusId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  priorityId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdById: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  departmentId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  helpTopicId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  slaPlanId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  closedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastResponseAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const TicketStatusWhereInputSchema: z.ZodType<Prisma.TicketStatusWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketStatusWhereInputSchema),z.lazy(() => TicketStatusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketStatusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketStatusWhereInputSchema),z.lazy(() => TicketStatusWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tickets: z.lazy(() => TicketListRelationFilterSchema).optional()
}).strict();

export const TicketStatusOrderByWithRelationInputSchema: z.ZodType<Prisma.TicketStatusOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  tickets: z.lazy(() => TicketOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => TicketStatusOrderByRelevanceInputSchema).optional()
}).strict();

export const TicketStatusWhereUniqueInputSchema: z.ZodType<Prisma.TicketStatusWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => TicketStatusWhereInputSchema),z.lazy(() => TicketStatusWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketStatusWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketStatusWhereInputSchema),z.lazy(() => TicketStatusWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tickets: z.lazy(() => TicketListRelationFilterSchema).optional()
}).strict());

export const TicketStatusOrderByWithAggregationInputSchema: z.ZodType<Prisma.TicketStatusOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TicketStatusCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TicketStatusAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TicketStatusMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TicketStatusMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TicketStatusSumOrderByAggregateInputSchema).optional()
}).strict();

export const TicketStatusScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TicketStatusScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TicketStatusScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketStatusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketStatusScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketStatusScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketStatusScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TicketPriorityWhereInputSchema: z.ZodType<Prisma.TicketPriorityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketPriorityWhereInputSchema),z.lazy(() => TicketPriorityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketPriorityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketPriorityWhereInputSchema),z.lazy(() => TicketPriorityWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tickets: z.lazy(() => TicketListRelationFilterSchema).optional()
}).strict();

export const TicketPriorityOrderByWithRelationInputSchema: z.ZodType<Prisma.TicketPriorityOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  tickets: z.lazy(() => TicketOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => TicketPriorityOrderByRelevanceInputSchema).optional()
}).strict();

export const TicketPriorityWhereUniqueInputSchema: z.ZodType<Prisma.TicketPriorityWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => TicketPriorityWhereInputSchema),z.lazy(() => TicketPriorityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketPriorityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketPriorityWhereInputSchema),z.lazy(() => TicketPriorityWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tickets: z.lazy(() => TicketListRelationFilterSchema).optional()
}).strict());

export const TicketPriorityOrderByWithAggregationInputSchema: z.ZodType<Prisma.TicketPriorityOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TicketPriorityCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TicketPriorityAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TicketPriorityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TicketPriorityMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TicketPrioritySumOrderByAggregateInputSchema).optional()
}).strict();

export const TicketPriorityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TicketPriorityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TicketPriorityScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketPriorityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketPriorityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketPriorityScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketPriorityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const HelpTopicWhereInputSchema: z.ZodType<Prisma.HelpTopicWhereInput> = z.object({
  AND: z.union([ z.lazy(() => HelpTopicWhereInputSchema),z.lazy(() => HelpTopicWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => HelpTopicWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => HelpTopicWhereInputSchema),z.lazy(() => HelpTopicWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  topic: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  departmentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  department: z.union([ z.lazy(() => DepartmentRelationFilterSchema),z.lazy(() => DepartmentWhereInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketListRelationFilterSchema).optional()
}).strict();

export const HelpTopicOrderByWithRelationInputSchema: z.ZodType<Prisma.HelpTopicOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  topic: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  department: z.lazy(() => DepartmentOrderByWithRelationInputSchema).optional(),
  tickets: z.lazy(() => TicketOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => HelpTopicOrderByRelevanceInputSchema).optional()
}).strict();

export const HelpTopicWhereUniqueInputSchema: z.ZodType<Prisma.HelpTopicWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => HelpTopicWhereInputSchema),z.lazy(() => HelpTopicWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => HelpTopicWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => HelpTopicWhereInputSchema),z.lazy(() => HelpTopicWhereInputSchema).array() ]).optional(),
  topic: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  departmentId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  department: z.union([ z.lazy(() => DepartmentRelationFilterSchema),z.lazy(() => DepartmentWhereInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketListRelationFilterSchema).optional()
}).strict());

export const HelpTopicOrderByWithAggregationInputSchema: z.ZodType<Prisma.HelpTopicOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  topic: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => HelpTopicCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => HelpTopicAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => HelpTopicMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => HelpTopicMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => HelpTopicSumOrderByAggregateInputSchema).optional()
}).strict();

export const HelpTopicScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.HelpTopicScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => HelpTopicScalarWhereWithAggregatesInputSchema),z.lazy(() => HelpTopicScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => HelpTopicScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => HelpTopicScalarWhereWithAggregatesInputSchema),z.lazy(() => HelpTopicScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  topic: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  departmentId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SLAPlanWhereInputSchema: z.ZodType<Prisma.SLAPlanWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SLAPlanWhereInputSchema),z.lazy(() => SLAPlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SLAPlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SLAPlanWhereInputSchema),z.lazy(() => SLAPlanWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  gracePeriod: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tickets: z.lazy(() => TicketListRelationFilterSchema).optional()
}).strict();

export const SLAPlanOrderByWithRelationInputSchema: z.ZodType<Prisma.SLAPlanOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  gracePeriod: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  tickets: z.lazy(() => TicketOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => SLAPlanOrderByRelevanceInputSchema).optional()
}).strict();

export const SLAPlanWhereUniqueInputSchema: z.ZodType<Prisma.SLAPlanWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => SLAPlanWhereInputSchema),z.lazy(() => SLAPlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SLAPlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SLAPlanWhereInputSchema),z.lazy(() => SLAPlanWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  gracePeriod: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tickets: z.lazy(() => TicketListRelationFilterSchema).optional()
}).strict());

export const SLAPlanOrderByWithAggregationInputSchema: z.ZodType<Prisma.SLAPlanOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  gracePeriod: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SLAPlanCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SLAPlanAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SLAPlanMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SLAPlanMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SLAPlanSumOrderByAggregateInputSchema).optional()
}).strict();

export const SLAPlanScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SLAPlanScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SLAPlanScalarWhereWithAggregatesInputSchema),z.lazy(() => SLAPlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SLAPlanScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SLAPlanScalarWhereWithAggregatesInputSchema),z.lazy(() => SLAPlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  gracePeriod: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TicketThreadWhereInputSchema: z.ZodType<Prisma.TicketThreadWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketThreadWhereInputSchema),z.lazy(() => TicketThreadWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketThreadWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketThreadWhereInputSchema),z.lazy(() => TicketThreadWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  attachments: z.lazy(() => TicketAttachmentListRelationFilterSchema).optional(),
  ticket: z.union([ z.lazy(() => TicketRelationFilterSchema),z.lazy(() => TicketWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TicketThreadOrderByWithRelationInputSchema: z.ZodType<Prisma.TicketThreadOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentOrderByRelationAggregateInputSchema).optional(),
  ticket: z.lazy(() => TicketOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => TicketThreadOrderByRelevanceInputSchema).optional()
}).strict();

export const TicketThreadWhereUniqueInputSchema: z.ZodType<Prisma.TicketThreadWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    ticketId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    ticketId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  ticketId: z.string().optional(),
  AND: z.union([ z.lazy(() => TicketThreadWhereInputSchema),z.lazy(() => TicketThreadWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketThreadWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketThreadWhereInputSchema),z.lazy(() => TicketThreadWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  attachments: z.lazy(() => TicketAttachmentListRelationFilterSchema).optional(),
  ticket: z.union([ z.lazy(() => TicketRelationFilterSchema),z.lazy(() => TicketWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TicketThreadOrderByWithAggregationInputSchema: z.ZodType<Prisma.TicketThreadOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TicketThreadCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TicketThreadMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TicketThreadMinOrderByAggregateInputSchema).optional()
}).strict();

export const TicketThreadScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TicketThreadScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TicketThreadScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketThreadScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketThreadScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketThreadScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketThreadScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TicketAttachmentWhereInputSchema: z.ZodType<Prisma.TicketAttachmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketAttachmentWhereInputSchema),z.lazy(() => TicketAttachmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketAttachmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketAttachmentWhereInputSchema),z.lazy(() => TicketAttachmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketThreadId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ticket: z.union([ z.lazy(() => TicketRelationFilterSchema),z.lazy(() => TicketWhereInputSchema) ]).optional(),
  ticketThread: z.union([ z.lazy(() => TicketThreadRelationFilterSchema),z.lazy(() => TicketThreadWhereInputSchema) ]).optional(),
}).strict();

export const TicketAttachmentOrderByWithRelationInputSchema: z.ZodType<Prisma.TicketAttachmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  ticketThreadId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  ticket: z.lazy(() => TicketOrderByWithRelationInputSchema).optional(),
  ticketThread: z.lazy(() => TicketThreadOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => TicketAttachmentOrderByRelevanceInputSchema).optional()
}).strict();

export const TicketAttachmentWhereUniqueInputSchema: z.ZodType<Prisma.TicketAttachmentWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => TicketAttachmentWhereInputSchema),z.lazy(() => TicketAttachmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketAttachmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketAttachmentWhereInputSchema),z.lazy(() => TicketAttachmentWhereInputSchema).array() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketThreadId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ticket: z.union([ z.lazy(() => TicketRelationFilterSchema),z.lazy(() => TicketWhereInputSchema) ]).optional(),
  ticketThread: z.union([ z.lazy(() => TicketThreadRelationFilterSchema),z.lazy(() => TicketThreadWhereInputSchema) ]).optional(),
}).strict());

export const TicketAttachmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.TicketAttachmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  ticketThreadId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TicketAttachmentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TicketAttachmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TicketAttachmentMinOrderByAggregateInputSchema).optional()
}).strict();

export const TicketAttachmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TicketAttachmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TicketAttachmentScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketAttachmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketAttachmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketAttachmentScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketAttachmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  ticketThreadId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fileName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TicketCollaboratorWhereInputSchema: z.ZodType<Prisma.TicketCollaboratorWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketCollaboratorWhereInputSchema),z.lazy(() => TicketCollaboratorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketCollaboratorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketCollaboratorWhereInputSchema),z.lazy(() => TicketCollaboratorWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticket: z.union([ z.lazy(() => TicketRelationFilterSchema),z.lazy(() => TicketWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TicketCollaboratorOrderByWithRelationInputSchema: z.ZodType<Prisma.TicketCollaboratorOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  ticket: z.lazy(() => TicketOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => TicketCollaboratorOrderByRelevanceInputSchema).optional()
}).strict();

export const TicketCollaboratorWhereUniqueInputSchema: z.ZodType<Prisma.TicketCollaboratorWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => TicketCollaboratorWhereInputSchema),z.lazy(() => TicketCollaboratorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketCollaboratorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketCollaboratorWhereInputSchema),z.lazy(() => TicketCollaboratorWhereInputSchema).array() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticket: z.union([ z.lazy(() => TicketRelationFilterSchema),z.lazy(() => TicketWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TicketCollaboratorOrderByWithAggregationInputSchema: z.ZodType<Prisma.TicketCollaboratorOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TicketCollaboratorCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TicketCollaboratorMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TicketCollaboratorMinOrderByAggregateInputSchema).optional()
}).strict();

export const TicketCollaboratorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TicketCollaboratorScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TicketCollaboratorScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketCollaboratorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketCollaboratorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketCollaboratorScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketCollaboratorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const CustomFieldWhereInputSchema: z.ZodType<Prisma.CustomFieldWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomFieldWhereInputSchema),z.lazy(() => CustomFieldWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomFieldWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomFieldWhereInputSchema),z.lazy(() => CustomFieldWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fieldType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tickets: z.lazy(() => TicketCustomFieldListRelationFilterSchema).optional()
}).strict();

export const CustomFieldOrderByWithRelationInputSchema: z.ZodType<Prisma.CustomFieldOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  fieldType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  tickets: z.lazy(() => TicketCustomFieldOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => CustomFieldOrderByRelevanceInputSchema).optional()
}).strict();

export const CustomFieldWhereUniqueInputSchema: z.ZodType<Prisma.CustomFieldWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => CustomFieldWhereInputSchema),z.lazy(() => CustomFieldWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomFieldWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomFieldWhereInputSchema),z.lazy(() => CustomFieldWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fieldType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  tickets: z.lazy(() => TicketCustomFieldListRelationFilterSchema).optional()
}).strict());

export const CustomFieldOrderByWithAggregationInputSchema: z.ZodType<Prisma.CustomFieldOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  fieldType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CustomFieldCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CustomFieldAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CustomFieldMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CustomFieldMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CustomFieldSumOrderByAggregateInputSchema).optional()
}).strict();

export const CustomFieldScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CustomFieldScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CustomFieldScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomFieldScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomFieldScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomFieldScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomFieldScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fieldType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TicketCustomFieldWhereInputSchema: z.ZodType<Prisma.TicketCustomFieldWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketCustomFieldWhereInputSchema),z.lazy(() => TicketCustomFieldWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketCustomFieldWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketCustomFieldWhereInputSchema),z.lazy(() => TicketCustomFieldWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  fieldId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  field: z.union([ z.lazy(() => CustomFieldRelationFilterSchema),z.lazy(() => CustomFieldWhereInputSchema) ]).optional(),
  ticket: z.union([ z.lazy(() => TicketRelationFilterSchema),z.lazy(() => TicketWhereInputSchema) ]).optional(),
}).strict();

export const TicketCustomFieldOrderByWithRelationInputSchema: z.ZodType<Prisma.TicketCustomFieldOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  fieldId: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  field: z.lazy(() => CustomFieldOrderByWithRelationInputSchema).optional(),
  ticket: z.lazy(() => TicketOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => TicketCustomFieldOrderByRelevanceInputSchema).optional()
}).strict();

export const TicketCustomFieldWhereUniqueInputSchema: z.ZodType<Prisma.TicketCustomFieldWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => TicketCustomFieldWhereInputSchema),z.lazy(() => TicketCustomFieldWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketCustomFieldWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketCustomFieldWhereInputSchema),z.lazy(() => TicketCustomFieldWhereInputSchema).array() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  fieldId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  field: z.union([ z.lazy(() => CustomFieldRelationFilterSchema),z.lazy(() => CustomFieldWhereInputSchema) ]).optional(),
  ticket: z.union([ z.lazy(() => TicketRelationFilterSchema),z.lazy(() => TicketWhereInputSchema) ]).optional(),
}).strict());

export const TicketCustomFieldOrderByWithAggregationInputSchema: z.ZodType<Prisma.TicketCustomFieldOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  fieldId: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TicketCustomFieldCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TicketCustomFieldAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TicketCustomFieldMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TicketCustomFieldMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TicketCustomFieldSumOrderByAggregateInputSchema).optional()
}).strict();

export const TicketCustomFieldScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TicketCustomFieldScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TicketCustomFieldScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketCustomFieldScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketCustomFieldScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketCustomFieldScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketCustomFieldScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  fieldId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const TaskUserWhereInputSchema: z.ZodType<Prisma.TaskUserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskUserWhereInputSchema),z.lazy(() => TaskUserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskUserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskUserWhereInputSchema),z.lazy(() => TaskUserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  task: z.union([ z.lazy(() => TaskRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TaskUserOrderByWithRelationInputSchema: z.ZodType<Prisma.TaskUserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  task: z.lazy(() => TaskOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => TaskUserOrderByRelevanceInputSchema).optional()
}).strict();

export const TaskUserWhereUniqueInputSchema: z.ZodType<Prisma.TaskUserWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => TaskUserWhereInputSchema),z.lazy(() => TaskUserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskUserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskUserWhereInputSchema),z.lazy(() => TaskUserWhereInputSchema).array() ]).optional(),
  taskId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  task: z.union([ z.lazy(() => TaskRelationFilterSchema),z.lazy(() => TaskWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TaskUserOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaskUserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaskUserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaskUserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaskUserMinOrderByAggregateInputSchema).optional()
}).strict();

export const TaskUserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaskUserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaskUserScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskUserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskUserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskUserScalarWhereWithAggregatesInputSchema),z.lazy(() => TaskUserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const TicketUserWhereInputSchema: z.ZodType<Prisma.TicketUserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketUserWhereInputSchema),z.lazy(() => TicketUserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketUserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketUserWhereInputSchema),z.lazy(() => TicketUserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticket: z.union([ z.lazy(() => TicketRelationFilterSchema),z.lazy(() => TicketWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TicketUserOrderByWithRelationInputSchema: z.ZodType<Prisma.TicketUserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  ticket: z.lazy(() => TicketOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => TicketUserOrderByRelevanceInputSchema).optional()
}).strict();

export const TicketUserWhereUniqueInputSchema: z.ZodType<Prisma.TicketUserWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => TicketUserWhereInputSchema),z.lazy(() => TicketUserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketUserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketUserWhereInputSchema),z.lazy(() => TicketUserWhereInputSchema).array() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticket: z.union([ z.lazy(() => TicketRelationFilterSchema),z.lazy(() => TicketWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TicketUserOrderByWithAggregationInputSchema: z.ZodType<Prisma.TicketUserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TicketUserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TicketUserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TicketUserMinOrderByAggregateInputSchema).optional()
}).strict();

export const TicketUserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TicketUserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TicketUserScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketUserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketUserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketUserScalarWhereWithAggregatesInputSchema),z.lazy(() => TicketUserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const back3nd_userWhereInputSchema: z.ZodType<Prisma.back3nd_userWhereInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_userWhereInputSchema),z.lazy(() => back3nd_userWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_userWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_userWhereInputSchema),z.lazy(() => back3nd_userWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reset_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  back3nd_password_reset: z.lazy(() => Back3nd_password_resetListRelationFilterSchema).optional(),
  roles: z.lazy(() => Back3nd_user_roleListRelationFilterSchema).optional()
}).strict();

export const back3nd_userOrderByWithRelationInputSchema: z.ZodType<Prisma.back3nd_userOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  reset_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  back3nd_password_reset: z.lazy(() => back3nd_password_resetOrderByRelationAggregateInputSchema).optional(),
  roles: z.lazy(() => back3nd_user_roleOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => back3nd_userOrderByRelevanceInputSchema).optional()
}).strict();

export const back3nd_userWhereUniqueInputSchema: z.ZodType<Prisma.back3nd_userWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => back3nd_userWhereInputSchema),z.lazy(() => back3nd_userWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_userWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_userWhereInputSchema),z.lazy(() => back3nd_userWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reset_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  back3nd_password_reset: z.lazy(() => Back3nd_password_resetListRelationFilterSchema).optional(),
  roles: z.lazy(() => Back3nd_user_roleListRelationFilterSchema).optional()
}).strict());

export const back3nd_userOrderByWithAggregationInputSchema: z.ZodType<Prisma.back3nd_userOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  reset_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => back3nd_userCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => back3nd_userMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => back3nd_userMinOrderByAggregateInputSchema).optional()
}).strict();

export const back3nd_userScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.back3nd_userScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_userScalarWhereWithAggregatesInputSchema),z.lazy(() => back3nd_userScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_userScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_userScalarWhereWithAggregatesInputSchema),z.lazy(() => back3nd_userScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reset_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const back3nd_roleWhereInputSchema: z.ZodType<Prisma.back3nd_roleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_roleWhereInputSchema),z.lazy(() => back3nd_roleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_roleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_roleWhereInputSchema),z.lazy(() => back3nd_roleWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  permissions: z.lazy(() => Back3nd_permissionListRelationFilterSchema).optional(),
  users: z.lazy(() => Back3nd_user_roleListRelationFilterSchema).optional()
}).strict();

export const back3nd_roleOrderByWithRelationInputSchema: z.ZodType<Prisma.back3nd_roleOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  permissions: z.lazy(() => back3nd_permissionOrderByRelationAggregateInputSchema).optional(),
  users: z.lazy(() => back3nd_user_roleOrderByRelationAggregateInputSchema).optional(),
  _relevance: z.lazy(() => back3nd_roleOrderByRelevanceInputSchema).optional()
}).strict();

export const back3nd_roleWhereUniqueInputSchema: z.ZodType<Prisma.back3nd_roleWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    name: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => back3nd_roleWhereInputSchema),z.lazy(() => back3nd_roleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_roleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_roleWhereInputSchema),z.lazy(() => back3nd_roleWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  permissions: z.lazy(() => Back3nd_permissionListRelationFilterSchema).optional(),
  users: z.lazy(() => Back3nd_user_roleListRelationFilterSchema).optional()
}).strict());

export const back3nd_roleOrderByWithAggregationInputSchema: z.ZodType<Prisma.back3nd_roleOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => back3nd_roleCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => back3nd_roleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => back3nd_roleMinOrderByAggregateInputSchema).optional()
}).strict();

export const back3nd_roleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.back3nd_roleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_roleScalarWhereWithAggregatesInputSchema),z.lazy(() => back3nd_roleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_roleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_roleScalarWhereWithAggregatesInputSchema),z.lazy(() => back3nd_roleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const back3nd_user_roleWhereInputSchema: z.ZodType<Prisma.back3nd_user_roleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_user_roleWhereInputSchema),z.lazy(() => back3nd_user_roleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_user_roleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_user_roleWhereInputSchema),z.lazy(() => back3nd_user_roleWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  role: z.union([ z.lazy(() => Back3nd_roleRelationFilterSchema),z.lazy(() => back3nd_roleWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => Back3nd_userRelationFilterSchema),z.lazy(() => back3nd_userWhereInputSchema) ]).optional(),
}).strict();

export const back3nd_user_roleOrderByWithRelationInputSchema: z.ZodType<Prisma.back3nd_user_roleOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => back3nd_roleOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => back3nd_userOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => back3nd_user_roleOrderByRelevanceInputSchema).optional()
}).strict();

export const back3nd_user_roleWhereUniqueInputSchema: z.ZodType<Prisma.back3nd_user_roleWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    user_id_role_id: z.lazy(() => back3nd_user_roleUser_idRole_idCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    user_id_role_id: z.lazy(() => back3nd_user_roleUser_idRole_idCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  user_id_role_id: z.lazy(() => back3nd_user_roleUser_idRole_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => back3nd_user_roleWhereInputSchema),z.lazy(() => back3nd_user_roleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_user_roleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_user_roleWhereInputSchema),z.lazy(() => back3nd_user_roleWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  role: z.union([ z.lazy(() => Back3nd_roleRelationFilterSchema),z.lazy(() => back3nd_roleWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => Back3nd_userRelationFilterSchema),z.lazy(() => back3nd_userWhereInputSchema) ]).optional(),
}).strict());

export const back3nd_user_roleOrderByWithAggregationInputSchema: z.ZodType<Prisma.back3nd_user_roleOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => back3nd_user_roleCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => back3nd_user_roleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => back3nd_user_roleMinOrderByAggregateInputSchema).optional()
}).strict();

export const back3nd_user_roleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.back3nd_user_roleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_user_roleScalarWhereWithAggregatesInputSchema),z.lazy(() => back3nd_user_roleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_user_roleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_user_roleScalarWhereWithAggregatesInputSchema),z.lazy(() => back3nd_user_roleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const back3nd_permissionWhereInputSchema: z.ZodType<Prisma.back3nd_permissionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_permissionWhereInputSchema),z.lazy(() => back3nd_permissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_permissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_permissionWhereInputSchema),z.lazy(() => back3nd_permissionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  can_create: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  can_read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  can_update: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  can_delete: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  collection: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => Back3nd_roleRelationFilterSchema),z.lazy(() => back3nd_roleWhereInputSchema) ]).optional(),
}).strict();

export const back3nd_permissionOrderByWithRelationInputSchema: z.ZodType<Prisma.back3nd_permissionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  can_create: z.lazy(() => SortOrderSchema).optional(),
  can_read: z.lazy(() => SortOrderSchema).optional(),
  can_update: z.lazy(() => SortOrderSchema).optional(),
  can_delete: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  collection: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => back3nd_roleOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => back3nd_permissionOrderByRelevanceInputSchema).optional()
}).strict();

export const back3nd_permissionWhereUniqueInputSchema: z.ZodType<Prisma.back3nd_permissionWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    role_id_collection: z.lazy(() => back3nd_permissionRole_idCollectionCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    role_id_collection: z.lazy(() => back3nd_permissionRole_idCollectionCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  role_id_collection: z.lazy(() => back3nd_permissionRole_idCollectionCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => back3nd_permissionWhereInputSchema),z.lazy(() => back3nd_permissionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_permissionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_permissionWhereInputSchema),z.lazy(() => back3nd_permissionWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  can_create: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  can_read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  can_update: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  can_delete: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  collection: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => Back3nd_roleRelationFilterSchema),z.lazy(() => back3nd_roleWhereInputSchema) ]).optional(),
}).strict());

export const back3nd_permissionOrderByWithAggregationInputSchema: z.ZodType<Prisma.back3nd_permissionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  can_create: z.lazy(() => SortOrderSchema).optional(),
  can_read: z.lazy(() => SortOrderSchema).optional(),
  can_update: z.lazy(() => SortOrderSchema).optional(),
  can_delete: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  collection: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => back3nd_permissionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => back3nd_permissionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => back3nd_permissionMinOrderByAggregateInputSchema).optional()
}).strict();

export const back3nd_permissionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.back3nd_permissionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_permissionScalarWhereWithAggregatesInputSchema),z.lazy(() => back3nd_permissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_permissionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_permissionScalarWhereWithAggregatesInputSchema),z.lazy(() => back3nd_permissionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  can_create: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  can_read: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  can_update: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  can_delete: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  collection: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const back3nd_password_resetWhereInputSchema: z.ZodType<Prisma.back3nd_password_resetWhereInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_password_resetWhereInputSchema),z.lazy(() => back3nd_password_resetWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_password_resetWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_password_resetWhereInputSchema),z.lazy(() => back3nd_password_resetWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expires_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => Back3nd_userRelationFilterSchema),z.lazy(() => back3nd_userWhereInputSchema) ]).optional(),
}).strict();

export const back3nd_password_resetOrderByWithRelationInputSchema: z.ZodType<Prisma.back3nd_password_resetOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => back3nd_userOrderByWithRelationInputSchema).optional(),
  _relevance: z.lazy(() => back3nd_password_resetOrderByRelevanceInputSchema).optional()
}).strict();

export const back3nd_password_resetWhereUniqueInputSchema: z.ZodType<Prisma.back3nd_password_resetWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => back3nd_password_resetWhereInputSchema),z.lazy(() => back3nd_password_resetWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_password_resetWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_password_resetWhereInputSchema),z.lazy(() => back3nd_password_resetWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expires_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => Back3nd_userRelationFilterSchema),z.lazy(() => back3nd_userWhereInputSchema) ]).optional(),
}).strict());

export const back3nd_password_resetOrderByWithAggregationInputSchema: z.ZodType<Prisma.back3nd_password_resetOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => back3nd_password_resetCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => back3nd_password_resetMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => back3nd_password_resetMinOrderByAggregateInputSchema).optional()
}).strict();

export const back3nd_password_resetScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.back3nd_password_resetScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_password_resetScalarWhereWithAggregatesInputSchema),z.lazy(() => back3nd_password_resetScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_password_resetScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_password_resetScalarWhereWithAggregatesInputSchema),z.lazy(() => back3nd_password_resetScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  expires_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentCreateInputSchema: z.ZodType<Prisma.DocumentCreateInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentUncheckedCreateInputSchema: z.ZodType<Prisma.DocumentUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentUpdateInputSchema: z.ZodType<Prisma.DocumentUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const DocumentUncheckedUpdateInputSchema: z.ZodType<Prisma.DocumentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const DocumentCreateManyInputSchema: z.ZodType<Prisma.DocumentCreateManyInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentUpdateManyMutationInputSchema: z.ZodType<Prisma.DocumentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DocumentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOnDocumentsCreateInputSchema: z.ZodType<Prisma.UserOnDocumentsCreateInput> = z.object({
  assignedAt: z.coerce.date().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutUserOnDocumentsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutUserOnDocumentsInputSchema)
}).strict();

export const UserOnDocumentsUncheckedCreateInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedCreateInput> = z.object({
  userId: z.string(),
  documentId: z.string(),
  assignedAt: z.coerce.date().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserOnDocumentsUpdateInputSchema: z.ZodType<Prisma.UserOnDocumentsUpdateInput> = z.object({
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  document: z.lazy(() => DocumentUpdateOneRequiredWithoutUserOnDocumentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutUserOnDocumentsNestedInputSchema).optional()
}).strict();

export const UserOnDocumentsUncheckedUpdateInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedUpdateInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOnDocumentsCreateManyInputSchema: z.ZodType<Prisma.UserOnDocumentsCreateManyInput> = z.object({
  userId: z.string(),
  documentId: z.string(),
  assignedAt: z.coerce.date().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserOnDocumentsUpdateManyMutationInputSchema: z.ZodType<Prisma.UserOnDocumentsUpdateManyMutationInput> = z.object({
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOnDocumentsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedUpdateManyInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentUserCreateInputSchema: z.ZodType<Prisma.DocumentUserCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutDocumentUsersInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutDocumentUsersInputSchema)
}).strict();

export const DocumentUserUncheckedCreateInputSchema: z.ZodType<Prisma.DocumentUserUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  documentId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentUserUpdateInputSchema: z.ZodType<Prisma.DocumentUserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  document: z.lazy(() => DocumentUpdateOneRequiredWithoutDocumentUsersNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutDocumentUsersNestedInputSchema).optional()
}).strict();

export const DocumentUserUncheckedUpdateInputSchema: z.ZodType<Prisma.DocumentUserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentUserCreateManyInputSchema: z.ZodType<Prisma.DocumentUserCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  documentId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentUserUpdateManyMutationInputSchema: z.ZodType<Prisma.DocumentUserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentUserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DocumentUserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionCreateInputSchema: z.ZodType<Prisma.DocumentVersionCreateInput> = z.object({
  id: z.string().optional(),
  versionNumber: z.number().int(),
  filePath: z.string(),
  changesDescription: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutVersionsInputSchema),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutVersionInputSchema).optional()
}).strict();

export const DocumentVersionUncheckedCreateInputSchema: z.ZodType<Prisma.DocumentVersionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  versionNumber: z.number().int(),
  filePath: z.string(),
  changesDescription: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutVersionInputSchema).optional()
}).strict();

export const DocumentVersionUpdateInputSchema: z.ZodType<Prisma.DocumentVersionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  changesDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  document: z.lazy(() => DocumentUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutVersionNestedInputSchema).optional()
}).strict();

export const DocumentVersionUncheckedUpdateInputSchema: z.ZodType<Prisma.DocumentVersionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  changesDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutVersionNestedInputSchema).optional()
}).strict();

export const DocumentVersionCreateManyInputSchema: z.ZodType<Prisma.DocumentVersionCreateManyInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  versionNumber: z.number().int(),
  filePath: z.string(),
  changesDescription: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentVersionUpdateManyMutationInputSchema: z.ZodType<Prisma.DocumentVersionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  changesDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DocumentVersionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  changesDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionCreatorCreateInputSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutDocumentVersionCreatorsInputSchema),
  version: z.lazy(() => DocumentVersionCreateNestedOneWithoutDocumentVersionCreatorsInputSchema)
}).strict();

export const DocumentVersionCreatorUncheckedCreateInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  versionId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentVersionCreatorUpdateInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutDocumentVersionCreatorsNestedInputSchema).optional(),
  version: z.lazy(() => DocumentVersionUpdateOneRequiredWithoutDocumentVersionCreatorsNestedInputSchema).optional()
}).strict();

export const DocumentVersionCreatorUncheckedUpdateInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionCreatorCreateManyInputSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  versionId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentVersionCreatorUpdateManyMutationInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionCreatorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SharedDocumentCreateInputSchema: z.ZodType<Prisma.SharedDocumentCreateInput> = z.object({
  id: z.string().optional(),
  sharedAt: z.coerce.date().optional(),
  permission: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutSharedDocumentsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutSharedDocumentsInputSchema)
}).strict();

export const SharedDocumentUncheckedCreateInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  userId: z.string(),
  sharedAt: z.coerce.date().optional(),
  permission: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SharedDocumentUpdateInputSchema: z.ZodType<Prisma.SharedDocumentUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  document: z.lazy(() => DocumentUpdateOneRequiredWithoutSharedDocumentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSharedDocumentsNestedInputSchema).optional()
}).strict();

export const SharedDocumentUncheckedUpdateInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SharedDocumentCreateManyInputSchema: z.ZodType<Prisma.SharedDocumentCreateManyInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  userId: z.string(),
  sharedAt: z.coerce.date().optional(),
  permission: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SharedDocumentUpdateManyMutationInputSchema: z.ZodType<Prisma.SharedDocumentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SharedDocumentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WorkflowCreateInputSchema: z.ZodType<Prisma.WorkflowCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.string().optional(),
  status: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutWorkflowInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkflowInputSchema).optional()
}).strict();

export const WorkflowUncheckedCreateInputSchema: z.ZodType<Prisma.WorkflowUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.string().optional(),
  status: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutWorkflowInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkflowInputSchema).optional()
}).strict();

export const WorkflowUpdateInputSchema: z.ZodType<Prisma.WorkflowUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutWorkflowNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkflowNestedInputSchema).optional()
}).strict();

export const WorkflowUncheckedUpdateInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutWorkflowNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkflowNestedInputSchema).optional()
}).strict();

export const WorkflowCreateManyInputSchema: z.ZodType<Prisma.WorkflowCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.string().optional(),
  status: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WorkflowUpdateManyMutationInputSchema: z.ZodType<Prisma.WorkflowUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WorkflowUncheckedUpdateManyInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskCreateInputSchema: z.ZodType<Prisma.TaskCreateInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutTaskInputSchema).optional(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTasksAssignedInputSchema).optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutTasksInputSchema).optional(),
  workflow: z.lazy(() => WorkflowCreateNestedOneWithoutTasksInputSchema),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateInputSchema: z.ZodType<Prisma.TaskUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  workflowId: z.string(),
  assignedToId: z.string().optional().nullable(),
  documentId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUpdateInputSchema: z.ZodType<Prisma.TaskUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutTaskNestedInputSchema).optional(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTasksAssignedNestedInputSchema).optional(),
  document: z.lazy(() => DocumentUpdateOneWithoutTasksNestedInputSchema).optional(),
  workflow: z.lazy(() => WorkflowUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workflowId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskCreateManyInputSchema: z.ZodType<Prisma.TaskCreateManyInput> = z.object({
  id: z.string().optional(),
  workflowId: z.string(),
  assignedToId: z.string().optional().nullable(),
  documentId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskUpdateManyMutationInputSchema: z.ZodType<Prisma.TaskUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workflowId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogCreateInputSchema: z.ZodType<Prisma.AuditLogCreateInput> = z.object({
  id: z.string().optional(),
  action: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable(),
  performedBy: z.lazy(() => UserCreateNestedOneWithoutAuditLogsInputSchema),
  task: z.lazy(() => TaskCreateNestedOneWithoutAuditLogsInputSchema).optional(),
  workflow: z.lazy(() => WorkflowCreateNestedOneWithoutAuditLogsInputSchema).optional()
}).strict();

export const AuditLogUncheckedCreateInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  taskId: z.string().optional().nullable(),
  workflowId: z.string().optional().nullable(),
  action: z.string(),
  performedById: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable()
}).strict();

export const AuditLogUpdateInputSchema: z.ZodType<Prisma.AuditLogUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  performedBy: z.lazy(() => UserUpdateOneRequiredWithoutAuditLogsNestedInputSchema).optional(),
  task: z.lazy(() => TaskUpdateOneWithoutAuditLogsNestedInputSchema).optional(),
  workflow: z.lazy(() => WorkflowUpdateOneWithoutAuditLogsNestedInputSchema).optional()
}).strict();

export const AuditLogUncheckedUpdateInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workflowId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AuditLogCreateManyInputSchema: z.ZodType<Prisma.AuditLogCreateManyInput> = z.object({
  id: z.string().optional(),
  taskId: z.string().optional().nullable(),
  workflowId: z.string().optional().nullable(),
  action: z.string(),
  performedById: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable()
}).strict();

export const AuditLogUpdateManyMutationInputSchema: z.ZodType<Prisma.AuditLogUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AuditLogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workflowId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const NotificationCreateInputSchema: z.ZodType<Prisma.NotificationCreateInput> = z.object({
  id: z.string().optional(),
  message: z.string(),
  read: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutNotificationsInputSchema)
}).strict();

export const NotificationUncheckedCreateInputSchema: z.ZodType<Prisma.NotificationUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  message: z.string(),
  read: z.boolean().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const NotificationUpdateInputSchema: z.ZodType<Prisma.NotificationUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutNotificationsNestedInputSchema).optional()
}).strict();

export const NotificationUncheckedUpdateInputSchema: z.ZodType<Prisma.NotificationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NotificationCreateManyInputSchema: z.ZodType<Prisma.NotificationCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  message: z.string(),
  read: z.boolean().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const NotificationUpdateManyMutationInputSchema: z.ZodType<Prisma.NotificationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NotificationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.NotificationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentCreateInputSchema: z.ZodType<Prisma.AttachmentCreateInput> = z.object({
  id: z.string().optional(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutAttachmentsInputSchema)
}).strict();

export const AttachmentUncheckedCreateInputSchema: z.ZodType<Prisma.AttachmentUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AttachmentUpdateInputSchema: z.ZodType<Prisma.AttachmentUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  document: z.lazy(() => DocumentUpdateOneRequiredWithoutAttachmentsNestedInputSchema).optional()
}).strict();

export const AttachmentUncheckedUpdateInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentCreateManyInputSchema: z.ZodType<Prisma.AttachmentCreateManyInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AttachmentUpdateManyMutationInputSchema: z.ZodType<Prisma.AttachmentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DigitalCertificateCreateInputSchema: z.ZodType<Prisma.DigitalCertificateCreateInput> = z.object({
  id: z.string().optional(),
  alias: z.string(),
  filePath: z.string(),
  password: z.string(),
  createdAt: z.coerce.date().optional(),
  expiration: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutDigitalCertificatesInputSchema)
}).strict();

export const DigitalCertificateUncheckedCreateInputSchema: z.ZodType<Prisma.DigitalCertificateUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  alias: z.string(),
  filePath: z.string(),
  password: z.string(),
  createdAt: z.coerce.date().optional(),
  expiration: z.coerce.date()
}).strict();

export const DigitalCertificateUpdateInputSchema: z.ZodType<Prisma.DigitalCertificateUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alias: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutDigitalCertificatesNestedInputSchema).optional()
}).strict();

export const DigitalCertificateUncheckedUpdateInputSchema: z.ZodType<Prisma.DigitalCertificateUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alias: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DigitalCertificateCreateManyInputSchema: z.ZodType<Prisma.DigitalCertificateCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  alias: z.string(),
  filePath: z.string(),
  password: z.string(),
  createdAt: z.coerce.date().optional(),
  expiration: z.coerce.date()
}).strict();

export const DigitalCertificateUpdateManyMutationInputSchema: z.ZodType<Prisma.DigitalCertificateUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alias: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DigitalCertificateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DigitalCertificateUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alias: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileMetadataCreateInputSchema: z.ZodType<Prisma.FileMetadataCreateInput> = z.object({
  id: z.string().optional(),
  fileSize: z.number().int(),
  mimeType: z.string(),
  checksum: z.string(),
  createdAt: z.coerce.date().optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutFileMetadataInputSchema)
}).strict();

export const FileMetadataUncheckedCreateInputSchema: z.ZodType<Prisma.FileMetadataUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  fileSize: z.number().int(),
  mimeType: z.string(),
  checksum: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FileMetadataUpdateInputSchema: z.ZodType<Prisma.FileMetadataUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checksum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  document: z.lazy(() => DocumentUpdateOneRequiredWithoutFileMetadataNestedInputSchema).optional()
}).strict();

export const FileMetadataUncheckedUpdateInputSchema: z.ZodType<Prisma.FileMetadataUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checksum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileMetadataCreateManyInputSchema: z.ZodType<Prisma.FileMetadataCreateManyInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  fileSize: z.number().int(),
  mimeType: z.string(),
  checksum: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FileMetadataUpdateManyMutationInputSchema: z.ZodType<Prisma.FileMetadataUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checksum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileMetadataUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FileMetadataUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checksum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InstitutionCreateInputSchema: z.ZodType<Prisma.InstitutionCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  flag: z.string().optional().nullable(),
  emblem: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  mayor: z.lazy(() => UserCreateNestedOneWithoutMayorInstitutionsInputSchema).optional(),
  viceMayor: z.lazy(() => UserCreateNestedOneWithoutViceMayorInstitutionsInputSchema).optional(),
  departments: z.lazy(() => DepartmentCreateNestedManyWithoutInstitutionInputSchema).optional()
}).strict();

export const InstitutionUncheckedCreateInputSchema: z.ZodType<Prisma.InstitutionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  flag: z.string().optional().nullable(),
  emblem: z.string().optional().nullable(),
  mayorId: z.string().optional().nullable(),
  viceMayorId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  departments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutInstitutionInputSchema).optional()
}).strict();

export const InstitutionUpdateInputSchema: z.ZodType<Prisma.InstitutionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mayor: z.lazy(() => UserUpdateOneWithoutMayorInstitutionsNestedInputSchema).optional(),
  viceMayor: z.lazy(() => UserUpdateOneWithoutViceMayorInstitutionsNestedInputSchema).optional(),
  departments: z.lazy(() => DepartmentUpdateManyWithoutInstitutionNestedInputSchema).optional()
}).strict();

export const InstitutionUncheckedUpdateInputSchema: z.ZodType<Prisma.InstitutionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mayorId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viceMayorId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  departments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutInstitutionNestedInputSchema).optional()
}).strict();

export const InstitutionCreateManyInputSchema: z.ZodType<Prisma.InstitutionCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  flag: z.string().optional().nullable(),
  emblem: z.string().optional().nullable(),
  mayorId: z.string().optional().nullable(),
  viceMayorId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InstitutionUpdateManyMutationInputSchema: z.ZodType<Prisma.InstitutionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InstitutionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InstitutionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mayorId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viceMayorId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DepartmentCreateInputSchema: z.ZodType<Prisma.DepartmentCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  institution: z.lazy(() => InstitutionCreateNestedOneWithoutDepartmentsInputSchema),
  parentDepartment: z.lazy(() => DepartmentCreateNestedOneWithoutChildDepartmentsInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  head: z.lazy(() => UserCreateNestedOneWithoutHeadOfDepartmentsInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentUncheckedCreateInputSchema: z.ZodType<Prisma.DepartmentUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  institutionId: z.string(),
  parentDepartmentId: z.number().int().optional().nullable(),
  headId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentUpdateInputSchema: z.ZodType<Prisma.DepartmentUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  institution: z.lazy(() => InstitutionUpdateOneRequiredWithoutDepartmentsNestedInputSchema).optional(),
  parentDepartment: z.lazy(() => DepartmentUpdateOneWithoutChildDepartmentsNestedInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  head: z.lazy(() => UserUpdateOneWithoutHeadOfDepartmentsNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUncheckedUpdateInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentDepartmentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  headId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentCreateManyInputSchema: z.ZodType<Prisma.DepartmentCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  institutionId: z.string(),
  parentDepartmentId: z.number().int().optional().nullable(),
  headId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DepartmentUpdateManyMutationInputSchema: z.ZodType<Prisma.DepartmentUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DepartmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentDepartmentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  headId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserDepartmentCreateInputSchema: z.ZodType<Prisma.UserDepartmentCreateInput> = z.object({
  id: z.string().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional(),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutUserDepartmentsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutUserDepartmentsInputSchema)
}).strict();

export const UserDepartmentUncheckedCreateInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  departmentId: z.number().int(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserDepartmentUpdateInputSchema: z.ZodType<Prisma.UserDepartmentUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutUserDepartmentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutUserDepartmentsNestedInputSchema).optional()
}).strict();

export const UserDepartmentUncheckedUpdateInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserDepartmentCreateManyInputSchema: z.ZodType<Prisma.UserDepartmentCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  departmentId: z.number().int(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserDepartmentUpdateManyMutationInputSchema: z.ZodType<Prisma.UserDepartmentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserDepartmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCreateInputSchema: z.ZodType<Prisma.TicketCreateInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateInputSchema: z.ZodType<Prisma.TicketUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUpdateInputSchema: z.ZodType<Prisma.TicketUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketCreateManyInputSchema: z.ZodType<Prisma.TicketCreateManyInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable()
}).strict();

export const TicketUpdateManyMutationInputSchema: z.ZodType<Prisma.TicketUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TicketUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TicketStatusCreateInputSchema: z.ZodType<Prisma.TicketStatusCreateInput> = z.object({
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutStatusInputSchema).optional()
}).strict();

export const TicketStatusUncheckedCreateInputSchema: z.ZodType<Prisma.TicketStatusUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutStatusInputSchema).optional()
}).strict();

export const TicketStatusUpdateInputSchema: z.ZodType<Prisma.TicketStatusUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutStatusNestedInputSchema).optional()
}).strict();

export const TicketStatusUncheckedUpdateInputSchema: z.ZodType<Prisma.TicketStatusUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutStatusNestedInputSchema).optional()
}).strict();

export const TicketStatusCreateManyInputSchema: z.ZodType<Prisma.TicketStatusCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketStatusUpdateManyMutationInputSchema: z.ZodType<Prisma.TicketStatusUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketStatusUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TicketStatusUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketPriorityCreateInputSchema: z.ZodType<Prisma.TicketPriorityCreateInput> = z.object({
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutPriorityInputSchema).optional()
}).strict();

export const TicketPriorityUncheckedCreateInputSchema: z.ZodType<Prisma.TicketPriorityUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutPriorityInputSchema).optional()
}).strict();

export const TicketPriorityUpdateInputSchema: z.ZodType<Prisma.TicketPriorityUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutPriorityNestedInputSchema).optional()
}).strict();

export const TicketPriorityUncheckedUpdateInputSchema: z.ZodType<Prisma.TicketPriorityUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutPriorityNestedInputSchema).optional()
}).strict();

export const TicketPriorityCreateManyInputSchema: z.ZodType<Prisma.TicketPriorityCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketPriorityUpdateManyMutationInputSchema: z.ZodType<Prisma.TicketPriorityUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketPriorityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TicketPriorityUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const HelpTopicCreateInputSchema: z.ZodType<Prisma.HelpTopicCreateInput> = z.object({
  topic: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutHelpTopicsInputSchema),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutHelpTopicInputSchema).optional()
}).strict();

export const HelpTopicUncheckedCreateInputSchema: z.ZodType<Prisma.HelpTopicUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  topic: z.string(),
  description: z.string().optional().nullable(),
  departmentId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutHelpTopicInputSchema).optional()
}).strict();

export const HelpTopicUpdateInputSchema: z.ZodType<Prisma.HelpTopicUpdateInput> = z.object({
  topic: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutHelpTopicsNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutHelpTopicNestedInputSchema).optional()
}).strict();

export const HelpTopicUncheckedUpdateInputSchema: z.ZodType<Prisma.HelpTopicUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  topic: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutHelpTopicNestedInputSchema).optional()
}).strict();

export const HelpTopicCreateManyInputSchema: z.ZodType<Prisma.HelpTopicCreateManyInput> = z.object({
  id: z.number().int().optional(),
  topic: z.string(),
  description: z.string().optional().nullable(),
  departmentId: z.number().int(),
  createdAt: z.coerce.date().optional()
}).strict();

export const HelpTopicUpdateManyMutationInputSchema: z.ZodType<Prisma.HelpTopicUpdateManyMutationInput> = z.object({
  topic: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const HelpTopicUncheckedUpdateManyInputSchema: z.ZodType<Prisma.HelpTopicUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  topic: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SLAPlanCreateInputSchema: z.ZodType<Prisma.SLAPlanCreateInput> = z.object({
  name: z.string(),
  gracePeriod: z.number().int(),
  createdAt: z.coerce.date().optional(),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutSlaPlanInputSchema).optional()
}).strict();

export const SLAPlanUncheckedCreateInputSchema: z.ZodType<Prisma.SLAPlanUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  gracePeriod: z.number().int(),
  createdAt: z.coerce.date().optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutSlaPlanInputSchema).optional()
}).strict();

export const SLAPlanUpdateInputSchema: z.ZodType<Prisma.SLAPlanUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gracePeriod: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutSlaPlanNestedInputSchema).optional()
}).strict();

export const SLAPlanUncheckedUpdateInputSchema: z.ZodType<Prisma.SLAPlanUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gracePeriod: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutSlaPlanNestedInputSchema).optional()
}).strict();

export const SLAPlanCreateManyInputSchema: z.ZodType<Prisma.SLAPlanCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  gracePeriod: z.number().int(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SLAPlanUpdateManyMutationInputSchema: z.ZodType<Prisma.SLAPlanUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gracePeriod: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SLAPlanUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SLAPlanUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gracePeriod: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketThreadCreateInputSchema: z.ZodType<Prisma.TicketThreadCreateInput> = z.object({
  id: z.string().optional(),
  message: z.string(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketThreadInputSchema).optional(),
  ticket: z.lazy(() => TicketCreateNestedOneWithoutThreadsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutTicketThreadsInputSchema)
}).strict();

export const TicketThreadUncheckedCreateInputSchema: z.ZodType<Prisma.TicketThreadUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  userId: z.string(),
  message: z.string(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketThreadInputSchema).optional()
}).strict();

export const TicketThreadUpdateInputSchema: z.ZodType<Prisma.TicketThreadUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketThreadNestedInputSchema).optional(),
  ticket: z.lazy(() => TicketUpdateOneRequiredWithoutThreadsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTicketThreadsNestedInputSchema).optional()
}).strict();

export const TicketThreadUncheckedUpdateInputSchema: z.ZodType<Prisma.TicketThreadUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketThreadNestedInputSchema).optional()
}).strict();

export const TicketThreadCreateManyInputSchema: z.ZodType<Prisma.TicketThreadCreateManyInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  userId: z.string(),
  message: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketThreadUpdateManyMutationInputSchema: z.ZodType<Prisma.TicketThreadUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketThreadUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TicketThreadUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketAttachmentCreateInputSchema: z.ZodType<Prisma.TicketAttachmentCreateInput> = z.object({
  id: z.string().optional(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional(),
  ticket: z.lazy(() => TicketCreateNestedOneWithoutAttachmentsInputSchema),
  ticketThread: z.lazy(() => TicketThreadCreateNestedOneWithoutAttachmentsInputSchema)
}).strict();

export const TicketAttachmentUncheckedCreateInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  ticketThreadId: z.string(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketAttachmentUpdateInputSchema: z.ZodType<Prisma.TicketAttachmentUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ticket: z.lazy(() => TicketUpdateOneRequiredWithoutAttachmentsNestedInputSchema).optional(),
  ticketThread: z.lazy(() => TicketThreadUpdateOneRequiredWithoutAttachmentsNestedInputSchema).optional()
}).strict();

export const TicketAttachmentUncheckedUpdateInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketThreadId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketAttachmentCreateManyInputSchema: z.ZodType<Prisma.TicketAttachmentCreateManyInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  ticketThreadId: z.string(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketAttachmentUpdateManyMutationInputSchema: z.ZodType<Prisma.TicketAttachmentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketAttachmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketThreadId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCollaboratorCreateInputSchema: z.ZodType<Prisma.TicketCollaboratorCreateInput> = z.object({
  id: z.string().optional(),
  ticket: z.lazy(() => TicketCreateNestedOneWithoutCollaboratorsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutTicketCollaboratorsInputSchema)
}).strict();

export const TicketCollaboratorUncheckedCreateInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  userId: z.string()
}).strict();

export const TicketCollaboratorUpdateInputSchema: z.ZodType<Prisma.TicketCollaboratorUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticket: z.lazy(() => TicketUpdateOneRequiredWithoutCollaboratorsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTicketCollaboratorsNestedInputSchema).optional()
}).strict();

export const TicketCollaboratorUncheckedUpdateInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCollaboratorCreateManyInputSchema: z.ZodType<Prisma.TicketCollaboratorCreateManyInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  userId: z.string()
}).strict();

export const TicketCollaboratorUpdateManyMutationInputSchema: z.ZodType<Prisma.TicketCollaboratorUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCollaboratorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomFieldCreateInputSchema: z.ZodType<Prisma.CustomFieldCreateInput> = z.object({
  name: z.string(),
  fieldType: z.string(),
  createdAt: z.coerce.date().optional(),
  tickets: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutFieldInputSchema).optional()
}).strict();

export const CustomFieldUncheckedCreateInputSchema: z.ZodType<Prisma.CustomFieldUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  fieldType: z.string(),
  createdAt: z.coerce.date().optional(),
  tickets: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutFieldInputSchema).optional()
}).strict();

export const CustomFieldUpdateInputSchema: z.ZodType<Prisma.CustomFieldUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fieldType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketCustomFieldUpdateManyWithoutFieldNestedInputSchema).optional()
}).strict();

export const CustomFieldUncheckedUpdateInputSchema: z.ZodType<Prisma.CustomFieldUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fieldType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutFieldNestedInputSchema).optional()
}).strict();

export const CustomFieldCreateManyInputSchema: z.ZodType<Prisma.CustomFieldCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  fieldType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const CustomFieldUpdateManyMutationInputSchema: z.ZodType<Prisma.CustomFieldUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fieldType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomFieldUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CustomFieldUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fieldType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCustomFieldCreateInputSchema: z.ZodType<Prisma.TicketCustomFieldCreateInput> = z.object({
  id: z.string().optional(),
  value: z.string(),
  field: z.lazy(() => CustomFieldCreateNestedOneWithoutTicketsInputSchema),
  ticket: z.lazy(() => TicketCreateNestedOneWithoutCustomFieldsInputSchema)
}).strict();

export const TicketCustomFieldUncheckedCreateInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  fieldId: z.number().int(),
  value: z.string()
}).strict();

export const TicketCustomFieldUpdateInputSchema: z.ZodType<Prisma.TicketCustomFieldUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field: z.lazy(() => CustomFieldUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  ticket: z.lazy(() => TicketUpdateOneRequiredWithoutCustomFieldsNestedInputSchema).optional()
}).strict();

export const TicketCustomFieldUncheckedUpdateInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fieldId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCustomFieldCreateManyInputSchema: z.ZodType<Prisma.TicketCustomFieldCreateManyInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  fieldId: z.number().int(),
  value: z.string()
}).strict();

export const TicketCustomFieldUpdateManyMutationInputSchema: z.ZodType<Prisma.TicketCustomFieldUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCustomFieldUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fieldId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUserCreateInputSchema: z.ZodType<Prisma.TaskUserCreateInput> = z.object({
  id: z.string().optional(),
  task: z.lazy(() => TaskCreateNestedOneWithoutTaskUsersInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutTaskUsersInputSchema)
}).strict();

export const TaskUserUncheckedCreateInputSchema: z.ZodType<Prisma.TaskUserUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  taskId: z.string(),
  userId: z.string()
}).strict();

export const TaskUserUpdateInputSchema: z.ZodType<Prisma.TaskUserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  task: z.lazy(() => TaskUpdateOneRequiredWithoutTaskUsersNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTaskUsersNestedInputSchema).optional()
}).strict();

export const TaskUserUncheckedUpdateInputSchema: z.ZodType<Prisma.TaskUserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUserCreateManyInputSchema: z.ZodType<Prisma.TaskUserCreateManyInput> = z.object({
  id: z.string().optional(),
  taskId: z.string(),
  userId: z.string()
}).strict();

export const TaskUserUpdateManyMutationInputSchema: z.ZodType<Prisma.TaskUserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaskUserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketUserCreateInputSchema: z.ZodType<Prisma.TicketUserCreateInput> = z.object({
  id: z.string().optional(),
  ticket: z.lazy(() => TicketCreateNestedOneWithoutTicketUsersInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutTicketUsersInputSchema)
}).strict();

export const TicketUserUncheckedCreateInputSchema: z.ZodType<Prisma.TicketUserUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  userId: z.string()
}).strict();

export const TicketUserUpdateInputSchema: z.ZodType<Prisma.TicketUserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticket: z.lazy(() => TicketUpdateOneRequiredWithoutTicketUsersNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTicketUsersNestedInputSchema).optional()
}).strict();

export const TicketUserUncheckedUpdateInputSchema: z.ZodType<Prisma.TicketUserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketUserCreateManyInputSchema: z.ZodType<Prisma.TicketUserCreateManyInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  userId: z.string()
}).strict();

export const TicketUserUpdateManyMutationInputSchema: z.ZodType<Prisma.TicketUserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketUserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TicketUserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_userCreateInputSchema: z.ZodType<Prisma.back3nd_userCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  password: z.string(),
  reset_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  back3nd_password_reset: z.lazy(() => back3nd_password_resetCreateNestedManyWithoutUserInputSchema).optional(),
  roles: z.lazy(() => back3nd_user_roleCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const back3nd_userUncheckedCreateInputSchema: z.ZodType<Prisma.back3nd_userUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  password: z.string(),
  reset_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  back3nd_password_reset: z.lazy(() => back3nd_password_resetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  roles: z.lazy(() => back3nd_user_roleUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const back3nd_userUpdateInputSchema: z.ZodType<Prisma.back3nd_userUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reset_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  back3nd_password_reset: z.lazy(() => back3nd_password_resetUpdateManyWithoutUserNestedInputSchema).optional(),
  roles: z.lazy(() => back3nd_user_roleUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const back3nd_userUncheckedUpdateInputSchema: z.ZodType<Prisma.back3nd_userUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reset_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  back3nd_password_reset: z.lazy(() => back3nd_password_resetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  roles: z.lazy(() => back3nd_user_roleUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const back3nd_userCreateManyInputSchema: z.ZodType<Prisma.back3nd_userCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  password: z.string(),
  reset_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const back3nd_userUpdateManyMutationInputSchema: z.ZodType<Prisma.back3nd_userUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reset_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_userUncheckedUpdateManyInputSchema: z.ZodType<Prisma.back3nd_userUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reset_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_roleCreateInputSchema: z.ZodType<Prisma.back3nd_roleCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  permissions: z.lazy(() => back3nd_permissionCreateNestedManyWithoutRoleInputSchema).optional(),
  users: z.lazy(() => back3nd_user_roleCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const back3nd_roleUncheckedCreateInputSchema: z.ZodType<Prisma.back3nd_roleUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  permissions: z.lazy(() => back3nd_permissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional(),
  users: z.lazy(() => back3nd_user_roleUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const back3nd_roleUpdateInputSchema: z.ZodType<Prisma.back3nd_roleUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => back3nd_permissionUpdateManyWithoutRoleNestedInputSchema).optional(),
  users: z.lazy(() => back3nd_user_roleUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const back3nd_roleUncheckedUpdateInputSchema: z.ZodType<Prisma.back3nd_roleUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => back3nd_permissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional(),
  users: z.lazy(() => back3nd_user_roleUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const back3nd_roleCreateManyInputSchema: z.ZodType<Prisma.back3nd_roleCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const back3nd_roleUpdateManyMutationInputSchema: z.ZodType<Prisma.back3nd_roleUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_roleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.back3nd_roleUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_user_roleCreateInputSchema: z.ZodType<Prisma.back3nd_user_roleCreateInput> = z.object({
  id: z.string().optional(),
  created_at: z.coerce.date().optional(),
  role: z.lazy(() => back3nd_roleCreateNestedOneWithoutUsersInputSchema),
  user: z.lazy(() => back3nd_userCreateNestedOneWithoutRolesInputSchema)
}).strict();

export const back3nd_user_roleUncheckedCreateInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  role_id: z.string(),
  created_at: z.coerce.date().optional()
}).strict();

export const back3nd_user_roleUpdateInputSchema: z.ZodType<Prisma.back3nd_user_roleUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => back3nd_roleUpdateOneRequiredWithoutUsersNestedInputSchema).optional(),
  user: z.lazy(() => back3nd_userUpdateOneRequiredWithoutRolesNestedInputSchema).optional()
}).strict();

export const back3nd_user_roleUncheckedUpdateInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_user_roleCreateManyInputSchema: z.ZodType<Prisma.back3nd_user_roleCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  role_id: z.string(),
  created_at: z.coerce.date().optional()
}).strict();

export const back3nd_user_roleUpdateManyMutationInputSchema: z.ZodType<Prisma.back3nd_user_roleUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_user_roleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_permissionCreateInputSchema: z.ZodType<Prisma.back3nd_permissionCreateInput> = z.object({
  id: z.string().optional(),
  can_create: z.boolean().optional(),
  can_read: z.boolean().optional(),
  can_update: z.boolean().optional(),
  can_delete: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  collection: z.string(),
  role: z.lazy(() => back3nd_roleCreateNestedOneWithoutPermissionsInputSchema)
}).strict();

export const back3nd_permissionUncheckedCreateInputSchema: z.ZodType<Prisma.back3nd_permissionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  role_id: z.string(),
  can_create: z.boolean().optional(),
  can_read: z.boolean().optional(),
  can_update: z.boolean().optional(),
  can_delete: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  collection: z.string()
}).strict();

export const back3nd_permissionUpdateInputSchema: z.ZodType<Prisma.back3nd_permissionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  can_create: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_update: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_delete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  collection: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => back3nd_roleUpdateOneRequiredWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const back3nd_permissionUncheckedUpdateInputSchema: z.ZodType<Prisma.back3nd_permissionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  can_create: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_update: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_delete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  collection: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_permissionCreateManyInputSchema: z.ZodType<Prisma.back3nd_permissionCreateManyInput> = z.object({
  id: z.string().optional(),
  role_id: z.string(),
  can_create: z.boolean().optional(),
  can_read: z.boolean().optional(),
  can_update: z.boolean().optional(),
  can_delete: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  collection: z.string()
}).strict();

export const back3nd_permissionUpdateManyMutationInputSchema: z.ZodType<Prisma.back3nd_permissionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  can_create: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_update: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_delete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  collection: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_permissionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.back3nd_permissionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  can_create: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_update: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_delete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  collection: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_password_resetCreateInputSchema: z.ZodType<Prisma.back3nd_password_resetCreateInput> = z.object({
  id: z.string().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  expires_at: z.coerce.date(),
  user: z.lazy(() => back3nd_userCreateNestedOneWithoutBack3nd_password_resetInputSchema)
}).strict();

export const back3nd_password_resetUncheckedCreateInputSchema: z.ZodType<Prisma.back3nd_password_resetUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  expires_at: z.coerce.date()
}).strict();

export const back3nd_password_resetUpdateInputSchema: z.ZodType<Prisma.back3nd_password_resetUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => back3nd_userUpdateOneRequiredWithoutBack3nd_password_resetNestedInputSchema).optional()
}).strict();

export const back3nd_password_resetUncheckedUpdateInputSchema: z.ZodType<Prisma.back3nd_password_resetUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_password_resetCreateManyInputSchema: z.ZodType<Prisma.back3nd_password_resetCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  expires_at: z.coerce.date()
}).strict();

export const back3nd_password_resetUpdateManyMutationInputSchema: z.ZodType<Prisma.back3nd_password_resetUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_password_resetUncheckedUpdateManyInputSchema: z.ZodType<Prisma.back3nd_password_resetUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UuidFilterSchema: z.ZodType<Prisma.UuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  search: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const AuditLogListRelationFilterSchema: z.ZodType<Prisma.AuditLogListRelationFilter> = z.object({
  every: z.lazy(() => AuditLogWhereInputSchema).optional(),
  some: z.lazy(() => AuditLogWhereInputSchema).optional(),
  none: z.lazy(() => AuditLogWhereInputSchema).optional()
}).strict();

export const DigitalCertificateListRelationFilterSchema: z.ZodType<Prisma.DigitalCertificateListRelationFilter> = z.object({
  every: z.lazy(() => DigitalCertificateWhereInputSchema).optional(),
  some: z.lazy(() => DigitalCertificateWhereInputSchema).optional(),
  none: z.lazy(() => DigitalCertificateWhereInputSchema).optional()
}).strict();

export const DocumentUserListRelationFilterSchema: z.ZodType<Prisma.DocumentUserListRelationFilter> = z.object({
  every: z.lazy(() => DocumentUserWhereInputSchema).optional(),
  some: z.lazy(() => DocumentUserWhereInputSchema).optional(),
  none: z.lazy(() => DocumentUserWhereInputSchema).optional()
}).strict();

export const DocumentVersionCreatorListRelationFilterSchema: z.ZodType<Prisma.DocumentVersionCreatorListRelationFilter> = z.object({
  every: z.lazy(() => DocumentVersionCreatorWhereInputSchema).optional(),
  some: z.lazy(() => DocumentVersionCreatorWhereInputSchema).optional(),
  none: z.lazy(() => DocumentVersionCreatorWhereInputSchema).optional()
}).strict();

export const NotificationListRelationFilterSchema: z.ZodType<Prisma.NotificationListRelationFilter> = z.object({
  every: z.lazy(() => NotificationWhereInputSchema).optional(),
  some: z.lazy(() => NotificationWhereInputSchema).optional(),
  none: z.lazy(() => NotificationWhereInputSchema).optional()
}).strict();

export const SharedDocumentListRelationFilterSchema: z.ZodType<Prisma.SharedDocumentListRelationFilter> = z.object({
  every: z.lazy(() => SharedDocumentWhereInputSchema).optional(),
  some: z.lazy(() => SharedDocumentWhereInputSchema).optional(),
  none: z.lazy(() => SharedDocumentWhereInputSchema).optional()
}).strict();

export const TaskListRelationFilterSchema: z.ZodType<Prisma.TaskListRelationFilter> = z.object({
  every: z.lazy(() => TaskWhereInputSchema).optional(),
  some: z.lazy(() => TaskWhereInputSchema).optional(),
  none: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const TaskUserListRelationFilterSchema: z.ZodType<Prisma.TaskUserListRelationFilter> = z.object({
  every: z.lazy(() => TaskUserWhereInputSchema).optional(),
  some: z.lazy(() => TaskUserWhereInputSchema).optional(),
  none: z.lazy(() => TaskUserWhereInputSchema).optional()
}).strict();

export const TicketListRelationFilterSchema: z.ZodType<Prisma.TicketListRelationFilter> = z.object({
  every: z.lazy(() => TicketWhereInputSchema).optional(),
  some: z.lazy(() => TicketWhereInputSchema).optional(),
  none: z.lazy(() => TicketWhereInputSchema).optional()
}).strict();

export const TicketCollaboratorListRelationFilterSchema: z.ZodType<Prisma.TicketCollaboratorListRelationFilter> = z.object({
  every: z.lazy(() => TicketCollaboratorWhereInputSchema).optional(),
  some: z.lazy(() => TicketCollaboratorWhereInputSchema).optional(),
  none: z.lazy(() => TicketCollaboratorWhereInputSchema).optional()
}).strict();

export const TicketThreadListRelationFilterSchema: z.ZodType<Prisma.TicketThreadListRelationFilter> = z.object({
  every: z.lazy(() => TicketThreadWhereInputSchema).optional(),
  some: z.lazy(() => TicketThreadWhereInputSchema).optional(),
  none: z.lazy(() => TicketThreadWhereInputSchema).optional()
}).strict();

export const TicketUserListRelationFilterSchema: z.ZodType<Prisma.TicketUserListRelationFilter> = z.object({
  every: z.lazy(() => TicketUserWhereInputSchema).optional(),
  some: z.lazy(() => TicketUserWhereInputSchema).optional(),
  none: z.lazy(() => TicketUserWhereInputSchema).optional()
}).strict();

export const UserDepartmentListRelationFilterSchema: z.ZodType<Prisma.UserDepartmentListRelationFilter> = z.object({
  every: z.lazy(() => UserDepartmentWhereInputSchema).optional(),
  some: z.lazy(() => UserDepartmentWhereInputSchema).optional(),
  none: z.lazy(() => UserDepartmentWhereInputSchema).optional()
}).strict();

export const DepartmentListRelationFilterSchema: z.ZodType<Prisma.DepartmentListRelationFilter> = z.object({
  every: z.lazy(() => DepartmentWhereInputSchema).optional(),
  some: z.lazy(() => DepartmentWhereInputSchema).optional(),
  none: z.lazy(() => DepartmentWhereInputSchema).optional()
}).strict();

export const InstitutionListRelationFilterSchema: z.ZodType<Prisma.InstitutionListRelationFilter> = z.object({
  every: z.lazy(() => InstitutionWhereInputSchema).optional(),
  some: z.lazy(() => InstitutionWhereInputSchema).optional(),
  none: z.lazy(() => InstitutionWhereInputSchema).optional()
}).strict();

export const UserOnDocumentsListRelationFilterSchema: z.ZodType<Prisma.UserOnDocumentsListRelationFilter> = z.object({
  every: z.lazy(() => UserOnDocumentsWhereInputSchema).optional(),
  some: z.lazy(() => UserOnDocumentsWhereInputSchema).optional(),
  none: z.lazy(() => UserOnDocumentsWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const AuditLogOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AuditLogOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DigitalCertificateOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DigitalCertificateOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentUserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DocumentUserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentVersionCreatorOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DocumentVersionCreatorOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NotificationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.NotificationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SharedDocumentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SharedDocumentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaskOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskUserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaskUserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TicketOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketCollaboratorOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TicketCollaboratorOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketThreadOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TicketThreadOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketUserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TicketUserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserDepartmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserDepartmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DepartmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DepartmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InstitutionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InstitutionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserOnDocumentsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOnDocumentsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserOrderByRelevanceInputSchema: z.ZodType<Prisma.UserOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => UserOrderByRelevanceFieldEnumSchema),z.lazy(() => UserOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  apiUserId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  phoneNumber: z.lazy(() => SortOrderSchema).optional(),
  jobTitle: z.lazy(() => SortOrderSchema).optional(),
  profilePhoto: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  apiUserId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  phoneNumber: z.lazy(() => SortOrderSchema).optional(),
  jobTitle: z.lazy(() => SortOrderSchema).optional(),
  profilePhoto: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  apiUserId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  phoneNumber: z.lazy(() => SortOrderSchema).optional(),
  jobTitle: z.lazy(() => SortOrderSchema).optional(),
  profilePhoto: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UuidWithAggregatesFilterSchema: z.ZodType<Prisma.UuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  search: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AttachmentListRelationFilterSchema: z.ZodType<Prisma.AttachmentListRelationFilter> = z.object({
  every: z.lazy(() => AttachmentWhereInputSchema).optional(),
  some: z.lazy(() => AttachmentWhereInputSchema).optional(),
  none: z.lazy(() => AttachmentWhereInputSchema).optional()
}).strict();

export const DocumentVersionListRelationFilterSchema: z.ZodType<Prisma.DocumentVersionListRelationFilter> = z.object({
  every: z.lazy(() => DocumentVersionWhereInputSchema).optional(),
  some: z.lazy(() => DocumentVersionWhereInputSchema).optional(),
  none: z.lazy(() => DocumentVersionWhereInputSchema).optional()
}).strict();

export const FileMetadataNullableRelationFilterSchema: z.ZodType<Prisma.FileMetadataNullableRelationFilter> = z.object({
  is: z.lazy(() => FileMetadataWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => FileMetadataWhereInputSchema).optional().nullable()
}).strict();

export const AttachmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AttachmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentVersionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DocumentVersionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentOrderByRelevanceInputSchema: z.ZodType<Prisma.DocumentOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => DocumentOrderByRelevanceFieldEnumSchema),z.lazy(() => DocumentOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const DocumentCountOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  keywords: z.lazy(() => SortOrderSchema).optional(),
  ocrText: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional(),
  signed: z.lazy(() => SortOrderSchema).optional(),
  signedAt: z.lazy(() => SortOrderSchema).optional(),
  signature: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  ocrText: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional(),
  signed: z.lazy(() => SortOrderSchema).optional(),
  signedAt: z.lazy(() => SortOrderSchema).optional(),
  signature: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentMinOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  ocrText: z.lazy(() => SortOrderSchema).optional(),
  ownerId: z.lazy(() => SortOrderSchema).optional(),
  signed: z.lazy(() => SortOrderSchema).optional(),
  signedAt: z.lazy(() => SortOrderSchema).optional(),
  signature: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const DocumentRelationFilterSchema: z.ZodType<Prisma.DocumentRelationFilter> = z.object({
  is: z.lazy(() => DocumentWhereInputSchema).optional(),
  isNot: z.lazy(() => DocumentWhereInputSchema).optional()
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserOnDocumentsOrderByRelevanceInputSchema: z.ZodType<Prisma.UserOnDocumentsOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => UserOnDocumentsOrderByRelevanceFieldEnumSchema),z.lazy(() => UserOnDocumentsOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const UserOnDocumentsUserIdDocumentIdCompoundUniqueInputSchema: z.ZodType<Prisma.UserOnDocumentsUserIdDocumentIdCompoundUniqueInput> = z.object({
  userId: z.string(),
  documentId: z.string()
}).strict();

export const UserOnDocumentsCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserOnDocumentsCountOrderByAggregateInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  assignedAt: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserOnDocumentsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserOnDocumentsMaxOrderByAggregateInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  assignedAt: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserOnDocumentsMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserOnDocumentsMinOrderByAggregateInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  assignedAt: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentUserOrderByRelevanceInputSchema: z.ZodType<Prisma.DocumentUserOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => DocumentUserOrderByRelevanceFieldEnumSchema),z.lazy(() => DocumentUserOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const DocumentUserCountOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentUserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentUserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentUserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentUserMinOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentUserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const DocumentVersionOrderByRelevanceInputSchema: z.ZodType<Prisma.DocumentVersionOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => DocumentVersionOrderByRelevanceFieldEnumSchema),z.lazy(() => DocumentVersionOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const DocumentVersionCountOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentVersionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  changesDescription: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentVersionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentVersionAvgOrderByAggregateInput> = z.object({
  versionNumber: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentVersionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentVersionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  changesDescription: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentVersionMinOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentVersionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  changesDescription: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentVersionSumOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentVersionSumOrderByAggregateInput> = z.object({
  versionNumber: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const DocumentVersionRelationFilterSchema: z.ZodType<Prisma.DocumentVersionRelationFilter> = z.object({
  is: z.lazy(() => DocumentVersionWhereInputSchema).optional(),
  isNot: z.lazy(() => DocumentVersionWhereInputSchema).optional()
}).strict();

export const DocumentVersionCreatorOrderByRelevanceInputSchema: z.ZodType<Prisma.DocumentVersionCreatorOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => DocumentVersionCreatorOrderByRelevanceFieldEnumSchema),z.lazy(() => DocumentVersionCreatorOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const DocumentVersionCreatorCountOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentVersionCreatorCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  versionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentVersionCreatorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentVersionCreatorMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  versionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentVersionCreatorMinOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentVersionCreatorMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  versionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SharedDocumentOrderByRelevanceInputSchema: z.ZodType<Prisma.SharedDocumentOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => SharedDocumentOrderByRelevanceFieldEnumSchema),z.lazy(() => SharedDocumentOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const SharedDocumentCountOrderByAggregateInputSchema: z.ZodType<Prisma.SharedDocumentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  sharedAt: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SharedDocumentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SharedDocumentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  sharedAt: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SharedDocumentMinOrderByAggregateInputSchema: z.ZodType<Prisma.SharedDocumentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  sharedAt: z.lazy(() => SortOrderSchema).optional(),
  permission: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WorkflowOrderByRelevanceInputSchema: z.ZodType<Prisma.WorkflowOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => WorkflowOrderByRelevanceFieldEnumSchema),z.lazy(() => WorkflowOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const WorkflowCountOrderByAggregateInputSchema: z.ZodType<Prisma.WorkflowCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WorkflowMaxOrderByAggregateInputSchema: z.ZodType<Prisma.WorkflowMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WorkflowMinOrderByAggregateInputSchema: z.ZodType<Prisma.WorkflowMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UuidNullableFilterSchema: z.ZodType<Prisma.UuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  search: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UserNullableRelationFilterSchema: z.ZodType<Prisma.UserNullableRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const DocumentNullableRelationFilterSchema: z.ZodType<Prisma.DocumentNullableRelationFilter> = z.object({
  is: z.lazy(() => DocumentWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => DocumentWhereInputSchema).optional().nullable()
}).strict();

export const WorkflowRelationFilterSchema: z.ZodType<Prisma.WorkflowRelationFilter> = z.object({
  is: z.lazy(() => WorkflowWhereInputSchema).optional(),
  isNot: z.lazy(() => WorkflowWhereInputSchema).optional()
}).strict();

export const TaskOrderByRelevanceInputSchema: z.ZodType<Prisma.TaskOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TaskOrderByRelevanceFieldEnumSchema),z.lazy(() => TaskOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TaskCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaskCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaskMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaskMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.UuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  search: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const TaskNullableRelationFilterSchema: z.ZodType<Prisma.TaskNullableRelationFilter> = z.object({
  is: z.lazy(() => TaskWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TaskWhereInputSchema).optional().nullable()
}).strict();

export const WorkflowNullableRelationFilterSchema: z.ZodType<Prisma.WorkflowNullableRelationFilter> = z.object({
  is: z.lazy(() => WorkflowWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => WorkflowWhereInputSchema).optional().nullable()
}).strict();

export const AuditLogOrderByRelevanceInputSchema: z.ZodType<Prisma.AuditLogOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => AuditLogOrderByRelevanceFieldEnumSchema),z.lazy(() => AuditLogOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const AuditLogCountOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  performedById: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  performedById: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogMinOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  workflowId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  performedById: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NotificationOrderByRelevanceInputSchema: z.ZodType<Prisma.NotificationOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => NotificationOrderByRelevanceFieldEnumSchema),z.lazy(() => NotificationOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const NotificationCountOrderByAggregateInputSchema: z.ZodType<Prisma.NotificationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NotificationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.NotificationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NotificationMinOrderByAggregateInputSchema: z.ZodType<Prisma.NotificationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentOrderByRelevanceInputSchema: z.ZodType<Prisma.AttachmentOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => AttachmentOrderByRelevanceFieldEnumSchema),z.lazy(() => AttachmentOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const AttachmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.AttachmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AttachmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AttachmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.AttachmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DigitalCertificateOrderByRelevanceInputSchema: z.ZodType<Prisma.DigitalCertificateOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => DigitalCertificateOrderByRelevanceFieldEnumSchema),z.lazy(() => DigitalCertificateOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const DigitalCertificateCountOrderByAggregateInputSchema: z.ZodType<Prisma.DigitalCertificateCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  alias: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  expiration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DigitalCertificateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DigitalCertificateMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  alias: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  expiration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DigitalCertificateMinOrderByAggregateInputSchema: z.ZodType<Prisma.DigitalCertificateMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  alias: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  expiration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileMetadataOrderByRelevanceInputSchema: z.ZodType<Prisma.FileMetadataOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => FileMetadataOrderByRelevanceFieldEnumSchema),z.lazy(() => FileMetadataOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const FileMetadataCountOrderByAggregateInputSchema: z.ZodType<Prisma.FileMetadataCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  checksum: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileMetadataAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FileMetadataAvgOrderByAggregateInput> = z.object({
  fileSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileMetadataMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FileMetadataMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  checksum: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileMetadataMinOrderByAggregateInputSchema: z.ZodType<Prisma.FileMetadataMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  documentId: z.lazy(() => SortOrderSchema).optional(),
  fileSize: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  checksum: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FileMetadataSumOrderByAggregateInputSchema: z.ZodType<Prisma.FileMetadataSumOrderByAggregateInput> = z.object({
  fileSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InstitutionOrderByRelevanceInputSchema: z.ZodType<Prisma.InstitutionOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => InstitutionOrderByRelevanceFieldEnumSchema),z.lazy(() => InstitutionOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const InstitutionCountOrderByAggregateInputSchema: z.ZodType<Prisma.InstitutionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  flag: z.lazy(() => SortOrderSchema).optional(),
  emblem: z.lazy(() => SortOrderSchema).optional(),
  mayorId: z.lazy(() => SortOrderSchema).optional(),
  viceMayorId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InstitutionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InstitutionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  flag: z.lazy(() => SortOrderSchema).optional(),
  emblem: z.lazy(() => SortOrderSchema).optional(),
  mayorId: z.lazy(() => SortOrderSchema).optional(),
  viceMayorId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InstitutionMinOrderByAggregateInputSchema: z.ZodType<Prisma.InstitutionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  flag: z.lazy(() => SortOrderSchema).optional(),
  emblem: z.lazy(() => SortOrderSchema).optional(),
  mayorId: z.lazy(() => SortOrderSchema).optional(),
  viceMayorId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const InstitutionRelationFilterSchema: z.ZodType<Prisma.InstitutionRelationFilter> = z.object({
  is: z.lazy(() => InstitutionWhereInputSchema).optional(),
  isNot: z.lazy(() => InstitutionWhereInputSchema).optional()
}).strict();

export const DepartmentNullableRelationFilterSchema: z.ZodType<Prisma.DepartmentNullableRelationFilter> = z.object({
  is: z.lazy(() => DepartmentWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => DepartmentWhereInputSchema).optional().nullable()
}).strict();

export const HelpTopicListRelationFilterSchema: z.ZodType<Prisma.HelpTopicListRelationFilter> = z.object({
  every: z.lazy(() => HelpTopicWhereInputSchema).optional(),
  some: z.lazy(() => HelpTopicWhereInputSchema).optional(),
  none: z.lazy(() => HelpTopicWhereInputSchema).optional()
}).strict();

export const HelpTopicOrderByRelationAggregateInputSchema: z.ZodType<Prisma.HelpTopicOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DepartmentOrderByRelevanceInputSchema: z.ZodType<Prisma.DepartmentOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => DepartmentOrderByRelevanceFieldEnumSchema),z.lazy(() => DepartmentOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const DepartmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.DepartmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isSecretariat: z.lazy(() => SortOrderSchema).optional(),
  institutionId: z.lazy(() => SortOrderSchema).optional(),
  parentDepartmentId: z.lazy(() => SortOrderSchema).optional(),
  headId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DepartmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.DepartmentAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  parentDepartmentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DepartmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DepartmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isSecretariat: z.lazy(() => SortOrderSchema).optional(),
  institutionId: z.lazy(() => SortOrderSchema).optional(),
  parentDepartmentId: z.lazy(() => SortOrderSchema).optional(),
  headId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DepartmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.DepartmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isSecretariat: z.lazy(() => SortOrderSchema).optional(),
  institutionId: z.lazy(() => SortOrderSchema).optional(),
  parentDepartmentId: z.lazy(() => SortOrderSchema).optional(),
  headId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DepartmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.DepartmentSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  parentDepartmentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const DepartmentRelationFilterSchema: z.ZodType<Prisma.DepartmentRelationFilter> = z.object({
  is: z.lazy(() => DepartmentWhereInputSchema).optional(),
  isNot: z.lazy(() => DepartmentWhereInputSchema).optional()
}).strict();

export const UserDepartmentOrderByRelevanceInputSchema: z.ZodType<Prisma.UserDepartmentOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => UserDepartmentOrderByRelevanceFieldEnumSchema),z.lazy(() => UserDepartmentOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const UserDepartmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserDepartmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserDepartmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserDepartmentAvgOrderByAggregateInput> = z.object({
  departmentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserDepartmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserDepartmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserDepartmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserDepartmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserDepartmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserDepartmentSumOrderByAggregateInput> = z.object({
  departmentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const HelpTopicRelationFilterSchema: z.ZodType<Prisma.HelpTopicRelationFilter> = z.object({
  is: z.lazy(() => HelpTopicWhereInputSchema).optional(),
  isNot: z.lazy(() => HelpTopicWhereInputSchema).optional()
}).strict();

export const TicketPriorityRelationFilterSchema: z.ZodType<Prisma.TicketPriorityRelationFilter> = z.object({
  is: z.lazy(() => TicketPriorityWhereInputSchema).optional(),
  isNot: z.lazy(() => TicketPriorityWhereInputSchema).optional()
}).strict();

export const SLAPlanNullableRelationFilterSchema: z.ZodType<Prisma.SLAPlanNullableRelationFilter> = z.object({
  is: z.lazy(() => SLAPlanWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SLAPlanWhereInputSchema).optional().nullable()
}).strict();

export const TicketStatusRelationFilterSchema: z.ZodType<Prisma.TicketStatusRelationFilter> = z.object({
  is: z.lazy(() => TicketStatusWhereInputSchema).optional(),
  isNot: z.lazy(() => TicketStatusWhereInputSchema).optional()
}).strict();

export const TicketAttachmentListRelationFilterSchema: z.ZodType<Prisma.TicketAttachmentListRelationFilter> = z.object({
  every: z.lazy(() => TicketAttachmentWhereInputSchema).optional(),
  some: z.lazy(() => TicketAttachmentWhereInputSchema).optional(),
  none: z.lazy(() => TicketAttachmentWhereInputSchema).optional()
}).strict();

export const TicketCustomFieldListRelationFilterSchema: z.ZodType<Prisma.TicketCustomFieldListRelationFilter> = z.object({
  every: z.lazy(() => TicketCustomFieldWhereInputSchema).optional(),
  some: z.lazy(() => TicketCustomFieldWhereInputSchema).optional(),
  none: z.lazy(() => TicketCustomFieldWhereInputSchema).optional()
}).strict();

export const TicketThreadNullableRelationFilterSchema: z.ZodType<Prisma.TicketThreadNullableRelationFilter> = z.object({
  is: z.lazy(() => TicketThreadWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TicketThreadWhereInputSchema).optional().nullable()
}).strict();

export const TicketAttachmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TicketAttachmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketCustomFieldOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TicketCustomFieldOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketOrderByRelevanceInputSchema: z.ZodType<Prisma.TicketOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TicketOrderByRelevanceFieldEnumSchema),z.lazy(() => TicketOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TicketCountOrderByAggregateInputSchema: z.ZodType<Prisma.TicketCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  statusId: z.lazy(() => SortOrderSchema).optional(),
  priorityId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  helpTopicId: z.lazy(() => SortOrderSchema).optional(),
  slaPlanId: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  closedAt: z.lazy(() => SortOrderSchema).optional(),
  lastResponseAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TicketAvgOrderByAggregateInput> = z.object({
  statusId: z.lazy(() => SortOrderSchema).optional(),
  priorityId: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  helpTopicId: z.lazy(() => SortOrderSchema).optional(),
  slaPlanId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TicketMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  statusId: z.lazy(() => SortOrderSchema).optional(),
  priorityId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  helpTopicId: z.lazy(() => SortOrderSchema).optional(),
  slaPlanId: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  closedAt: z.lazy(() => SortOrderSchema).optional(),
  lastResponseAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketMinOrderByAggregateInputSchema: z.ZodType<Prisma.TicketMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  subject: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  statusId: z.lazy(() => SortOrderSchema).optional(),
  priorityId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  helpTopicId: z.lazy(() => SortOrderSchema).optional(),
  slaPlanId: z.lazy(() => SortOrderSchema).optional(),
  dueDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  closedAt: z.lazy(() => SortOrderSchema).optional(),
  lastResponseAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketSumOrderByAggregateInputSchema: z.ZodType<Prisma.TicketSumOrderByAggregateInput> = z.object({
  statusId: z.lazy(() => SortOrderSchema).optional(),
  priorityId: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  helpTopicId: z.lazy(() => SortOrderSchema).optional(),
  slaPlanId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketStatusOrderByRelevanceInputSchema: z.ZodType<Prisma.TicketStatusOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TicketStatusOrderByRelevanceFieldEnumSchema),z.lazy(() => TicketStatusOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TicketStatusCountOrderByAggregateInputSchema: z.ZodType<Prisma.TicketStatusCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketStatusAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TicketStatusAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketStatusMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TicketStatusMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketStatusMinOrderByAggregateInputSchema: z.ZodType<Prisma.TicketStatusMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketStatusSumOrderByAggregateInputSchema: z.ZodType<Prisma.TicketStatusSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketPriorityOrderByRelevanceInputSchema: z.ZodType<Prisma.TicketPriorityOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TicketPriorityOrderByRelevanceFieldEnumSchema),z.lazy(() => TicketPriorityOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TicketPriorityCountOrderByAggregateInputSchema: z.ZodType<Prisma.TicketPriorityCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketPriorityAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TicketPriorityAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketPriorityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TicketPriorityMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketPriorityMinOrderByAggregateInputSchema: z.ZodType<Prisma.TicketPriorityMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketPrioritySumOrderByAggregateInputSchema: z.ZodType<Prisma.TicketPrioritySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const HelpTopicOrderByRelevanceInputSchema: z.ZodType<Prisma.HelpTopicOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => HelpTopicOrderByRelevanceFieldEnumSchema),z.lazy(() => HelpTopicOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const HelpTopicCountOrderByAggregateInputSchema: z.ZodType<Prisma.HelpTopicCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  topic: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const HelpTopicAvgOrderByAggregateInputSchema: z.ZodType<Prisma.HelpTopicAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const HelpTopicMaxOrderByAggregateInputSchema: z.ZodType<Prisma.HelpTopicMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  topic: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const HelpTopicMinOrderByAggregateInputSchema: z.ZodType<Prisma.HelpTopicMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  topic: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const HelpTopicSumOrderByAggregateInputSchema: z.ZodType<Prisma.HelpTopicSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  departmentId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SLAPlanOrderByRelevanceInputSchema: z.ZodType<Prisma.SLAPlanOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => SLAPlanOrderByRelevanceFieldEnumSchema),z.lazy(() => SLAPlanOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const SLAPlanCountOrderByAggregateInputSchema: z.ZodType<Prisma.SLAPlanCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  gracePeriod: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SLAPlanAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SLAPlanAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  gracePeriod: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SLAPlanMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SLAPlanMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  gracePeriod: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SLAPlanMinOrderByAggregateInputSchema: z.ZodType<Prisma.SLAPlanMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  gracePeriod: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SLAPlanSumOrderByAggregateInputSchema: z.ZodType<Prisma.SLAPlanSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  gracePeriod: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketRelationFilterSchema: z.ZodType<Prisma.TicketRelationFilter> = z.object({
  is: z.lazy(() => TicketWhereInputSchema).optional(),
  isNot: z.lazy(() => TicketWhereInputSchema).optional()
}).strict();

export const TicketThreadOrderByRelevanceInputSchema: z.ZodType<Prisma.TicketThreadOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TicketThreadOrderByRelevanceFieldEnumSchema),z.lazy(() => TicketThreadOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TicketThreadCountOrderByAggregateInputSchema: z.ZodType<Prisma.TicketThreadCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketThreadMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TicketThreadMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketThreadMinOrderByAggregateInputSchema: z.ZodType<Prisma.TicketThreadMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketThreadRelationFilterSchema: z.ZodType<Prisma.TicketThreadRelationFilter> = z.object({
  is: z.lazy(() => TicketThreadWhereInputSchema).optional(),
  isNot: z.lazy(() => TicketThreadWhereInputSchema).optional()
}).strict();

export const TicketAttachmentOrderByRelevanceInputSchema: z.ZodType<Prisma.TicketAttachmentOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TicketAttachmentOrderByRelevanceFieldEnumSchema),z.lazy(() => TicketAttachmentOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TicketAttachmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.TicketAttachmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  ticketThreadId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketAttachmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TicketAttachmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  ticketThreadId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketAttachmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.TicketAttachmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  ticketThreadId: z.lazy(() => SortOrderSchema).optional(),
  filePath: z.lazy(() => SortOrderSchema).optional(),
  fileName: z.lazy(() => SortOrderSchema).optional(),
  mimeType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketCollaboratorOrderByRelevanceInputSchema: z.ZodType<Prisma.TicketCollaboratorOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TicketCollaboratorOrderByRelevanceFieldEnumSchema),z.lazy(() => TicketCollaboratorOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TicketCollaboratorCountOrderByAggregateInputSchema: z.ZodType<Prisma.TicketCollaboratorCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketCollaboratorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TicketCollaboratorMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketCollaboratorMinOrderByAggregateInputSchema: z.ZodType<Prisma.TicketCollaboratorMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomFieldOrderByRelevanceInputSchema: z.ZodType<Prisma.CustomFieldOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => CustomFieldOrderByRelevanceFieldEnumSchema),z.lazy(() => CustomFieldOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const CustomFieldCountOrderByAggregateInputSchema: z.ZodType<Prisma.CustomFieldCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  fieldType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomFieldAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CustomFieldAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomFieldMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CustomFieldMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  fieldType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomFieldMinOrderByAggregateInputSchema: z.ZodType<Prisma.CustomFieldMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  fieldType: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomFieldSumOrderByAggregateInputSchema: z.ZodType<Prisma.CustomFieldSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomFieldRelationFilterSchema: z.ZodType<Prisma.CustomFieldRelationFilter> = z.object({
  is: z.lazy(() => CustomFieldWhereInputSchema).optional(),
  isNot: z.lazy(() => CustomFieldWhereInputSchema).optional()
}).strict();

export const TicketCustomFieldOrderByRelevanceInputSchema: z.ZodType<Prisma.TicketCustomFieldOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TicketCustomFieldOrderByRelevanceFieldEnumSchema),z.lazy(() => TicketCustomFieldOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TicketCustomFieldCountOrderByAggregateInputSchema: z.ZodType<Prisma.TicketCustomFieldCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  fieldId: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketCustomFieldAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TicketCustomFieldAvgOrderByAggregateInput> = z.object({
  fieldId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketCustomFieldMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TicketCustomFieldMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  fieldId: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketCustomFieldMinOrderByAggregateInputSchema: z.ZodType<Prisma.TicketCustomFieldMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  fieldId: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketCustomFieldSumOrderByAggregateInputSchema: z.ZodType<Prisma.TicketCustomFieldSumOrderByAggregateInput> = z.object({
  fieldId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskRelationFilterSchema: z.ZodType<Prisma.TaskRelationFilter> = z.object({
  is: z.lazy(() => TaskWhereInputSchema).optional(),
  isNot: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const TaskUserOrderByRelevanceInputSchema: z.ZodType<Prisma.TaskUserOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TaskUserOrderByRelevanceFieldEnumSchema),z.lazy(() => TaskUserOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TaskUserCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaskUserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskUserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaskUserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaskUserMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaskUserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  taskId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketUserOrderByRelevanceInputSchema: z.ZodType<Prisma.TicketUserOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => TicketUserOrderByRelevanceFieldEnumSchema),z.lazy(() => TicketUserOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const TicketUserCountOrderByAggregateInputSchema: z.ZodType<Prisma.TicketUserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketUserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TicketUserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TicketUserMinOrderByAggregateInputSchema: z.ZodType<Prisma.TicketUserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ticketId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Back3nd_password_resetListRelationFilterSchema: z.ZodType<Prisma.Back3nd_password_resetListRelationFilter> = z.object({
  every: z.lazy(() => back3nd_password_resetWhereInputSchema).optional(),
  some: z.lazy(() => back3nd_password_resetWhereInputSchema).optional(),
  none: z.lazy(() => back3nd_password_resetWhereInputSchema).optional()
}).strict();

export const Back3nd_user_roleListRelationFilterSchema: z.ZodType<Prisma.Back3nd_user_roleListRelationFilter> = z.object({
  every: z.lazy(() => back3nd_user_roleWhereInputSchema).optional(),
  some: z.lazy(() => back3nd_user_roleWhereInputSchema).optional(),
  none: z.lazy(() => back3nd_user_roleWhereInputSchema).optional()
}).strict();

export const back3nd_password_resetOrderByRelationAggregateInputSchema: z.ZodType<Prisma.back3nd_password_resetOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_user_roleOrderByRelationAggregateInputSchema: z.ZodType<Prisma.back3nd_user_roleOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_userOrderByRelevanceInputSchema: z.ZodType<Prisma.back3nd_userOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => back3nd_userOrderByRelevanceFieldEnumSchema),z.lazy(() => back3nd_userOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const back3nd_userCountOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_userCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  reset_token: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_userMaxOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_userMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  reset_token: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_userMinOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_userMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  reset_token: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Back3nd_permissionListRelationFilterSchema: z.ZodType<Prisma.Back3nd_permissionListRelationFilter> = z.object({
  every: z.lazy(() => back3nd_permissionWhereInputSchema).optional(),
  some: z.lazy(() => back3nd_permissionWhereInputSchema).optional(),
  none: z.lazy(() => back3nd_permissionWhereInputSchema).optional()
}).strict();

export const back3nd_permissionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.back3nd_permissionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_roleOrderByRelevanceInputSchema: z.ZodType<Prisma.back3nd_roleOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => back3nd_roleOrderByRelevanceFieldEnumSchema),z.lazy(() => back3nd_roleOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const back3nd_roleCountOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_roleCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_roleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_roleMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_roleMinOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_roleMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Back3nd_roleRelationFilterSchema: z.ZodType<Prisma.Back3nd_roleRelationFilter> = z.object({
  is: z.lazy(() => back3nd_roleWhereInputSchema).optional(),
  isNot: z.lazy(() => back3nd_roleWhereInputSchema).optional()
}).strict();

export const Back3nd_userRelationFilterSchema: z.ZodType<Prisma.Back3nd_userRelationFilter> = z.object({
  is: z.lazy(() => back3nd_userWhereInputSchema).optional(),
  isNot: z.lazy(() => back3nd_userWhereInputSchema).optional()
}).strict();

export const back3nd_user_roleOrderByRelevanceInputSchema: z.ZodType<Prisma.back3nd_user_roleOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => back3nd_user_roleOrderByRelevanceFieldEnumSchema),z.lazy(() => back3nd_user_roleOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const back3nd_user_roleUser_idRole_idCompoundUniqueInputSchema: z.ZodType<Prisma.back3nd_user_roleUser_idRole_idCompoundUniqueInput> = z.object({
  user_id: z.string(),
  role_id: z.string()
}).strict();

export const back3nd_user_roleCountOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_user_roleCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_user_roleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_user_roleMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_user_roleMinOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_user_roleMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_permissionOrderByRelevanceInputSchema: z.ZodType<Prisma.back3nd_permissionOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => back3nd_permissionOrderByRelevanceFieldEnumSchema),z.lazy(() => back3nd_permissionOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const back3nd_permissionRole_idCollectionCompoundUniqueInputSchema: z.ZodType<Prisma.back3nd_permissionRole_idCollectionCompoundUniqueInput> = z.object({
  role_id: z.string(),
  collection: z.string()
}).strict();

export const back3nd_permissionCountOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_permissionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  can_create: z.lazy(() => SortOrderSchema).optional(),
  can_read: z.lazy(() => SortOrderSchema).optional(),
  can_update: z.lazy(() => SortOrderSchema).optional(),
  can_delete: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  collection: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_permissionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_permissionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  can_create: z.lazy(() => SortOrderSchema).optional(),
  can_read: z.lazy(() => SortOrderSchema).optional(),
  can_update: z.lazy(() => SortOrderSchema).optional(),
  can_delete: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  collection: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_permissionMinOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_permissionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  can_create: z.lazy(() => SortOrderSchema).optional(),
  can_read: z.lazy(() => SortOrderSchema).optional(),
  can_update: z.lazy(() => SortOrderSchema).optional(),
  can_delete: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  collection: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_password_resetOrderByRelevanceInputSchema: z.ZodType<Prisma.back3nd_password_resetOrderByRelevanceInput> = z.object({
  fields: z.union([ z.lazy(() => back3nd_password_resetOrderByRelevanceFieldEnumSchema),z.lazy(() => back3nd_password_resetOrderByRelevanceFieldEnumSchema).array() ]),
  sort: z.lazy(() => SortOrderSchema),
  search: z.string()
}).strict();

export const back3nd_password_resetCountOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_password_resetCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_password_resetMaxOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_password_resetMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const back3nd_password_resetMinOrderByAggregateInputSchema: z.ZodType<Prisma.back3nd_password_resetMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogCreateNestedManyWithoutPerformedByInputSchema: z.ZodType<Prisma.AuditLogCreateNestedManyWithoutPerformedByInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutPerformedByInputSchema),z.lazy(() => AuditLogCreateWithoutPerformedByInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutPerformedByInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutPerformedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutPerformedByInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutPerformedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyPerformedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DigitalCertificateCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DigitalCertificateCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DigitalCertificateCreateWithoutUserInputSchema),z.lazy(() => DigitalCertificateCreateWithoutUserInputSchema).array(),z.lazy(() => DigitalCertificateUncheckedCreateWithoutUserInputSchema),z.lazy(() => DigitalCertificateUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DigitalCertificateCreateOrConnectWithoutUserInputSchema),z.lazy(() => DigitalCertificateCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DigitalCertificateCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DigitalCertificateWhereUniqueInputSchema),z.lazy(() => DigitalCertificateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DocumentUserCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DocumentUserCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutUserInputSchema),z.lazy(() => DocumentUserCreateWithoutUserInputSchema).array(),z.lazy(() => DocumentUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => DocumentUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentUserCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorCreateWithoutUserInputSchema).array(),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreatorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NotificationCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.NotificationCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => NotificationCreateWithoutUserInputSchema),z.lazy(() => NotificationCreateWithoutUserInputSchema).array(),z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema),z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema),z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NotificationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => NotificationWhereUniqueInputSchema),z.lazy(() => NotificationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SharedDocumentCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SharedDocumentCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutUserInputSchema),z.lazy(() => SharedDocumentCreateWithoutUserInputSchema).array(),z.lazy(() => SharedDocumentUncheckedCreateWithoutUserInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SharedDocumentCreateOrConnectWithoutUserInputSchema),z.lazy(() => SharedDocumentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SharedDocumentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskCreateNestedManyWithoutAssignedToInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutAssignedToInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutAssignedToInputSchema),z.lazy(() => TaskCreateWithoutAssignedToInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => TaskCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUserCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskUserCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskUserCreateWithoutUserInputSchema),z.lazy(() => TaskUserCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskUserCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCreateNestedManyWithoutAssignedToInputSchema: z.ZodType<Prisma.TicketCreateNestedManyWithoutAssignedToInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutAssignedToInputSchema),z.lazy(() => TicketCreateWithoutAssignedToInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => TicketUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => TicketCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.TicketCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutCreatedByInputSchema),z.lazy(() => TicketCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TicketCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCollaboratorCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TicketCollaboratorCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorCreateWithoutUserInputSchema).array(),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCollaboratorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketCollaboratorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCollaboratorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketThreadCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TicketThreadCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutUserInputSchema),z.lazy(() => TicketThreadCreateWithoutUserInputSchema).array(),z.lazy(() => TicketThreadUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketThreadCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketThreadCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketThreadCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketThreadWhereUniqueInputSchema),z.lazy(() => TicketThreadWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUserCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TicketUserCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TicketUserCreateWithoutUserInputSchema),z.lazy(() => TicketUserCreateWithoutUserInputSchema).array(),z.lazy(() => TicketUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketUserCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserDepartmentCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserDepartmentCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutUserInputSchema),z.lazy(() => UserDepartmentCreateWithoutUserInputSchema).array(),z.lazy(() => UserDepartmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserDepartmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserDepartmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserDepartmentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DepartmentCreateNestedManyWithoutHeadInputSchema: z.ZodType<Prisma.DepartmentCreateNestedManyWithoutHeadInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutHeadInputSchema),z.lazy(() => DepartmentCreateWithoutHeadInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutHeadInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutHeadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutHeadInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutHeadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyHeadInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InstitutionCreateNestedManyWithoutMayorInputSchema: z.ZodType<Prisma.InstitutionCreateNestedManyWithoutMayorInput> = z.object({
  create: z.union([ z.lazy(() => InstitutionCreateWithoutMayorInputSchema),z.lazy(() => InstitutionCreateWithoutMayorInputSchema).array(),z.lazy(() => InstitutionUncheckedCreateWithoutMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutMayorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InstitutionCreateOrConnectWithoutMayorInputSchema),z.lazy(() => InstitutionCreateOrConnectWithoutMayorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InstitutionCreateManyMayorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InstitutionCreateNestedManyWithoutViceMayorInputSchema: z.ZodType<Prisma.InstitutionCreateNestedManyWithoutViceMayorInput> = z.object({
  create: z.union([ z.lazy(() => InstitutionCreateWithoutViceMayorInputSchema),z.lazy(() => InstitutionCreateWithoutViceMayorInputSchema).array(),z.lazy(() => InstitutionUncheckedCreateWithoutViceMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutViceMayorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InstitutionCreateOrConnectWithoutViceMayorInputSchema),z.lazy(() => InstitutionCreateOrConnectWithoutViceMayorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InstitutionCreateManyViceMayorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserOnDocumentsCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserOnDocumentsCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsCreateWithoutUserInputSchema).array(),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOnDocumentsCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserOnDocumentsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOnDocumentsCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateNestedManyWithoutPerformedByInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutPerformedByInputSchema),z.lazy(() => AuditLogCreateWithoutPerformedByInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutPerformedByInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutPerformedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutPerformedByInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutPerformedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyPerformedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DigitalCertificateUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DigitalCertificateCreateWithoutUserInputSchema),z.lazy(() => DigitalCertificateCreateWithoutUserInputSchema).array(),z.lazy(() => DigitalCertificateUncheckedCreateWithoutUserInputSchema),z.lazy(() => DigitalCertificateUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DigitalCertificateCreateOrConnectWithoutUserInputSchema),z.lazy(() => DigitalCertificateCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DigitalCertificateCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DigitalCertificateWhereUniqueInputSchema),z.lazy(() => DigitalCertificateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DocumentUserUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutUserInputSchema),z.lazy(() => DocumentUserCreateWithoutUserInputSchema).array(),z.lazy(() => DocumentUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => DocumentUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentUserCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorCreateWithoutUserInputSchema).array(),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreatorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NotificationUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.NotificationUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => NotificationCreateWithoutUserInputSchema),z.lazy(() => NotificationCreateWithoutUserInputSchema).array(),z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema),z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema),z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NotificationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => NotificationWhereUniqueInputSchema),z.lazy(() => NotificationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutUserInputSchema),z.lazy(() => SharedDocumentCreateWithoutUserInputSchema).array(),z.lazy(() => SharedDocumentUncheckedCreateWithoutUserInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SharedDocumentCreateOrConnectWithoutUserInputSchema),z.lazy(() => SharedDocumentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SharedDocumentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutAssignedToInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutAssignedToInputSchema),z.lazy(() => TaskCreateWithoutAssignedToInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => TaskCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUserUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TaskUserUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TaskUserCreateWithoutUserInputSchema),z.lazy(() => TaskUserCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskUserCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema: z.ZodType<Prisma.TicketUncheckedCreateNestedManyWithoutAssignedToInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutAssignedToInputSchema),z.lazy(() => TicketCreateWithoutAssignedToInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => TicketUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => TicketCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.TicketUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutCreatedByInputSchema),z.lazy(() => TicketCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TicketCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorCreateWithoutUserInputSchema).array(),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCollaboratorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketCollaboratorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCollaboratorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TicketThreadUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutUserInputSchema),z.lazy(() => TicketThreadCreateWithoutUserInputSchema).array(),z.lazy(() => TicketThreadUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketThreadCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketThreadCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketThreadCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketThreadWhereUniqueInputSchema),z.lazy(() => TicketThreadWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUserUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TicketUserUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TicketUserCreateWithoutUserInputSchema),z.lazy(() => TicketUserCreateWithoutUserInputSchema).array(),z.lazy(() => TicketUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketUserCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutUserInputSchema),z.lazy(() => UserDepartmentCreateWithoutUserInputSchema).array(),z.lazy(() => UserDepartmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserDepartmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserDepartmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserDepartmentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema: z.ZodType<Prisma.DepartmentUncheckedCreateNestedManyWithoutHeadInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutHeadInputSchema),z.lazy(() => DepartmentCreateWithoutHeadInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutHeadInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutHeadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutHeadInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutHeadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyHeadInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema: z.ZodType<Prisma.InstitutionUncheckedCreateNestedManyWithoutMayorInput> = z.object({
  create: z.union([ z.lazy(() => InstitutionCreateWithoutMayorInputSchema),z.lazy(() => InstitutionCreateWithoutMayorInputSchema).array(),z.lazy(() => InstitutionUncheckedCreateWithoutMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutMayorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InstitutionCreateOrConnectWithoutMayorInputSchema),z.lazy(() => InstitutionCreateOrConnectWithoutMayorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InstitutionCreateManyMayorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema: z.ZodType<Prisma.InstitutionUncheckedCreateNestedManyWithoutViceMayorInput> = z.object({
  create: z.union([ z.lazy(() => InstitutionCreateWithoutViceMayorInputSchema),z.lazy(() => InstitutionCreateWithoutViceMayorInputSchema).array(),z.lazy(() => InstitutionUncheckedCreateWithoutViceMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutViceMayorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InstitutionCreateOrConnectWithoutViceMayorInputSchema),z.lazy(() => InstitutionCreateOrConnectWithoutViceMayorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InstitutionCreateManyViceMayorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsCreateWithoutUserInputSchema).array(),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOnDocumentsCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserOnDocumentsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOnDocumentsCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const AuditLogUpdateManyWithoutPerformedByNestedInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithoutPerformedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutPerformedByInputSchema),z.lazy(() => AuditLogCreateWithoutPerformedByInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutPerformedByInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutPerformedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutPerformedByInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutPerformedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutPerformedByInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutPerformedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyPerformedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutPerformedByInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutPerformedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutPerformedByInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutPerformedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DigitalCertificateUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DigitalCertificateUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DigitalCertificateCreateWithoutUserInputSchema),z.lazy(() => DigitalCertificateCreateWithoutUserInputSchema).array(),z.lazy(() => DigitalCertificateUncheckedCreateWithoutUserInputSchema),z.lazy(() => DigitalCertificateUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DigitalCertificateCreateOrConnectWithoutUserInputSchema),z.lazy(() => DigitalCertificateCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DigitalCertificateUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DigitalCertificateUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DigitalCertificateCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DigitalCertificateWhereUniqueInputSchema),z.lazy(() => DigitalCertificateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DigitalCertificateWhereUniqueInputSchema),z.lazy(() => DigitalCertificateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DigitalCertificateWhereUniqueInputSchema),z.lazy(() => DigitalCertificateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DigitalCertificateWhereUniqueInputSchema),z.lazy(() => DigitalCertificateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DigitalCertificateUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DigitalCertificateUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DigitalCertificateUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DigitalCertificateUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DigitalCertificateScalarWhereInputSchema),z.lazy(() => DigitalCertificateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DocumentUserUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DocumentUserUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutUserInputSchema),z.lazy(() => DocumentUserCreateWithoutUserInputSchema).array(),z.lazy(() => DocumentUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => DocumentUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DocumentUserUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DocumentUserUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentUserCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DocumentUserUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DocumentUserUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DocumentUserUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DocumentUserUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DocumentUserScalarWhereInputSchema),z.lazy(() => DocumentUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorCreateWithoutUserInputSchema).array(),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DocumentVersionCreatorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreatorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DocumentVersionCreatorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DocumentVersionCreatorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema),z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NotificationUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.NotificationUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => NotificationCreateWithoutUserInputSchema),z.lazy(() => NotificationCreateWithoutUserInputSchema).array(),z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema),z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema),z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => NotificationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => NotificationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NotificationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => NotificationWhereUniqueInputSchema),z.lazy(() => NotificationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => NotificationWhereUniqueInputSchema),z.lazy(() => NotificationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => NotificationWhereUniqueInputSchema),z.lazy(() => NotificationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => NotificationWhereUniqueInputSchema),z.lazy(() => NotificationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => NotificationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => NotificationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => NotificationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => NotificationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => NotificationScalarWhereInputSchema),z.lazy(() => NotificationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SharedDocumentUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SharedDocumentUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutUserInputSchema),z.lazy(() => SharedDocumentCreateWithoutUserInputSchema).array(),z.lazy(() => SharedDocumentUncheckedCreateWithoutUserInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SharedDocumentCreateOrConnectWithoutUserInputSchema),z.lazy(() => SharedDocumentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SharedDocumentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SharedDocumentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SharedDocumentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SharedDocumentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SharedDocumentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SharedDocumentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SharedDocumentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SharedDocumentScalarWhereInputSchema),z.lazy(() => SharedDocumentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUpdateManyWithoutAssignedToNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutAssignedToNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutAssignedToInputSchema),z.lazy(() => TaskCreateWithoutAssignedToInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => TaskCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutAssignedToInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutAssignedToInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUserUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskUserUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskUserCreateWithoutUserInputSchema),z.lazy(() => TaskUserCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUserUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUserUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskUserCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUserUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUserUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUserUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskUserUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskUserScalarWhereInputSchema),z.lazy(() => TaskUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUpdateManyWithoutAssignedToNestedInputSchema: z.ZodType<Prisma.TicketUpdateManyWithoutAssignedToNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutAssignedToInputSchema),z.lazy(() => TicketCreateWithoutAssignedToInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => TicketUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => TicketCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutAssignedToInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutAssignedToInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.TicketUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutCreatedByInputSchema),z.lazy(() => TicketCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TicketCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketCollaboratorUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TicketCollaboratorUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorCreateWithoutUserInputSchema).array(),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCollaboratorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketCollaboratorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketCollaboratorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCollaboratorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketCollaboratorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketCollaboratorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketCollaboratorScalarWhereInputSchema),z.lazy(() => TicketCollaboratorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketThreadUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TicketThreadUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutUserInputSchema),z.lazy(() => TicketThreadCreateWithoutUserInputSchema).array(),z.lazy(() => TicketThreadUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketThreadCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketThreadCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketThreadUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketThreadUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketThreadCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketThreadWhereUniqueInputSchema),z.lazy(() => TicketThreadWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketThreadWhereUniqueInputSchema),z.lazy(() => TicketThreadWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketThreadWhereUniqueInputSchema),z.lazy(() => TicketThreadWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketThreadWhereUniqueInputSchema),z.lazy(() => TicketThreadWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketThreadUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketThreadUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketThreadUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TicketThreadUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketThreadScalarWhereInputSchema),z.lazy(() => TicketThreadScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUserUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TicketUserUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketUserCreateWithoutUserInputSchema),z.lazy(() => TicketUserCreateWithoutUserInputSchema).array(),z.lazy(() => TicketUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUserUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketUserUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketUserCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUserUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketUserUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUserUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TicketUserUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketUserScalarWhereInputSchema),z.lazy(() => TicketUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserDepartmentUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserDepartmentUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutUserInputSchema),z.lazy(() => UserDepartmentCreateWithoutUserInputSchema).array(),z.lazy(() => UserDepartmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserDepartmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserDepartmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserDepartmentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserDepartmentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserDepartmentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserDepartmentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserDepartmentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserDepartmentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserDepartmentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserDepartmentScalarWhereInputSchema),z.lazy(() => UserDepartmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DepartmentUpdateManyWithoutHeadNestedInputSchema: z.ZodType<Prisma.DepartmentUpdateManyWithoutHeadNestedInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutHeadInputSchema),z.lazy(() => DepartmentCreateWithoutHeadInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutHeadInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutHeadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutHeadInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutHeadInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutHeadInputSchema),z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutHeadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyHeadInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutHeadInputSchema),z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutHeadInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DepartmentUpdateManyWithWhereWithoutHeadInputSchema),z.lazy(() => DepartmentUpdateManyWithWhereWithoutHeadInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DepartmentScalarWhereInputSchema),z.lazy(() => DepartmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InstitutionUpdateManyWithoutMayorNestedInputSchema: z.ZodType<Prisma.InstitutionUpdateManyWithoutMayorNestedInput> = z.object({
  create: z.union([ z.lazy(() => InstitutionCreateWithoutMayorInputSchema),z.lazy(() => InstitutionCreateWithoutMayorInputSchema).array(),z.lazy(() => InstitutionUncheckedCreateWithoutMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutMayorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InstitutionCreateOrConnectWithoutMayorInputSchema),z.lazy(() => InstitutionCreateOrConnectWithoutMayorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InstitutionUpsertWithWhereUniqueWithoutMayorInputSchema),z.lazy(() => InstitutionUpsertWithWhereUniqueWithoutMayorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InstitutionCreateManyMayorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InstitutionUpdateWithWhereUniqueWithoutMayorInputSchema),z.lazy(() => InstitutionUpdateWithWhereUniqueWithoutMayorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InstitutionUpdateManyWithWhereWithoutMayorInputSchema),z.lazy(() => InstitutionUpdateManyWithWhereWithoutMayorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InstitutionScalarWhereInputSchema),z.lazy(() => InstitutionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InstitutionUpdateManyWithoutViceMayorNestedInputSchema: z.ZodType<Prisma.InstitutionUpdateManyWithoutViceMayorNestedInput> = z.object({
  create: z.union([ z.lazy(() => InstitutionCreateWithoutViceMayorInputSchema),z.lazy(() => InstitutionCreateWithoutViceMayorInputSchema).array(),z.lazy(() => InstitutionUncheckedCreateWithoutViceMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutViceMayorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InstitutionCreateOrConnectWithoutViceMayorInputSchema),z.lazy(() => InstitutionCreateOrConnectWithoutViceMayorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InstitutionUpsertWithWhereUniqueWithoutViceMayorInputSchema),z.lazy(() => InstitutionUpsertWithWhereUniqueWithoutViceMayorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InstitutionCreateManyViceMayorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InstitutionUpdateWithWhereUniqueWithoutViceMayorInputSchema),z.lazy(() => InstitutionUpdateWithWhereUniqueWithoutViceMayorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InstitutionUpdateManyWithWhereWithoutViceMayorInputSchema),z.lazy(() => InstitutionUpdateManyWithWhereWithoutViceMayorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InstitutionScalarWhereInputSchema),z.lazy(() => InstitutionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserOnDocumentsUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserOnDocumentsUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsCreateWithoutUserInputSchema).array(),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOnDocumentsCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserOnDocumentsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserOnDocumentsUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOnDocumentsCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserOnDocumentsUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserOnDocumentsUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserOnDocumentsScalarWhereInputSchema),z.lazy(() => UserOnDocumentsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutPerformedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutPerformedByInputSchema),z.lazy(() => AuditLogCreateWithoutPerformedByInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutPerformedByInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutPerformedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutPerformedByInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutPerformedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutPerformedByInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutPerformedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyPerformedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutPerformedByInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutPerformedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutPerformedByInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutPerformedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DigitalCertificateUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DigitalCertificateCreateWithoutUserInputSchema),z.lazy(() => DigitalCertificateCreateWithoutUserInputSchema).array(),z.lazy(() => DigitalCertificateUncheckedCreateWithoutUserInputSchema),z.lazy(() => DigitalCertificateUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DigitalCertificateCreateOrConnectWithoutUserInputSchema),z.lazy(() => DigitalCertificateCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DigitalCertificateUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DigitalCertificateUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DigitalCertificateCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DigitalCertificateWhereUniqueInputSchema),z.lazy(() => DigitalCertificateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DigitalCertificateWhereUniqueInputSchema),z.lazy(() => DigitalCertificateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DigitalCertificateWhereUniqueInputSchema),z.lazy(() => DigitalCertificateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DigitalCertificateWhereUniqueInputSchema),z.lazy(() => DigitalCertificateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DigitalCertificateUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DigitalCertificateUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DigitalCertificateUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DigitalCertificateUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DigitalCertificateScalarWhereInputSchema),z.lazy(() => DigitalCertificateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DocumentUserUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutUserInputSchema),z.lazy(() => DocumentUserCreateWithoutUserInputSchema).array(),z.lazy(() => DocumentUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => DocumentUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DocumentUserUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DocumentUserUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentUserCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DocumentUserUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DocumentUserUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DocumentUserUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DocumentUserUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DocumentUserScalarWhereInputSchema),z.lazy(() => DocumentUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorCreateWithoutUserInputSchema).array(),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DocumentVersionCreatorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreatorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DocumentVersionCreatorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DocumentVersionCreatorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema),z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NotificationUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.NotificationUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => NotificationCreateWithoutUserInputSchema),z.lazy(() => NotificationCreateWithoutUserInputSchema).array(),z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema),z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema),z.lazy(() => NotificationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => NotificationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => NotificationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NotificationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => NotificationWhereUniqueInputSchema),z.lazy(() => NotificationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => NotificationWhereUniqueInputSchema),z.lazy(() => NotificationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => NotificationWhereUniqueInputSchema),z.lazy(() => NotificationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => NotificationWhereUniqueInputSchema),z.lazy(() => NotificationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => NotificationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => NotificationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => NotificationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => NotificationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => NotificationScalarWhereInputSchema),z.lazy(() => NotificationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutUserInputSchema),z.lazy(() => SharedDocumentCreateWithoutUserInputSchema).array(),z.lazy(() => SharedDocumentUncheckedCreateWithoutUserInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SharedDocumentCreateOrConnectWithoutUserInputSchema),z.lazy(() => SharedDocumentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SharedDocumentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SharedDocumentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SharedDocumentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SharedDocumentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SharedDocumentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SharedDocumentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SharedDocumentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SharedDocumentScalarWhereInputSchema),z.lazy(() => SharedDocumentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutAssignedToNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutAssignedToInputSchema),z.lazy(() => TaskCreateWithoutAssignedToInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => TaskCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutAssignedToInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutAssignedToInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TaskUserUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskUserCreateWithoutUserInputSchema),z.lazy(() => TaskUserCreateWithoutUserInputSchema).array(),z.lazy(() => TaskUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => TaskUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUserUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUserUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskUserCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUserUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TaskUserUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUserUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TaskUserUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskUserScalarWhereInputSchema),z.lazy(() => TaskUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutAssignedToNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutAssignedToInputSchema),z.lazy(() => TicketCreateWithoutAssignedToInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => TicketUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => TicketCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutAssignedToInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutAssignedToInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutCreatedByInputSchema),z.lazy(() => TicketCreateWithoutCreatedByInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => TicketCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorCreateWithoutUserInputSchema).array(),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCollaboratorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketCollaboratorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketCollaboratorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCollaboratorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketCollaboratorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketCollaboratorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketCollaboratorScalarWhereInputSchema),z.lazy(() => TicketCollaboratorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TicketThreadUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutUserInputSchema),z.lazy(() => TicketThreadCreateWithoutUserInputSchema).array(),z.lazy(() => TicketThreadUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketThreadCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketThreadCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketThreadUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketThreadUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketThreadCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketThreadWhereUniqueInputSchema),z.lazy(() => TicketThreadWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketThreadWhereUniqueInputSchema),z.lazy(() => TicketThreadWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketThreadWhereUniqueInputSchema),z.lazy(() => TicketThreadWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketThreadWhereUniqueInputSchema),z.lazy(() => TicketThreadWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketThreadUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketThreadUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketThreadUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TicketThreadUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketThreadScalarWhereInputSchema),z.lazy(() => TicketThreadScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TicketUserUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketUserCreateWithoutUserInputSchema),z.lazy(() => TicketUserCreateWithoutUserInputSchema).array(),z.lazy(() => TicketUserUncheckedCreateWithoutUserInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketUserCreateOrConnectWithoutUserInputSchema),z.lazy(() => TicketUserCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUserUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketUserUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketUserCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUserUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TicketUserUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUserUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TicketUserUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketUserScalarWhereInputSchema),z.lazy(() => TicketUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutUserInputSchema),z.lazy(() => UserDepartmentCreateWithoutUserInputSchema).array(),z.lazy(() => UserDepartmentUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserDepartmentCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserDepartmentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserDepartmentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserDepartmentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserDepartmentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserDepartmentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserDepartmentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserDepartmentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserDepartmentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserDepartmentScalarWhereInputSchema),z.lazy(() => UserDepartmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateManyWithoutHeadNestedInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutHeadInputSchema),z.lazy(() => DepartmentCreateWithoutHeadInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutHeadInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutHeadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutHeadInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutHeadInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutHeadInputSchema),z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutHeadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyHeadInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutHeadInputSchema),z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutHeadInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DepartmentUpdateManyWithWhereWithoutHeadInputSchema),z.lazy(() => DepartmentUpdateManyWithWhereWithoutHeadInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DepartmentScalarWhereInputSchema),z.lazy(() => DepartmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema: z.ZodType<Prisma.InstitutionUncheckedUpdateManyWithoutMayorNestedInput> = z.object({
  create: z.union([ z.lazy(() => InstitutionCreateWithoutMayorInputSchema),z.lazy(() => InstitutionCreateWithoutMayorInputSchema).array(),z.lazy(() => InstitutionUncheckedCreateWithoutMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutMayorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InstitutionCreateOrConnectWithoutMayorInputSchema),z.lazy(() => InstitutionCreateOrConnectWithoutMayorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InstitutionUpsertWithWhereUniqueWithoutMayorInputSchema),z.lazy(() => InstitutionUpsertWithWhereUniqueWithoutMayorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InstitutionCreateManyMayorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InstitutionUpdateWithWhereUniqueWithoutMayorInputSchema),z.lazy(() => InstitutionUpdateWithWhereUniqueWithoutMayorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InstitutionUpdateManyWithWhereWithoutMayorInputSchema),z.lazy(() => InstitutionUpdateManyWithWhereWithoutMayorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InstitutionScalarWhereInputSchema),z.lazy(() => InstitutionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema: z.ZodType<Prisma.InstitutionUncheckedUpdateManyWithoutViceMayorNestedInput> = z.object({
  create: z.union([ z.lazy(() => InstitutionCreateWithoutViceMayorInputSchema),z.lazy(() => InstitutionCreateWithoutViceMayorInputSchema).array(),z.lazy(() => InstitutionUncheckedCreateWithoutViceMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutViceMayorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InstitutionCreateOrConnectWithoutViceMayorInputSchema),z.lazy(() => InstitutionCreateOrConnectWithoutViceMayorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InstitutionUpsertWithWhereUniqueWithoutViceMayorInputSchema),z.lazy(() => InstitutionUpsertWithWhereUniqueWithoutViceMayorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InstitutionCreateManyViceMayorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InstitutionWhereUniqueInputSchema),z.lazy(() => InstitutionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InstitutionUpdateWithWhereUniqueWithoutViceMayorInputSchema),z.lazy(() => InstitutionUpdateWithWhereUniqueWithoutViceMayorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InstitutionUpdateManyWithWhereWithoutViceMayorInputSchema),z.lazy(() => InstitutionUpdateManyWithWhereWithoutViceMayorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InstitutionScalarWhereInputSchema),z.lazy(() => InstitutionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsCreateWithoutUserInputSchema).array(),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOnDocumentsCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserOnDocumentsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserOnDocumentsUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOnDocumentsCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserOnDocumentsUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserOnDocumentsUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserOnDocumentsScalarWhereInputSchema),z.lazy(() => UserOnDocumentsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DocumentCreatekeywordsInputSchema: z.ZodType<Prisma.DocumentCreatekeywordsInput> = z.object({
  set: z.string().array()
}).strict();

export const AttachmentCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.AttachmentCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => AttachmentCreateWithoutDocumentInputSchema),z.lazy(() => AttachmentCreateWithoutDocumentInputSchema).array(),z.lazy(() => AttachmentUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AttachmentCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => AttachmentCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AttachmentCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DocumentUserCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentUserCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutDocumentInputSchema),z.lazy(() => DocumentUserCreateWithoutDocumentInputSchema).array(),z.lazy(() => DocumentUserUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentUserCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => DocumentUserCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentUserCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DocumentVersionCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentVersionCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionCreateWithoutDocumentInputSchema).array(),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => DocumentVersionCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionWhereUniqueInputSchema),z.lazy(() => DocumentVersionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileMetadataCreateNestedOneWithoutDocumentInputSchema: z.ZodType<Prisma.FileMetadataCreateNestedOneWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => FileMetadataCreateWithoutDocumentInputSchema),z.lazy(() => FileMetadataUncheckedCreateWithoutDocumentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FileMetadataCreateOrConnectWithoutDocumentInputSchema).optional(),
  connect: z.lazy(() => FileMetadataWhereUniqueInputSchema).optional()
}).strict();

export const SharedDocumentCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.SharedDocumentCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentCreateWithoutDocumentInputSchema).array(),z.lazy(() => SharedDocumentUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SharedDocumentCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => SharedDocumentCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SharedDocumentCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutDocumentInputSchema),z.lazy(() => TaskCreateWithoutDocumentInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => TaskUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => TaskCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserOnDocumentsCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsCreateWithoutDocumentInputSchema).array(),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOnDocumentsCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOnDocumentsCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AttachmentUncheckedCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.AttachmentUncheckedCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => AttachmentCreateWithoutDocumentInputSchema),z.lazy(() => AttachmentCreateWithoutDocumentInputSchema).array(),z.lazy(() => AttachmentUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AttachmentCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => AttachmentCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AttachmentCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DocumentUserUncheckedCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentUserUncheckedCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutDocumentInputSchema),z.lazy(() => DocumentUserCreateWithoutDocumentInputSchema).array(),z.lazy(() => DocumentUserUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentUserCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => DocumentUserCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentUserCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DocumentVersionUncheckedCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentVersionUncheckedCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionCreateWithoutDocumentInputSchema).array(),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => DocumentVersionCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionWhereUniqueInputSchema),z.lazy(() => DocumentVersionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FileMetadataUncheckedCreateNestedOneWithoutDocumentInputSchema: z.ZodType<Prisma.FileMetadataUncheckedCreateNestedOneWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => FileMetadataCreateWithoutDocumentInputSchema),z.lazy(() => FileMetadataUncheckedCreateWithoutDocumentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FileMetadataCreateOrConnectWithoutDocumentInputSchema).optional(),
  connect: z.lazy(() => FileMetadataWhereUniqueInputSchema).optional()
}).strict();

export const SharedDocumentUncheckedCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentCreateWithoutDocumentInputSchema).array(),z.lazy(() => SharedDocumentUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SharedDocumentCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => SharedDocumentCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SharedDocumentCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutDocumentInputSchema),z.lazy(() => TaskCreateWithoutDocumentInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => TaskUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => TaskCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserOnDocumentsUncheckedCreateNestedManyWithoutDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedCreateNestedManyWithoutDocumentInput> = z.object({
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsCreateWithoutDocumentInputSchema).array(),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOnDocumentsCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOnDocumentsCreateManyDocumentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DocumentUpdatekeywordsInputSchema: z.ZodType<Prisma.DocumentUpdatekeywordsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const AttachmentUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.AttachmentUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => AttachmentCreateWithoutDocumentInputSchema),z.lazy(() => AttachmentCreateWithoutDocumentInputSchema).array(),z.lazy(() => AttachmentUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AttachmentCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => AttachmentCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AttachmentUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => AttachmentUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AttachmentCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AttachmentUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => AttachmentUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AttachmentUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => AttachmentUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AttachmentScalarWhereInputSchema),z.lazy(() => AttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DocumentUserUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.DocumentUserUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutDocumentInputSchema),z.lazy(() => DocumentUserCreateWithoutDocumentInputSchema).array(),z.lazy(() => DocumentUserUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentUserCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => DocumentUserCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DocumentUserUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => DocumentUserUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentUserCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DocumentUserUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => DocumentUserUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DocumentUserUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => DocumentUserUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DocumentUserScalarWhereInputSchema),z.lazy(() => DocumentUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DocumentVersionUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.DocumentVersionUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionCreateWithoutDocumentInputSchema).array(),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => DocumentVersionCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DocumentVersionUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DocumentVersionWhereUniqueInputSchema),z.lazy(() => DocumentVersionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DocumentVersionWhereUniqueInputSchema),z.lazy(() => DocumentVersionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DocumentVersionWhereUniqueInputSchema),z.lazy(() => DocumentVersionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionWhereUniqueInputSchema),z.lazy(() => DocumentVersionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DocumentVersionUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DocumentVersionUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DocumentVersionScalarWhereInputSchema),z.lazy(() => DocumentVersionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileMetadataUpdateOneWithoutDocumentNestedInputSchema: z.ZodType<Prisma.FileMetadataUpdateOneWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileMetadataCreateWithoutDocumentInputSchema),z.lazy(() => FileMetadataUncheckedCreateWithoutDocumentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FileMetadataCreateOrConnectWithoutDocumentInputSchema).optional(),
  upsert: z.lazy(() => FileMetadataUpsertWithoutDocumentInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => FileMetadataWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => FileMetadataWhereInputSchema) ]).optional(),
  connect: z.lazy(() => FileMetadataWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FileMetadataUpdateToOneWithWhereWithoutDocumentInputSchema),z.lazy(() => FileMetadataUpdateWithoutDocumentInputSchema),z.lazy(() => FileMetadataUncheckedUpdateWithoutDocumentInputSchema) ]).optional(),
}).strict();

export const SharedDocumentUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.SharedDocumentUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentCreateWithoutDocumentInputSchema).array(),z.lazy(() => SharedDocumentUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SharedDocumentCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => SharedDocumentCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SharedDocumentUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SharedDocumentCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SharedDocumentUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SharedDocumentUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SharedDocumentScalarWhereInputSchema),z.lazy(() => SharedDocumentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutDocumentInputSchema),z.lazy(() => TaskCreateWithoutDocumentInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => TaskUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => TaskCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserOnDocumentsUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.UserOnDocumentsUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsCreateWithoutDocumentInputSchema).array(),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOnDocumentsCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserOnDocumentsUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOnDocumentsCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserOnDocumentsUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserOnDocumentsUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserOnDocumentsScalarWhereInputSchema),z.lazy(() => UserOnDocumentsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AttachmentUncheckedUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => AttachmentCreateWithoutDocumentInputSchema),z.lazy(() => AttachmentCreateWithoutDocumentInputSchema).array(),z.lazy(() => AttachmentUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AttachmentCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => AttachmentCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AttachmentUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => AttachmentUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AttachmentCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AttachmentWhereUniqueInputSchema),z.lazy(() => AttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AttachmentUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => AttachmentUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AttachmentUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => AttachmentUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AttachmentScalarWhereInputSchema),z.lazy(() => AttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DocumentUserUncheckedUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.DocumentUserUncheckedUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutDocumentInputSchema),z.lazy(() => DocumentUserCreateWithoutDocumentInputSchema).array(),z.lazy(() => DocumentUserUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentUserCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => DocumentUserCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DocumentUserUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => DocumentUserUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentUserCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DocumentUserWhereUniqueInputSchema),z.lazy(() => DocumentUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DocumentUserUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => DocumentUserUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DocumentUserUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => DocumentUserUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DocumentUserScalarWhereInputSchema),z.lazy(() => DocumentUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DocumentVersionUncheckedUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.DocumentVersionUncheckedUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionCreateWithoutDocumentInputSchema).array(),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => DocumentVersionCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DocumentVersionUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DocumentVersionWhereUniqueInputSchema),z.lazy(() => DocumentVersionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DocumentVersionWhereUniqueInputSchema),z.lazy(() => DocumentVersionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DocumentVersionWhereUniqueInputSchema),z.lazy(() => DocumentVersionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionWhereUniqueInputSchema),z.lazy(() => DocumentVersionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DocumentVersionUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DocumentVersionUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DocumentVersionScalarWhereInputSchema),z.lazy(() => DocumentVersionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FileMetadataUncheckedUpdateOneWithoutDocumentNestedInputSchema: z.ZodType<Prisma.FileMetadataUncheckedUpdateOneWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => FileMetadataCreateWithoutDocumentInputSchema),z.lazy(() => FileMetadataUncheckedCreateWithoutDocumentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FileMetadataCreateOrConnectWithoutDocumentInputSchema).optional(),
  upsert: z.lazy(() => FileMetadataUpsertWithoutDocumentInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => FileMetadataWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => FileMetadataWhereInputSchema) ]).optional(),
  connect: z.lazy(() => FileMetadataWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FileMetadataUpdateToOneWithWhereWithoutDocumentInputSchema),z.lazy(() => FileMetadataUpdateWithoutDocumentInputSchema),z.lazy(() => FileMetadataUncheckedUpdateWithoutDocumentInputSchema) ]).optional(),
}).strict();

export const SharedDocumentUncheckedUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentCreateWithoutDocumentInputSchema).array(),z.lazy(() => SharedDocumentUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SharedDocumentCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => SharedDocumentCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SharedDocumentUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SharedDocumentCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SharedDocumentWhereUniqueInputSchema),z.lazy(() => SharedDocumentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SharedDocumentUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SharedDocumentUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SharedDocumentScalarWhereInputSchema),z.lazy(() => SharedDocumentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutDocumentInputSchema),z.lazy(() => TaskCreateWithoutDocumentInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => TaskUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => TaskCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserOnDocumentsUncheckedUpdateManyWithoutDocumentNestedInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedUpdateManyWithoutDocumentNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsCreateWithoutDocumentInputSchema).array(),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutDocumentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserOnDocumentsCreateOrConnectWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsCreateOrConnectWithoutDocumentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserOnDocumentsUpsertWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUpsertWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserOnDocumentsCreateManyDocumentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),z.lazy(() => UserOnDocumentsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserOnDocumentsUpdateWithWhereUniqueWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUpdateWithWhereUniqueWithoutDocumentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserOnDocumentsUpdateManyWithWhereWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUpdateManyWithWhereWithoutDocumentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserOnDocumentsScalarWhereInputSchema),z.lazy(() => UserOnDocumentsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DocumentCreateNestedOneWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.DocumentCreateNestedOneWithoutUserOnDocumentsInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutUserOnDocumentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutUserOnDocumentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutUserOnDocumentsInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUserOnDocumentsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserOnDocumentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserOnDocumentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserOnDocumentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DocumentUpdateOneRequiredWithoutUserOnDocumentsNestedInputSchema: z.ZodType<Prisma.DocumentUpdateOneRequiredWithoutUserOnDocumentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutUserOnDocumentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutUserOnDocumentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutUserOnDocumentsInputSchema).optional(),
  upsert: z.lazy(() => DocumentUpsertWithoutUserOnDocumentsInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DocumentUpdateToOneWithWhereWithoutUserOnDocumentsInputSchema),z.lazy(() => DocumentUpdateWithoutUserOnDocumentsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutUserOnDocumentsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutUserOnDocumentsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUserOnDocumentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserOnDocumentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserOnDocumentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserOnDocumentsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUserOnDocumentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUserOnDocumentsInputSchema),z.lazy(() => UserUpdateWithoutUserOnDocumentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserOnDocumentsInputSchema) ]).optional(),
}).strict();

export const DocumentCreateNestedOneWithoutDocumentUsersInputSchema: z.ZodType<Prisma.DocumentCreateNestedOneWithoutDocumentUsersInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutDocumentUsersInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutDocumentUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutDocumentUsersInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutDocumentUsersInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutDocumentUsersInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDocumentUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutDocumentUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDocumentUsersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DocumentUpdateOneRequiredWithoutDocumentUsersNestedInputSchema: z.ZodType<Prisma.DocumentUpdateOneRequiredWithoutDocumentUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutDocumentUsersInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutDocumentUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutDocumentUsersInputSchema).optional(),
  upsert: z.lazy(() => DocumentUpsertWithoutDocumentUsersInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DocumentUpdateToOneWithWhereWithoutDocumentUsersInputSchema),z.lazy(() => DocumentUpdateWithoutDocumentUsersInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutDocumentUsersInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutDocumentUsersNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutDocumentUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDocumentUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutDocumentUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDocumentUsersInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutDocumentUsersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutDocumentUsersInputSchema),z.lazy(() => UserUpdateWithoutDocumentUsersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDocumentUsersInputSchema) ]).optional(),
}).strict();

export const DocumentCreateNestedOneWithoutVersionsInputSchema: z.ZodType<Prisma.DocumentCreateNestedOneWithoutVersionsInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutVersionsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutVersionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutVersionsInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional()
}).strict();

export const DocumentVersionCreatorCreateNestedManyWithoutVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateNestedManyWithoutVersionInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorCreateWithoutVersionInputSchema).array(),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreatorCreateManyVersionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DocumentVersionCreatorUncheckedCreateNestedManyWithoutVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedCreateNestedManyWithoutVersionInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorCreateWithoutVersionInputSchema).array(),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreatorCreateManyVersionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const DocumentUpdateOneRequiredWithoutVersionsNestedInputSchema: z.ZodType<Prisma.DocumentUpdateOneRequiredWithoutVersionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutVersionsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutVersionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutVersionsInputSchema).optional(),
  upsert: z.lazy(() => DocumentUpsertWithoutVersionsInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DocumentUpdateToOneWithWhereWithoutVersionsInputSchema),z.lazy(() => DocumentUpdateWithoutVersionsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutVersionsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionCreatorUpdateManyWithoutVersionNestedInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateManyWithoutVersionNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorCreateWithoutVersionInputSchema).array(),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutVersionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DocumentVersionCreatorUpsertWithWhereUniqueWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUpsertWithWhereUniqueWithoutVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreatorCreateManyVersionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DocumentVersionCreatorUpdateWithWhereUniqueWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUpdateWithWhereUniqueWithoutVersionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DocumentVersionCreatorUpdateManyWithWhereWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUpdateManyWithWhereWithoutVersionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema),z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DocumentVersionCreatorUncheckedUpdateManyWithoutVersionNestedInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedUpdateManyWithoutVersionNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorCreateWithoutVersionInputSchema).array(),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorCreateOrConnectWithoutVersionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DocumentVersionCreatorUpsertWithWhereUniqueWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUpsertWithWhereUniqueWithoutVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DocumentVersionCreatorCreateManyVersionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DocumentVersionCreatorUpdateWithWhereUniqueWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUpdateWithWhereUniqueWithoutVersionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DocumentVersionCreatorUpdateManyWithWhereWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUpdateManyWithWhereWithoutVersionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema),z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutDocumentVersionCreatorsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutDocumentVersionCreatorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDocumentVersionCreatorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DocumentVersionCreateNestedOneWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.DocumentVersionCreateNestedOneWithoutDocumentVersionCreatorsInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentVersionCreatorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentVersionCreateOrConnectWithoutDocumentVersionCreatorsInputSchema).optional(),
  connect: z.lazy(() => DocumentVersionWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutDocumentVersionCreatorsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutDocumentVersionCreatorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutDocumentVersionCreatorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDocumentVersionCreatorsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutDocumentVersionCreatorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => UserUpdateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDocumentVersionCreatorsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionUpdateOneRequiredWithoutDocumentVersionCreatorsNestedInputSchema: z.ZodType<Prisma.DocumentVersionUpdateOneRequiredWithoutDocumentVersionCreatorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentVersionCreateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentVersionCreatorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentVersionCreateOrConnectWithoutDocumentVersionCreatorsInputSchema).optional(),
  upsert: z.lazy(() => DocumentVersionUpsertWithoutDocumentVersionCreatorsInputSchema).optional(),
  connect: z.lazy(() => DocumentVersionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DocumentVersionUpdateToOneWithWhereWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => DocumentVersionUpdateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => DocumentVersionUncheckedUpdateWithoutDocumentVersionCreatorsInputSchema) ]).optional(),
}).strict();

export const DocumentCreateNestedOneWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.DocumentCreateNestedOneWithoutSharedDocumentsInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutSharedDocumentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutSharedDocumentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutSharedDocumentsInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSharedDocumentsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSharedDocumentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSharedDocumentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSharedDocumentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DocumentUpdateOneRequiredWithoutSharedDocumentsNestedInputSchema: z.ZodType<Prisma.DocumentUpdateOneRequiredWithoutSharedDocumentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutSharedDocumentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutSharedDocumentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutSharedDocumentsInputSchema).optional(),
  upsert: z.lazy(() => DocumentUpsertWithoutSharedDocumentsInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DocumentUpdateToOneWithWhereWithoutSharedDocumentsInputSchema),z.lazy(() => DocumentUpdateWithoutSharedDocumentsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutSharedDocumentsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutSharedDocumentsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSharedDocumentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSharedDocumentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSharedDocumentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSharedDocumentsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSharedDocumentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSharedDocumentsInputSchema),z.lazy(() => UserUpdateWithoutSharedDocumentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSharedDocumentsInputSchema) ]).optional(),
}).strict();

export const AuditLogCreateNestedManyWithoutWorkflowInputSchema: z.ZodType<Prisma.AuditLogCreateNestedManyWithoutWorkflowInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutWorkflowInputSchema),z.lazy(() => AuditLogCreateWithoutWorkflowInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyWorkflowInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskCreateNestedManyWithoutWorkflowInputSchema: z.ZodType<Prisma.TaskCreateNestedManyWithoutWorkflowInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkflowInputSchema),z.lazy(() => TaskCreateWithoutWorkflowInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => TaskCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyWorkflowInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedCreateNestedManyWithoutWorkflowInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateNestedManyWithoutWorkflowInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutWorkflowInputSchema),z.lazy(() => AuditLogCreateWithoutWorkflowInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyWorkflowInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedCreateNestedManyWithoutWorkflowInputSchema: z.ZodType<Prisma.TaskUncheckedCreateNestedManyWithoutWorkflowInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkflowInputSchema),z.lazy(() => TaskCreateWithoutWorkflowInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => TaskCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyWorkflowInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUpdateManyWithoutWorkflowNestedInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithoutWorkflowNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutWorkflowInputSchema),z.lazy(() => AuditLogCreateWithoutWorkflowInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyWorkflowInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutWorkflowInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutWorkflowInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUpdateManyWithoutWorkflowNestedInputSchema: z.ZodType<Prisma.TaskUpdateManyWithoutWorkflowNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkflowInputSchema),z.lazy(() => TaskCreateWithoutWorkflowInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => TaskCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyWorkflowInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutWorkflowInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutWorkflowInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutWorkflowNestedInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutWorkflowNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutWorkflowInputSchema),z.lazy(() => AuditLogCreateWithoutWorkflowInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyWorkflowInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutWorkflowInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutWorkflowInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUncheckedUpdateManyWithoutWorkflowNestedInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutWorkflowNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkflowInputSchema),z.lazy(() => TaskCreateWithoutWorkflowInputSchema).array(),z.lazy(() => TaskUncheckedCreateWithoutWorkflowInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkflowInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskCreateOrConnectWithoutWorkflowInputSchema),z.lazy(() => TaskCreateOrConnectWithoutWorkflowInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUpsertWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => TaskUpsertWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskCreateManyWorkflowInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskWhereUniqueInputSchema),z.lazy(() => TaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUpdateWithWhereUniqueWithoutWorkflowInputSchema),z.lazy(() => TaskUpdateWithWhereUniqueWithoutWorkflowInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUpdateManyWithWhereWithoutWorkflowInputSchema),z.lazy(() => TaskUpdateManyWithWhereWithoutWorkflowInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.AuditLogCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutTaskInputSchema),z.lazy(() => AuditLogCreateWithoutTaskInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutTaskInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutTaskInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTasksAssignedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTasksAssignedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTasksAssignedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTasksAssignedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTasksAssignedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DocumentCreateNestedOneWithoutTasksInputSchema: z.ZodType<Prisma.DocumentCreateNestedOneWithoutTasksInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutTasksInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional()
}).strict();

export const WorkflowCreateNestedOneWithoutTasksInputSchema: z.ZodType<Prisma.WorkflowCreateNestedOneWithoutTasksInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutTasksInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkflowCreateOrConnectWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => WorkflowWhereUniqueInputSchema).optional()
}).strict();

export const TaskUserCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.TaskUserCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => TaskUserCreateWithoutTaskInputSchema),z.lazy(() => TaskUserCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskUserUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskUserCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskUserCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskUserCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutTaskInputSchema),z.lazy(() => AuditLogCreateWithoutTaskInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutTaskInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutTaskInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaskUserUncheckedCreateNestedManyWithoutTaskInputSchema: z.ZodType<Prisma.TaskUserUncheckedCreateNestedManyWithoutTaskInput> = z.object({
  create: z.union([ z.lazy(() => TaskUserCreateWithoutTaskInputSchema),z.lazy(() => TaskUserCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskUserUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskUserCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskUserCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskUserCreateManyTaskInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutTaskInputSchema),z.lazy(() => AuditLogCreateWithoutTaskInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutTaskInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutTaskInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutTasksAssignedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutTasksAssignedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTasksAssignedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTasksAssignedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTasksAssignedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTasksAssignedInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTasksAssignedInputSchema),z.lazy(() => UserUpdateWithoutTasksAssignedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTasksAssignedInputSchema) ]).optional(),
}).strict();

export const DocumentUpdateOneWithoutTasksNestedInputSchema: z.ZodType<Prisma.DocumentUpdateOneWithoutTasksNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutTasksInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutTasksInputSchema).optional(),
  upsert: z.lazy(() => DocumentUpsertWithoutTasksInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => DocumentWhereInputSchema) ]).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DocumentUpdateToOneWithWhereWithoutTasksInputSchema),z.lazy(() => DocumentUpdateWithoutTasksInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutTasksInputSchema) ]).optional(),
}).strict();

export const WorkflowUpdateOneRequiredWithoutTasksNestedInputSchema: z.ZodType<Prisma.WorkflowUpdateOneRequiredWithoutTasksNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutTasksInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkflowCreateOrConnectWithoutTasksInputSchema).optional(),
  upsert: z.lazy(() => WorkflowUpsertWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => WorkflowWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkflowUpdateToOneWithWhereWithoutTasksInputSchema),z.lazy(() => WorkflowUpdateWithoutTasksInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutTasksInputSchema) ]).optional(),
}).strict();

export const TaskUserUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.TaskUserUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskUserCreateWithoutTaskInputSchema),z.lazy(() => TaskUserCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskUserUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskUserCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskUserCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUserUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskUserUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskUserCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUserUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskUserUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUserUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => TaskUserUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskUserScalarWhereInputSchema),z.lazy(() => TaskUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutTaskInputSchema),z.lazy(() => AuditLogCreateWithoutTaskInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutTaskInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutTaskInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaskUserUncheckedUpdateManyWithoutTaskNestedInputSchema: z.ZodType<Prisma.TaskUserUncheckedUpdateManyWithoutTaskNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskUserCreateWithoutTaskInputSchema),z.lazy(() => TaskUserCreateWithoutTaskInputSchema).array(),z.lazy(() => TaskUserUncheckedCreateWithoutTaskInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutTaskInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaskUserCreateOrConnectWithoutTaskInputSchema),z.lazy(() => TaskUserCreateOrConnectWithoutTaskInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaskUserUpsertWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskUserUpsertWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaskUserCreateManyTaskInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaskUserWhereUniqueInputSchema),z.lazy(() => TaskUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaskUserUpdateWithWhereUniqueWithoutTaskInputSchema),z.lazy(() => TaskUserUpdateWithWhereUniqueWithoutTaskInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaskUserUpdateManyWithWhereWithoutTaskInputSchema),z.lazy(() => TaskUserUpdateManyWithWhereWithoutTaskInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaskUserScalarWhereInputSchema),z.lazy(() => TaskUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAuditLogsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TaskCreateNestedOneWithoutAuditLogsInputSchema: z.ZodType<Prisma.TaskCreateNestedOneWithoutAuditLogsInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutAuditLogsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional()
}).strict();

export const WorkflowCreateNestedOneWithoutAuditLogsInputSchema: z.ZodType<Prisma.WorkflowCreateNestedOneWithoutAuditLogsInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutAuditLogsInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkflowCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  connect: z.lazy(() => WorkflowWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutAuditLogsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAuditLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAuditLogsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAuditLogsInputSchema),z.lazy(() => UserUpdateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuditLogsInputSchema) ]).optional(),
}).strict();

export const TaskUpdateOneWithoutAuditLogsNestedInputSchema: z.ZodType<Prisma.TaskUpdateOneWithoutAuditLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutAuditLogsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  upsert: z.lazy(() => TaskUpsertWithoutAuditLogsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TaskWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TaskWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskUpdateToOneWithWhereWithoutAuditLogsInputSchema),z.lazy(() => TaskUpdateWithoutAuditLogsInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutAuditLogsInputSchema) ]).optional(),
}).strict();

export const WorkflowUpdateOneWithoutAuditLogsNestedInputSchema: z.ZodType<Prisma.WorkflowUpdateOneWithoutAuditLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => WorkflowCreateWithoutAuditLogsInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => WorkflowCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  upsert: z.lazy(() => WorkflowUpsertWithoutAuditLogsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => WorkflowWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => WorkflowWhereInputSchema) ]).optional(),
  connect: z.lazy(() => WorkflowWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => WorkflowUpdateToOneWithWhereWithoutAuditLogsInputSchema),z.lazy(() => WorkflowUpdateWithoutAuditLogsInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutAuditLogsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutNotificationsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutNotificationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutNotificationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutNotificationsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutNotificationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutNotificationsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutNotificationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutNotificationsInputSchema),z.lazy(() => UserUpdateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutNotificationsInputSchema) ]).optional(),
}).strict();

export const DocumentCreateNestedOneWithoutAttachmentsInputSchema: z.ZodType<Prisma.DocumentCreateNestedOneWithoutAttachmentsInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutAttachmentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutAttachmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutAttachmentsInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional()
}).strict();

export const DocumentUpdateOneRequiredWithoutAttachmentsNestedInputSchema: z.ZodType<Prisma.DocumentUpdateOneRequiredWithoutAttachmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutAttachmentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutAttachmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutAttachmentsInputSchema).optional(),
  upsert: z.lazy(() => DocumentUpsertWithoutAttachmentsInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DocumentUpdateToOneWithWhereWithoutAttachmentsInputSchema),z.lazy(() => DocumentUpdateWithoutAttachmentsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutAttachmentsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutDigitalCertificatesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutDigitalCertificatesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDigitalCertificatesInputSchema),z.lazy(() => UserUncheckedCreateWithoutDigitalCertificatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDigitalCertificatesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutDigitalCertificatesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutDigitalCertificatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutDigitalCertificatesInputSchema),z.lazy(() => UserUncheckedCreateWithoutDigitalCertificatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutDigitalCertificatesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutDigitalCertificatesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutDigitalCertificatesInputSchema),z.lazy(() => UserUpdateWithoutDigitalCertificatesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDigitalCertificatesInputSchema) ]).optional(),
}).strict();

export const DocumentCreateNestedOneWithoutFileMetadataInputSchema: z.ZodType<Prisma.DocumentCreateNestedOneWithoutFileMetadataInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutFileMetadataInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutFileMetadataInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutFileMetadataInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional()
}).strict();

export const DocumentUpdateOneRequiredWithoutFileMetadataNestedInputSchema: z.ZodType<Prisma.DocumentUpdateOneRequiredWithoutFileMetadataNestedInput> = z.object({
  create: z.union([ z.lazy(() => DocumentCreateWithoutFileMetadataInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutFileMetadataInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DocumentCreateOrConnectWithoutFileMetadataInputSchema).optional(),
  upsert: z.lazy(() => DocumentUpsertWithoutFileMetadataInputSchema).optional(),
  connect: z.lazy(() => DocumentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DocumentUpdateToOneWithWhereWithoutFileMetadataInputSchema),z.lazy(() => DocumentUpdateWithoutFileMetadataInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutFileMetadataInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutMayorInstitutionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutMayorInstitutionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutMayorInstitutionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMayorInstitutionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutViceMayorInstitutionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutViceMayorInstitutionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutViceMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutViceMayorInstitutionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutViceMayorInstitutionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DepartmentCreateNestedManyWithoutInstitutionInputSchema: z.ZodType<Prisma.DepartmentCreateNestedManyWithoutInstitutionInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutInstitutionInputSchema),z.lazy(() => DepartmentCreateWithoutInstitutionInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutInstitutionInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutInstitutionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutInstitutionInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutInstitutionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyInstitutionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DepartmentUncheckedCreateNestedManyWithoutInstitutionInputSchema: z.ZodType<Prisma.DepartmentUncheckedCreateNestedManyWithoutInstitutionInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutInstitutionInputSchema),z.lazy(() => DepartmentCreateWithoutInstitutionInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutInstitutionInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutInstitutionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutInstitutionInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutInstitutionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyInstitutionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutMayorInstitutionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutMayorInstitutionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutMayorInstitutionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMayorInstitutionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutMayorInstitutionsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutMayorInstitutionsInputSchema),z.lazy(() => UserUpdateWithoutMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMayorInstitutionsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutViceMayorInstitutionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutViceMayorInstitutionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutViceMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutViceMayorInstitutionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutViceMayorInstitutionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutViceMayorInstitutionsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutViceMayorInstitutionsInputSchema),z.lazy(() => UserUpdateWithoutViceMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutViceMayorInstitutionsInputSchema) ]).optional(),
}).strict();

export const DepartmentUpdateManyWithoutInstitutionNestedInputSchema: z.ZodType<Prisma.DepartmentUpdateManyWithoutInstitutionNestedInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutInstitutionInputSchema),z.lazy(() => DepartmentCreateWithoutInstitutionInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutInstitutionInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutInstitutionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutInstitutionInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutInstitutionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutInstitutionInputSchema),z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutInstitutionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyInstitutionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutInstitutionInputSchema),z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutInstitutionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DepartmentUpdateManyWithWhereWithoutInstitutionInputSchema),z.lazy(() => DepartmentUpdateManyWithWhereWithoutInstitutionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DepartmentScalarWhereInputSchema),z.lazy(() => DepartmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DepartmentUncheckedUpdateManyWithoutInstitutionNestedInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateManyWithoutInstitutionNestedInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutInstitutionInputSchema),z.lazy(() => DepartmentCreateWithoutInstitutionInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutInstitutionInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutInstitutionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutInstitutionInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutInstitutionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutInstitutionInputSchema),z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutInstitutionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyInstitutionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutInstitutionInputSchema),z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutInstitutionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DepartmentUpdateManyWithWhereWithoutInstitutionInputSchema),z.lazy(() => DepartmentUpdateManyWithWhereWithoutInstitutionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DepartmentScalarWhereInputSchema),z.lazy(() => DepartmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InstitutionCreateNestedOneWithoutDepartmentsInputSchema: z.ZodType<Prisma.InstitutionCreateNestedOneWithoutDepartmentsInput> = z.object({
  create: z.union([ z.lazy(() => InstitutionCreateWithoutDepartmentsInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InstitutionCreateOrConnectWithoutDepartmentsInputSchema).optional(),
  connect: z.lazy(() => InstitutionWhereUniqueInputSchema).optional()
}).strict();

export const DepartmentCreateNestedOneWithoutChildDepartmentsInputSchema: z.ZodType<Prisma.DepartmentCreateNestedOneWithoutChildDepartmentsInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutChildDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutChildDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DepartmentCreateOrConnectWithoutChildDepartmentsInputSchema).optional(),
  connect: z.lazy(() => DepartmentWhereUniqueInputSchema).optional()
}).strict();

export const DepartmentCreateNestedManyWithoutParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentCreateNestedManyWithoutParentDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentCreateWithoutParentDepartmentInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutParentDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutParentDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyParentDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutHeadOfDepartmentsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutHeadOfDepartmentsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutHeadOfDepartmentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutHeadOfDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutHeadOfDepartmentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserDepartmentCreateNestedManyWithoutDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentCreateNestedManyWithoutDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentCreateWithoutDepartmentInputSchema).array(),z.lazy(() => UserDepartmentUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserDepartmentCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserDepartmentCreateManyDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCreateNestedManyWithoutDepartmentInputSchema: z.ZodType<Prisma.TicketCreateNestedManyWithoutDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutDepartmentInputSchema),z.lazy(() => TicketCreateWithoutDepartmentInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => TicketUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => TicketCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const HelpTopicCreateNestedManyWithoutDepartmentInputSchema: z.ZodType<Prisma.HelpTopicCreateNestedManyWithoutDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => HelpTopicCreateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicCreateWithoutDepartmentInputSchema).array(),z.lazy(() => HelpTopicUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => HelpTopicCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => HelpTopicCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => HelpTopicCreateManyDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => HelpTopicWhereUniqueInputSchema),z.lazy(() => HelpTopicWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DepartmentUncheckedCreateNestedManyWithoutParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentUncheckedCreateNestedManyWithoutParentDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentCreateWithoutParentDepartmentInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutParentDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutParentDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyParentDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentCreateWithoutDepartmentInputSchema).array(),z.lazy(() => UserDepartmentUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserDepartmentCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserDepartmentCreateManyDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedCreateNestedManyWithoutDepartmentInputSchema: z.ZodType<Prisma.TicketUncheckedCreateNestedManyWithoutDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutDepartmentInputSchema),z.lazy(() => TicketCreateWithoutDepartmentInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => TicketUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => TicketCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const HelpTopicUncheckedCreateNestedManyWithoutDepartmentInputSchema: z.ZodType<Prisma.HelpTopicUncheckedCreateNestedManyWithoutDepartmentInput> = z.object({
  create: z.union([ z.lazy(() => HelpTopicCreateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicCreateWithoutDepartmentInputSchema).array(),z.lazy(() => HelpTopicUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => HelpTopicCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => HelpTopicCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => HelpTopicCreateManyDepartmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => HelpTopicWhereUniqueInputSchema),z.lazy(() => HelpTopicWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InstitutionUpdateOneRequiredWithoutDepartmentsNestedInputSchema: z.ZodType<Prisma.InstitutionUpdateOneRequiredWithoutDepartmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => InstitutionCreateWithoutDepartmentsInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InstitutionCreateOrConnectWithoutDepartmentsInputSchema).optional(),
  upsert: z.lazy(() => InstitutionUpsertWithoutDepartmentsInputSchema).optional(),
  connect: z.lazy(() => InstitutionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InstitutionUpdateToOneWithWhereWithoutDepartmentsInputSchema),z.lazy(() => InstitutionUpdateWithoutDepartmentsInputSchema),z.lazy(() => InstitutionUncheckedUpdateWithoutDepartmentsInputSchema) ]).optional(),
}).strict();

export const DepartmentUpdateOneWithoutChildDepartmentsNestedInputSchema: z.ZodType<Prisma.DepartmentUpdateOneWithoutChildDepartmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutChildDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutChildDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DepartmentCreateOrConnectWithoutChildDepartmentsInputSchema).optional(),
  upsert: z.lazy(() => DepartmentUpsertWithoutChildDepartmentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => DepartmentWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => DepartmentWhereInputSchema) ]).optional(),
  connect: z.lazy(() => DepartmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DepartmentUpdateToOneWithWhereWithoutChildDepartmentsInputSchema),z.lazy(() => DepartmentUpdateWithoutChildDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutChildDepartmentsInputSchema) ]).optional(),
}).strict();

export const DepartmentUpdateManyWithoutParentDepartmentNestedInputSchema: z.ZodType<Prisma.DepartmentUpdateManyWithoutParentDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentCreateWithoutParentDepartmentInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutParentDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutParentDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutParentDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyParentDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutParentDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DepartmentUpdateManyWithWhereWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUpdateManyWithWhereWithoutParentDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DepartmentScalarWhereInputSchema),z.lazy(() => DepartmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutHeadOfDepartmentsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutHeadOfDepartmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutHeadOfDepartmentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutHeadOfDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutHeadOfDepartmentsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutHeadOfDepartmentsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutHeadOfDepartmentsInputSchema),z.lazy(() => UserUpdateWithoutHeadOfDepartmentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutHeadOfDepartmentsInputSchema) ]).optional(),
}).strict();

export const UserDepartmentUpdateManyWithoutDepartmentNestedInputSchema: z.ZodType<Prisma.UserDepartmentUpdateManyWithoutDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentCreateWithoutDepartmentInputSchema).array(),z.lazy(() => UserDepartmentUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserDepartmentCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserDepartmentUpsertWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUpsertWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserDepartmentCreateManyDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserDepartmentUpdateWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUpdateWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserDepartmentUpdateManyWithWhereWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUpdateManyWithWhereWithoutDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserDepartmentScalarWhereInputSchema),z.lazy(() => UserDepartmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUpdateManyWithoutDepartmentNestedInputSchema: z.ZodType<Prisma.TicketUpdateManyWithoutDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutDepartmentInputSchema),z.lazy(() => TicketCreateWithoutDepartmentInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => TicketUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => TicketCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutDepartmentInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const HelpTopicUpdateManyWithoutDepartmentNestedInputSchema: z.ZodType<Prisma.HelpTopicUpdateManyWithoutDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => HelpTopicCreateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicCreateWithoutDepartmentInputSchema).array(),z.lazy(() => HelpTopicUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => HelpTopicCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => HelpTopicCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => HelpTopicUpsertWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUpsertWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => HelpTopicCreateManyDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => HelpTopicWhereUniqueInputSchema),z.lazy(() => HelpTopicWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => HelpTopicWhereUniqueInputSchema),z.lazy(() => HelpTopicWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => HelpTopicWhereUniqueInputSchema),z.lazy(() => HelpTopicWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => HelpTopicWhereUniqueInputSchema),z.lazy(() => HelpTopicWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => HelpTopicUpdateWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUpdateWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => HelpTopicUpdateManyWithWhereWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUpdateManyWithWhereWithoutDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => HelpTopicScalarWhereInputSchema),z.lazy(() => HelpTopicScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const DepartmentUncheckedUpdateManyWithoutParentDepartmentNestedInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateManyWithoutParentDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentCreateWithoutParentDepartmentInputSchema).array(),z.lazy(() => DepartmentUncheckedCreateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutParentDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DepartmentCreateOrConnectWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentCreateOrConnectWithoutParentDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUpsertWithWhereUniqueWithoutParentDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => DepartmentCreateManyParentDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DepartmentWhereUniqueInputSchema),z.lazy(() => DepartmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUpdateWithWhereUniqueWithoutParentDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DepartmentUpdateManyWithWhereWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUpdateManyWithWhereWithoutParentDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DepartmentScalarWhereInputSchema),z.lazy(() => DepartmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentCreateWithoutDepartmentInputSchema).array(),z.lazy(() => UserDepartmentUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserDepartmentCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserDepartmentUpsertWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUpsertWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserDepartmentCreateManyDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserDepartmentWhereUniqueInputSchema),z.lazy(() => UserDepartmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserDepartmentUpdateWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUpdateWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserDepartmentUpdateManyWithWhereWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUpdateManyWithWhereWithoutDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserDepartmentScalarWhereInputSchema),z.lazy(() => UserDepartmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedUpdateManyWithoutDepartmentNestedInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutDepartmentInputSchema),z.lazy(() => TicketCreateWithoutDepartmentInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => TicketUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => TicketCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutDepartmentInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const HelpTopicUncheckedUpdateManyWithoutDepartmentNestedInputSchema: z.ZodType<Prisma.HelpTopicUncheckedUpdateManyWithoutDepartmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => HelpTopicCreateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicCreateWithoutDepartmentInputSchema).array(),z.lazy(() => HelpTopicUncheckedCreateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUncheckedCreateWithoutDepartmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => HelpTopicCreateOrConnectWithoutDepartmentInputSchema),z.lazy(() => HelpTopicCreateOrConnectWithoutDepartmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => HelpTopicUpsertWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUpsertWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => HelpTopicCreateManyDepartmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => HelpTopicWhereUniqueInputSchema),z.lazy(() => HelpTopicWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => HelpTopicWhereUniqueInputSchema),z.lazy(() => HelpTopicWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => HelpTopicWhereUniqueInputSchema),z.lazy(() => HelpTopicWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => HelpTopicWhereUniqueInputSchema),z.lazy(() => HelpTopicWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => HelpTopicUpdateWithWhereUniqueWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUpdateWithWhereUniqueWithoutDepartmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => HelpTopicUpdateManyWithWhereWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUpdateManyWithWhereWithoutDepartmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => HelpTopicScalarWhereInputSchema),z.lazy(() => HelpTopicScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DepartmentCreateNestedOneWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.DepartmentCreateNestedOneWithoutUserDepartmentsInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutUserDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutUserDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DepartmentCreateOrConnectWithoutUserDepartmentsInputSchema).optional(),
  connect: z.lazy(() => DepartmentWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUserDepartmentsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserDepartmentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserDepartmentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DepartmentUpdateOneRequiredWithoutUserDepartmentsNestedInputSchema: z.ZodType<Prisma.DepartmentUpdateOneRequiredWithoutUserDepartmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutUserDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutUserDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DepartmentCreateOrConnectWithoutUserDepartmentsInputSchema).optional(),
  upsert: z.lazy(() => DepartmentUpsertWithoutUserDepartmentsInputSchema).optional(),
  connect: z.lazy(() => DepartmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DepartmentUpdateToOneWithWhereWithoutUserDepartmentsInputSchema),z.lazy(() => DepartmentUpdateWithoutUserDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutUserDepartmentsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutUserDepartmentsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUserDepartmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserDepartmentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserDepartmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserDepartmentsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUserDepartmentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUserDepartmentsInputSchema),z.lazy(() => UserUpdateWithoutUserDepartmentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserDepartmentsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTicketsAssignedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTicketsAssignedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTicketsAssignedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketsAssignedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTicketsAssignedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutTicketsCreatedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTicketsCreatedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTicketsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketsCreatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTicketsCreatedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const DepartmentCreateNestedOneWithoutTicketsInputSchema: z.ZodType<Prisma.DepartmentCreateNestedOneWithoutTicketsInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutTicketsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DepartmentCreateOrConnectWithoutTicketsInputSchema).optional(),
  connect: z.lazy(() => DepartmentWhereUniqueInputSchema).optional()
}).strict();

export const HelpTopicCreateNestedOneWithoutTicketsInputSchema: z.ZodType<Prisma.HelpTopicCreateNestedOneWithoutTicketsInput> = z.object({
  create: z.union([ z.lazy(() => HelpTopicCreateWithoutTicketsInputSchema),z.lazy(() => HelpTopicUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => HelpTopicCreateOrConnectWithoutTicketsInputSchema).optional(),
  connect: z.lazy(() => HelpTopicWhereUniqueInputSchema).optional()
}).strict();

export const TicketPriorityCreateNestedOneWithoutTicketsInputSchema: z.ZodType<Prisma.TicketPriorityCreateNestedOneWithoutTicketsInput> = z.object({
  create: z.union([ z.lazy(() => TicketPriorityCreateWithoutTicketsInputSchema),z.lazy(() => TicketPriorityUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketPriorityCreateOrConnectWithoutTicketsInputSchema).optional(),
  connect: z.lazy(() => TicketPriorityWhereUniqueInputSchema).optional()
}).strict();

export const SLAPlanCreateNestedOneWithoutTicketsInputSchema: z.ZodType<Prisma.SLAPlanCreateNestedOneWithoutTicketsInput> = z.object({
  create: z.union([ z.lazy(() => SLAPlanCreateWithoutTicketsInputSchema),z.lazy(() => SLAPlanUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SLAPlanCreateOrConnectWithoutTicketsInputSchema).optional(),
  connect: z.lazy(() => SLAPlanWhereUniqueInputSchema).optional()
}).strict();

export const TicketStatusCreateNestedOneWithoutTicketsInputSchema: z.ZodType<Prisma.TicketStatusCreateNestedOneWithoutTicketsInput> = z.object({
  create: z.union([ z.lazy(() => TicketStatusCreateWithoutTicketsInputSchema),z.lazy(() => TicketStatusUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketStatusCreateOrConnectWithoutTicketsInputSchema).optional(),
  connect: z.lazy(() => TicketStatusWhereUniqueInputSchema).optional()
}).strict();

export const TicketAttachmentCreateNestedManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketAttachmentCreateNestedManyWithoutTicketInput> = z.object({
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketAttachmentCreateManyTicketInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCollaboratorCreateNestedManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorCreateNestedManyWithoutTicketInput> = z.object({
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCollaboratorCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCollaboratorCreateManyTicketInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCustomFieldCreateNestedManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldCreateNestedManyWithoutTicketInput> = z.object({
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCustomFieldCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCustomFieldCreateManyTicketInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketThreadCreateNestedOneWithoutTicketInputSchema: z.ZodType<Prisma.TicketThreadCreateNestedOneWithoutTicketInput> = z.object({
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutTicketInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutTicketInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketThreadCreateOrConnectWithoutTicketInputSchema).optional(),
  connect: z.lazy(() => TicketThreadWhereUniqueInputSchema).optional()
}).strict();

export const TicketUserCreateNestedManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketUserCreateNestedManyWithoutTicketInput> = z.object({
  create: z.union([ z.lazy(() => TicketUserCreateWithoutTicketInputSchema),z.lazy(() => TicketUserCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketUserUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketUserCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketUserCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketUserCreateManyTicketInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedCreateNestedManyWithoutTicketInput> = z.object({
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketAttachmentCreateManyTicketInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInput> = z.object({
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCollaboratorCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCollaboratorCreateManyTicketInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInput> = z.object({
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCustomFieldCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCustomFieldCreateManyTicketInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema: z.ZodType<Prisma.TicketThreadUncheckedCreateNestedOneWithoutTicketInput> = z.object({
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutTicketInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutTicketInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketThreadCreateOrConnectWithoutTicketInputSchema).optional(),
  connect: z.lazy(() => TicketThreadWhereUniqueInputSchema).optional()
}).strict();

export const TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketUserUncheckedCreateNestedManyWithoutTicketInput> = z.object({
  create: z.union([ z.lazy(() => TicketUserCreateWithoutTicketInputSchema),z.lazy(() => TicketUserCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketUserUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketUserCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketUserCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketUserCreateManyTicketInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutTicketsAssignedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutTicketsAssignedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTicketsAssignedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketsAssignedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTicketsAssignedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTicketsAssignedInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTicketsAssignedInputSchema),z.lazy(() => UserUpdateWithoutTicketsAssignedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketsAssignedInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTicketsCreatedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTicketsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketsCreatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTicketsCreatedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTicketsCreatedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTicketsCreatedInputSchema),z.lazy(() => UserUpdateWithoutTicketsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketsCreatedInputSchema) ]).optional(),
}).strict();

export const DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema: z.ZodType<Prisma.DepartmentUpdateOneRequiredWithoutTicketsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutTicketsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DepartmentCreateOrConnectWithoutTicketsInputSchema).optional(),
  upsert: z.lazy(() => DepartmentUpsertWithoutTicketsInputSchema).optional(),
  connect: z.lazy(() => DepartmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DepartmentUpdateToOneWithWhereWithoutTicketsInputSchema),z.lazy(() => DepartmentUpdateWithoutTicketsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutTicketsInputSchema) ]).optional(),
}).strict();

export const HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema: z.ZodType<Prisma.HelpTopicUpdateOneRequiredWithoutTicketsNestedInput> = z.object({
  create: z.union([ z.lazy(() => HelpTopicCreateWithoutTicketsInputSchema),z.lazy(() => HelpTopicUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => HelpTopicCreateOrConnectWithoutTicketsInputSchema).optional(),
  upsert: z.lazy(() => HelpTopicUpsertWithoutTicketsInputSchema).optional(),
  connect: z.lazy(() => HelpTopicWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => HelpTopicUpdateToOneWithWhereWithoutTicketsInputSchema),z.lazy(() => HelpTopicUpdateWithoutTicketsInputSchema),z.lazy(() => HelpTopicUncheckedUpdateWithoutTicketsInputSchema) ]).optional(),
}).strict();

export const TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema: z.ZodType<Prisma.TicketPriorityUpdateOneRequiredWithoutTicketsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketPriorityCreateWithoutTicketsInputSchema),z.lazy(() => TicketPriorityUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketPriorityCreateOrConnectWithoutTicketsInputSchema).optional(),
  upsert: z.lazy(() => TicketPriorityUpsertWithoutTicketsInputSchema).optional(),
  connect: z.lazy(() => TicketPriorityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TicketPriorityUpdateToOneWithWhereWithoutTicketsInputSchema),z.lazy(() => TicketPriorityUpdateWithoutTicketsInputSchema),z.lazy(() => TicketPriorityUncheckedUpdateWithoutTicketsInputSchema) ]).optional(),
}).strict();

export const SLAPlanUpdateOneWithoutTicketsNestedInputSchema: z.ZodType<Prisma.SLAPlanUpdateOneWithoutTicketsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SLAPlanCreateWithoutTicketsInputSchema),z.lazy(() => SLAPlanUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SLAPlanCreateOrConnectWithoutTicketsInputSchema).optional(),
  upsert: z.lazy(() => SLAPlanUpsertWithoutTicketsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SLAPlanWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SLAPlanWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SLAPlanWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SLAPlanUpdateToOneWithWhereWithoutTicketsInputSchema),z.lazy(() => SLAPlanUpdateWithoutTicketsInputSchema),z.lazy(() => SLAPlanUncheckedUpdateWithoutTicketsInputSchema) ]).optional(),
}).strict();

export const TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema: z.ZodType<Prisma.TicketStatusUpdateOneRequiredWithoutTicketsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketStatusCreateWithoutTicketsInputSchema),z.lazy(() => TicketStatusUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketStatusCreateOrConnectWithoutTicketsInputSchema).optional(),
  upsert: z.lazy(() => TicketStatusUpsertWithoutTicketsInputSchema).optional(),
  connect: z.lazy(() => TicketStatusWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TicketStatusUpdateToOneWithWhereWithoutTicketsInputSchema),z.lazy(() => TicketStatusUpdateWithoutTicketsInputSchema),z.lazy(() => TicketStatusUncheckedUpdateWithoutTicketsInputSchema) ]).optional(),
}).strict();

export const TicketAttachmentUpdateManyWithoutTicketNestedInputSchema: z.ZodType<Prisma.TicketAttachmentUpdateManyWithoutTicketNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketAttachmentUpsertWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUpsertWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketAttachmentCreateManyTicketInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketAttachmentUpdateWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUpdateWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketAttachmentUpdateManyWithWhereWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUpdateManyWithWhereWithoutTicketInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketAttachmentScalarWhereInputSchema),z.lazy(() => TicketAttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema: z.ZodType<Prisma.TicketCollaboratorUpdateManyWithoutTicketNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCollaboratorCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketCollaboratorUpsertWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUpsertWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCollaboratorCreateManyTicketInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketCollaboratorUpdateWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUpdateWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketCollaboratorUpdateManyWithWhereWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUpdateManyWithWhereWithoutTicketInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketCollaboratorScalarWhereInputSchema),z.lazy(() => TicketCollaboratorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema: z.ZodType<Prisma.TicketCustomFieldUpdateManyWithoutTicketNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCustomFieldCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketCustomFieldUpsertWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUpsertWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCustomFieldCreateManyTicketInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketCustomFieldUpdateWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUpdateWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketCustomFieldUpdateManyWithWhereWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUpdateManyWithWhereWithoutTicketInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketCustomFieldScalarWhereInputSchema),z.lazy(() => TicketCustomFieldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketThreadUpdateOneWithoutTicketNestedInputSchema: z.ZodType<Prisma.TicketThreadUpdateOneWithoutTicketNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutTicketInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutTicketInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketThreadCreateOrConnectWithoutTicketInputSchema).optional(),
  upsert: z.lazy(() => TicketThreadUpsertWithoutTicketInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TicketThreadWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TicketThreadWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TicketThreadWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TicketThreadUpdateToOneWithWhereWithoutTicketInputSchema),z.lazy(() => TicketThreadUpdateWithoutTicketInputSchema),z.lazy(() => TicketThreadUncheckedUpdateWithoutTicketInputSchema) ]).optional(),
}).strict();

export const TicketUserUpdateManyWithoutTicketNestedInputSchema: z.ZodType<Prisma.TicketUserUpdateManyWithoutTicketNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketUserCreateWithoutTicketInputSchema),z.lazy(() => TicketUserCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketUserUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketUserCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketUserCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUserUpsertWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketUserUpsertWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketUserCreateManyTicketInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUserUpdateWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketUserUpdateWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUserUpdateManyWithWhereWithoutTicketInputSchema),z.lazy(() => TicketUserUpdateManyWithWhereWithoutTicketInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketUserScalarWhereInputSchema),z.lazy(() => TicketUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketAttachmentUpsertWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUpsertWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketAttachmentCreateManyTicketInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketAttachmentUpdateWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUpdateWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketAttachmentUpdateManyWithWhereWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUpdateManyWithWhereWithoutTicketInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketAttachmentScalarWhereInputSchema),z.lazy(() => TicketAttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCollaboratorCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketCollaboratorUpsertWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUpsertWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCollaboratorCreateManyTicketInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),z.lazy(() => TicketCollaboratorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketCollaboratorUpdateWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUpdateWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketCollaboratorUpdateManyWithWhereWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUpdateManyWithWhereWithoutTicketInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketCollaboratorScalarWhereInputSchema),z.lazy(() => TicketCollaboratorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCustomFieldCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketCustomFieldUpsertWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUpsertWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCustomFieldCreateManyTicketInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketCustomFieldUpdateWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUpdateWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketCustomFieldUpdateManyWithWhereWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUpdateManyWithWhereWithoutTicketInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketCustomFieldScalarWhereInputSchema),z.lazy(() => TicketCustomFieldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema: z.ZodType<Prisma.TicketThreadUncheckedUpdateOneWithoutTicketNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutTicketInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutTicketInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketThreadCreateOrConnectWithoutTicketInputSchema).optional(),
  upsert: z.lazy(() => TicketThreadUpsertWithoutTicketInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => TicketThreadWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => TicketThreadWhereInputSchema) ]).optional(),
  connect: z.lazy(() => TicketThreadWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TicketThreadUpdateToOneWithWhereWithoutTicketInputSchema),z.lazy(() => TicketThreadUpdateWithoutTicketInputSchema),z.lazy(() => TicketThreadUncheckedUpdateWithoutTicketInputSchema) ]).optional(),
}).strict();

export const TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema: z.ZodType<Prisma.TicketUserUncheckedUpdateManyWithoutTicketNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketUserCreateWithoutTicketInputSchema),z.lazy(() => TicketUserCreateWithoutTicketInputSchema).array(),z.lazy(() => TicketUserUncheckedCreateWithoutTicketInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutTicketInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketUserCreateOrConnectWithoutTicketInputSchema),z.lazy(() => TicketUserCreateOrConnectWithoutTicketInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUserUpsertWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketUserUpsertWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketUserCreateManyTicketInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketUserWhereUniqueInputSchema),z.lazy(() => TicketUserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUserUpdateWithWhereUniqueWithoutTicketInputSchema),z.lazy(() => TicketUserUpdateWithWhereUniqueWithoutTicketInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUserUpdateManyWithWhereWithoutTicketInputSchema),z.lazy(() => TicketUserUpdateManyWithWhereWithoutTicketInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketUserScalarWhereInputSchema),z.lazy(() => TicketUserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketCreateNestedManyWithoutStatusInputSchema: z.ZodType<Prisma.TicketCreateNestedManyWithoutStatusInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutStatusInputSchema),z.lazy(() => TicketCreateWithoutStatusInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutStatusInputSchema),z.lazy(() => TicketUncheckedCreateWithoutStatusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutStatusInputSchema),z.lazy(() => TicketCreateOrConnectWithoutStatusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyStatusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedCreateNestedManyWithoutStatusInputSchema: z.ZodType<Prisma.TicketUncheckedCreateNestedManyWithoutStatusInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutStatusInputSchema),z.lazy(() => TicketCreateWithoutStatusInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutStatusInputSchema),z.lazy(() => TicketUncheckedCreateWithoutStatusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutStatusInputSchema),z.lazy(() => TicketCreateOrConnectWithoutStatusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyStatusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUpdateManyWithoutStatusNestedInputSchema: z.ZodType<Prisma.TicketUpdateManyWithoutStatusNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutStatusInputSchema),z.lazy(() => TicketCreateWithoutStatusInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutStatusInputSchema),z.lazy(() => TicketUncheckedCreateWithoutStatusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutStatusInputSchema),z.lazy(() => TicketCreateOrConnectWithoutStatusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutStatusInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutStatusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyStatusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutStatusInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutStatusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutStatusInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutStatusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedUpdateManyWithoutStatusNestedInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutStatusNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutStatusInputSchema),z.lazy(() => TicketCreateWithoutStatusInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutStatusInputSchema),z.lazy(() => TicketUncheckedCreateWithoutStatusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutStatusInputSchema),z.lazy(() => TicketCreateOrConnectWithoutStatusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutStatusInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutStatusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyStatusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutStatusInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutStatusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutStatusInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutStatusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketCreateNestedManyWithoutPriorityInputSchema: z.ZodType<Prisma.TicketCreateNestedManyWithoutPriorityInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutPriorityInputSchema),z.lazy(() => TicketCreateWithoutPriorityInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutPriorityInputSchema),z.lazy(() => TicketUncheckedCreateWithoutPriorityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutPriorityInputSchema),z.lazy(() => TicketCreateOrConnectWithoutPriorityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyPriorityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedCreateNestedManyWithoutPriorityInputSchema: z.ZodType<Prisma.TicketUncheckedCreateNestedManyWithoutPriorityInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutPriorityInputSchema),z.lazy(() => TicketCreateWithoutPriorityInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutPriorityInputSchema),z.lazy(() => TicketUncheckedCreateWithoutPriorityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutPriorityInputSchema),z.lazy(() => TicketCreateOrConnectWithoutPriorityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyPriorityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUpdateManyWithoutPriorityNestedInputSchema: z.ZodType<Prisma.TicketUpdateManyWithoutPriorityNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutPriorityInputSchema),z.lazy(() => TicketCreateWithoutPriorityInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutPriorityInputSchema),z.lazy(() => TicketUncheckedCreateWithoutPriorityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutPriorityInputSchema),z.lazy(() => TicketCreateOrConnectWithoutPriorityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutPriorityInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutPriorityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyPriorityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutPriorityInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutPriorityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutPriorityInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutPriorityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedUpdateManyWithoutPriorityNestedInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutPriorityNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutPriorityInputSchema),z.lazy(() => TicketCreateWithoutPriorityInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutPriorityInputSchema),z.lazy(() => TicketUncheckedCreateWithoutPriorityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutPriorityInputSchema),z.lazy(() => TicketCreateOrConnectWithoutPriorityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutPriorityInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutPriorityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyPriorityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutPriorityInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutPriorityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutPriorityInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutPriorityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DepartmentCreateNestedOneWithoutHelpTopicsInputSchema: z.ZodType<Prisma.DepartmentCreateNestedOneWithoutHelpTopicsInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutHelpTopicsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutHelpTopicsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DepartmentCreateOrConnectWithoutHelpTopicsInputSchema).optional(),
  connect: z.lazy(() => DepartmentWhereUniqueInputSchema).optional()
}).strict();

export const TicketCreateNestedManyWithoutHelpTopicInputSchema: z.ZodType<Prisma.TicketCreateNestedManyWithoutHelpTopicInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutHelpTopicInputSchema),z.lazy(() => TicketCreateWithoutHelpTopicInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutHelpTopicInputSchema),z.lazy(() => TicketUncheckedCreateWithoutHelpTopicInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutHelpTopicInputSchema),z.lazy(() => TicketCreateOrConnectWithoutHelpTopicInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyHelpTopicInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedCreateNestedManyWithoutHelpTopicInputSchema: z.ZodType<Prisma.TicketUncheckedCreateNestedManyWithoutHelpTopicInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutHelpTopicInputSchema),z.lazy(() => TicketCreateWithoutHelpTopicInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutHelpTopicInputSchema),z.lazy(() => TicketUncheckedCreateWithoutHelpTopicInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutHelpTopicInputSchema),z.lazy(() => TicketCreateOrConnectWithoutHelpTopicInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyHelpTopicInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DepartmentUpdateOneRequiredWithoutHelpTopicsNestedInputSchema: z.ZodType<Prisma.DepartmentUpdateOneRequiredWithoutHelpTopicsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DepartmentCreateWithoutHelpTopicsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutHelpTopicsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => DepartmentCreateOrConnectWithoutHelpTopicsInputSchema).optional(),
  upsert: z.lazy(() => DepartmentUpsertWithoutHelpTopicsInputSchema).optional(),
  connect: z.lazy(() => DepartmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => DepartmentUpdateToOneWithWhereWithoutHelpTopicsInputSchema),z.lazy(() => DepartmentUpdateWithoutHelpTopicsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutHelpTopicsInputSchema) ]).optional(),
}).strict();

export const TicketUpdateManyWithoutHelpTopicNestedInputSchema: z.ZodType<Prisma.TicketUpdateManyWithoutHelpTopicNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutHelpTopicInputSchema),z.lazy(() => TicketCreateWithoutHelpTopicInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutHelpTopicInputSchema),z.lazy(() => TicketUncheckedCreateWithoutHelpTopicInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutHelpTopicInputSchema),z.lazy(() => TicketCreateOrConnectWithoutHelpTopicInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutHelpTopicInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutHelpTopicInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyHelpTopicInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutHelpTopicInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutHelpTopicInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutHelpTopicInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutHelpTopicInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedUpdateManyWithoutHelpTopicNestedInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutHelpTopicNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutHelpTopicInputSchema),z.lazy(() => TicketCreateWithoutHelpTopicInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutHelpTopicInputSchema),z.lazy(() => TicketUncheckedCreateWithoutHelpTopicInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutHelpTopicInputSchema),z.lazy(() => TicketCreateOrConnectWithoutHelpTopicInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutHelpTopicInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutHelpTopicInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManyHelpTopicInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutHelpTopicInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutHelpTopicInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutHelpTopicInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutHelpTopicInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketCreateNestedManyWithoutSlaPlanInputSchema: z.ZodType<Prisma.TicketCreateNestedManyWithoutSlaPlanInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutSlaPlanInputSchema),z.lazy(() => TicketCreateWithoutSlaPlanInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutSlaPlanInputSchema),z.lazy(() => TicketUncheckedCreateWithoutSlaPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutSlaPlanInputSchema),z.lazy(() => TicketCreateOrConnectWithoutSlaPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManySlaPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedCreateNestedManyWithoutSlaPlanInputSchema: z.ZodType<Prisma.TicketUncheckedCreateNestedManyWithoutSlaPlanInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutSlaPlanInputSchema),z.lazy(() => TicketCreateWithoutSlaPlanInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutSlaPlanInputSchema),z.lazy(() => TicketUncheckedCreateWithoutSlaPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutSlaPlanInputSchema),z.lazy(() => TicketCreateOrConnectWithoutSlaPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManySlaPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketUpdateManyWithoutSlaPlanNestedInputSchema: z.ZodType<Prisma.TicketUpdateManyWithoutSlaPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutSlaPlanInputSchema),z.lazy(() => TicketCreateWithoutSlaPlanInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutSlaPlanInputSchema),z.lazy(() => TicketUncheckedCreateWithoutSlaPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutSlaPlanInputSchema),z.lazy(() => TicketCreateOrConnectWithoutSlaPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutSlaPlanInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutSlaPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManySlaPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutSlaPlanInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutSlaPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutSlaPlanInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutSlaPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUncheckedUpdateManyWithoutSlaPlanNestedInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutSlaPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutSlaPlanInputSchema),z.lazy(() => TicketCreateWithoutSlaPlanInputSchema).array(),z.lazy(() => TicketUncheckedCreateWithoutSlaPlanInputSchema),z.lazy(() => TicketUncheckedCreateWithoutSlaPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCreateOrConnectWithoutSlaPlanInputSchema),z.lazy(() => TicketCreateOrConnectWithoutSlaPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketUpsertWithWhereUniqueWithoutSlaPlanInputSchema),z.lazy(() => TicketUpsertWithWhereUniqueWithoutSlaPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCreateManySlaPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketWhereUniqueInputSchema),z.lazy(() => TicketWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketUpdateWithWhereUniqueWithoutSlaPlanInputSchema),z.lazy(() => TicketUpdateWithWhereUniqueWithoutSlaPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketUpdateManyWithWhereWithoutSlaPlanInputSchema),z.lazy(() => TicketUpdateManyWithWhereWithoutSlaPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketAttachmentCreateNestedManyWithoutTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentCreateNestedManyWithoutTicketThreadInput> = z.object({
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentCreateWithoutTicketThreadInputSchema).array(),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketThreadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketThreadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketAttachmentCreateManyTicketThreadInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCreateNestedOneWithoutThreadsInputSchema: z.ZodType<Prisma.TicketCreateNestedOneWithoutThreadsInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutThreadsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutThreadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketCreateOrConnectWithoutThreadsInputSchema).optional(),
  connect: z.lazy(() => TicketWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutTicketThreadsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTicketThreadsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTicketThreadsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketThreadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTicketThreadsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TicketAttachmentUncheckedCreateNestedManyWithoutTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedCreateNestedManyWithoutTicketThreadInput> = z.object({
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentCreateWithoutTicketThreadInputSchema).array(),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketThreadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketThreadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketAttachmentCreateManyTicketThreadInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketAttachmentUpdateManyWithoutTicketThreadNestedInputSchema: z.ZodType<Prisma.TicketAttachmentUpdateManyWithoutTicketThreadNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentCreateWithoutTicketThreadInputSchema).array(),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketThreadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketThreadInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketAttachmentUpsertWithWhereUniqueWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUpsertWithWhereUniqueWithoutTicketThreadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketAttachmentCreateManyTicketThreadInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketAttachmentUpdateWithWhereUniqueWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUpdateWithWhereUniqueWithoutTicketThreadInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketAttachmentUpdateManyWithWhereWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUpdateManyWithWhereWithoutTicketThreadInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketAttachmentScalarWhereInputSchema),z.lazy(() => TicketAttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketUpdateOneRequiredWithoutThreadsNestedInputSchema: z.ZodType<Prisma.TicketUpdateOneRequiredWithoutThreadsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutThreadsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutThreadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketCreateOrConnectWithoutThreadsInputSchema).optional(),
  upsert: z.lazy(() => TicketUpsertWithoutThreadsInputSchema).optional(),
  connect: z.lazy(() => TicketWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TicketUpdateToOneWithWhereWithoutThreadsInputSchema),z.lazy(() => TicketUpdateWithoutThreadsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutThreadsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutTicketThreadsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTicketThreadsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTicketThreadsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketThreadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTicketThreadsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTicketThreadsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTicketThreadsInputSchema),z.lazy(() => UserUpdateWithoutTicketThreadsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketThreadsInputSchema) ]).optional(),
}).strict();

export const TicketAttachmentUncheckedUpdateManyWithoutTicketThreadNestedInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedUpdateManyWithoutTicketThreadNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentCreateWithoutTicketThreadInputSchema).array(),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketThreadInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentCreateOrConnectWithoutTicketThreadInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketAttachmentUpsertWithWhereUniqueWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUpsertWithWhereUniqueWithoutTicketThreadInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketAttachmentCreateManyTicketThreadInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketAttachmentWhereUniqueInputSchema),z.lazy(() => TicketAttachmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketAttachmentUpdateWithWhereUniqueWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUpdateWithWhereUniqueWithoutTicketThreadInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketAttachmentUpdateManyWithWhereWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUpdateManyWithWhereWithoutTicketThreadInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketAttachmentScalarWhereInputSchema),z.lazy(() => TicketAttachmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketCreateNestedOneWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketCreateNestedOneWithoutAttachmentsInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutAttachmentsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutAttachmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketCreateOrConnectWithoutAttachmentsInputSchema).optional(),
  connect: z.lazy(() => TicketWhereUniqueInputSchema).optional()
}).strict();

export const TicketThreadCreateNestedOneWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketThreadCreateNestedOneWithoutAttachmentsInput> = z.object({
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutAttachmentsInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutAttachmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketThreadCreateOrConnectWithoutAttachmentsInputSchema).optional(),
  connect: z.lazy(() => TicketThreadWhereUniqueInputSchema).optional()
}).strict();

export const TicketUpdateOneRequiredWithoutAttachmentsNestedInputSchema: z.ZodType<Prisma.TicketUpdateOneRequiredWithoutAttachmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutAttachmentsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutAttachmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketCreateOrConnectWithoutAttachmentsInputSchema).optional(),
  upsert: z.lazy(() => TicketUpsertWithoutAttachmentsInputSchema).optional(),
  connect: z.lazy(() => TicketWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TicketUpdateToOneWithWhereWithoutAttachmentsInputSchema),z.lazy(() => TicketUpdateWithoutAttachmentsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutAttachmentsInputSchema) ]).optional(),
}).strict();

export const TicketThreadUpdateOneRequiredWithoutAttachmentsNestedInputSchema: z.ZodType<Prisma.TicketThreadUpdateOneRequiredWithoutAttachmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutAttachmentsInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutAttachmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketThreadCreateOrConnectWithoutAttachmentsInputSchema).optional(),
  upsert: z.lazy(() => TicketThreadUpsertWithoutAttachmentsInputSchema).optional(),
  connect: z.lazy(() => TicketThreadWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TicketThreadUpdateToOneWithWhereWithoutAttachmentsInputSchema),z.lazy(() => TicketThreadUpdateWithoutAttachmentsInputSchema),z.lazy(() => TicketThreadUncheckedUpdateWithoutAttachmentsInputSchema) ]).optional(),
}).strict();

export const TicketCreateNestedOneWithoutCollaboratorsInputSchema: z.ZodType<Prisma.TicketCreateNestedOneWithoutCollaboratorsInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutCollaboratorsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCollaboratorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketCreateOrConnectWithoutCollaboratorsInputSchema).optional(),
  connect: z.lazy(() => TicketWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutTicketCollaboratorsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTicketCollaboratorsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTicketCollaboratorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketCollaboratorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTicketCollaboratorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TicketUpdateOneRequiredWithoutCollaboratorsNestedInputSchema: z.ZodType<Prisma.TicketUpdateOneRequiredWithoutCollaboratorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutCollaboratorsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCollaboratorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketCreateOrConnectWithoutCollaboratorsInputSchema).optional(),
  upsert: z.lazy(() => TicketUpsertWithoutCollaboratorsInputSchema).optional(),
  connect: z.lazy(() => TicketWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TicketUpdateToOneWithWhereWithoutCollaboratorsInputSchema),z.lazy(() => TicketUpdateWithoutCollaboratorsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutCollaboratorsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutTicketCollaboratorsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTicketCollaboratorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTicketCollaboratorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketCollaboratorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTicketCollaboratorsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTicketCollaboratorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTicketCollaboratorsInputSchema),z.lazy(() => UserUpdateWithoutTicketCollaboratorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketCollaboratorsInputSchema) ]).optional(),
}).strict();

export const TicketCustomFieldCreateNestedManyWithoutFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldCreateNestedManyWithoutFieldInput> = z.object({
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldCreateWithoutFieldInputSchema).array(),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutFieldInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCustomFieldCreateOrConnectWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldCreateOrConnectWithoutFieldInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCustomFieldCreateManyFieldInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCustomFieldUncheckedCreateNestedManyWithoutFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedCreateNestedManyWithoutFieldInput> = z.object({
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldCreateWithoutFieldInputSchema).array(),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutFieldInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCustomFieldCreateOrConnectWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldCreateOrConnectWithoutFieldInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCustomFieldCreateManyFieldInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TicketCustomFieldUpdateManyWithoutFieldNestedInputSchema: z.ZodType<Prisma.TicketCustomFieldUpdateManyWithoutFieldNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldCreateWithoutFieldInputSchema).array(),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutFieldInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCustomFieldCreateOrConnectWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldCreateOrConnectWithoutFieldInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketCustomFieldUpsertWithWhereUniqueWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUpsertWithWhereUniqueWithoutFieldInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCustomFieldCreateManyFieldInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketCustomFieldUpdateWithWhereUniqueWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUpdateWithWhereUniqueWithoutFieldInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketCustomFieldUpdateManyWithWhereWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUpdateManyWithWhereWithoutFieldInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketCustomFieldScalarWhereInputSchema),z.lazy(() => TicketCustomFieldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TicketCustomFieldUncheckedUpdateManyWithoutFieldNestedInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedUpdateManyWithoutFieldNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldCreateWithoutFieldInputSchema).array(),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutFieldInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TicketCustomFieldCreateOrConnectWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldCreateOrConnectWithoutFieldInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TicketCustomFieldUpsertWithWhereUniqueWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUpsertWithWhereUniqueWithoutFieldInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TicketCustomFieldCreateManyFieldInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),z.lazy(() => TicketCustomFieldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TicketCustomFieldUpdateWithWhereUniqueWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUpdateWithWhereUniqueWithoutFieldInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TicketCustomFieldUpdateManyWithWhereWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUpdateManyWithWhereWithoutFieldInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TicketCustomFieldScalarWhereInputSchema),z.lazy(() => TicketCustomFieldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomFieldCreateNestedOneWithoutTicketsInputSchema: z.ZodType<Prisma.CustomFieldCreateNestedOneWithoutTicketsInput> = z.object({
  create: z.union([ z.lazy(() => CustomFieldCreateWithoutTicketsInputSchema),z.lazy(() => CustomFieldUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomFieldCreateOrConnectWithoutTicketsInputSchema).optional(),
  connect: z.lazy(() => CustomFieldWhereUniqueInputSchema).optional()
}).strict();

export const TicketCreateNestedOneWithoutCustomFieldsInputSchema: z.ZodType<Prisma.TicketCreateNestedOneWithoutCustomFieldsInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutCustomFieldsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCustomFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketCreateOrConnectWithoutCustomFieldsInputSchema).optional(),
  connect: z.lazy(() => TicketWhereUniqueInputSchema).optional()
}).strict();

export const CustomFieldUpdateOneRequiredWithoutTicketsNestedInputSchema: z.ZodType<Prisma.CustomFieldUpdateOneRequiredWithoutTicketsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomFieldCreateWithoutTicketsInputSchema),z.lazy(() => CustomFieldUncheckedCreateWithoutTicketsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CustomFieldCreateOrConnectWithoutTicketsInputSchema).optional(),
  upsert: z.lazy(() => CustomFieldUpsertWithoutTicketsInputSchema).optional(),
  connect: z.lazy(() => CustomFieldWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CustomFieldUpdateToOneWithWhereWithoutTicketsInputSchema),z.lazy(() => CustomFieldUpdateWithoutTicketsInputSchema),z.lazy(() => CustomFieldUncheckedUpdateWithoutTicketsInputSchema) ]).optional(),
}).strict();

export const TicketUpdateOneRequiredWithoutCustomFieldsNestedInputSchema: z.ZodType<Prisma.TicketUpdateOneRequiredWithoutCustomFieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutCustomFieldsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCustomFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketCreateOrConnectWithoutCustomFieldsInputSchema).optional(),
  upsert: z.lazy(() => TicketUpsertWithoutCustomFieldsInputSchema).optional(),
  connect: z.lazy(() => TicketWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TicketUpdateToOneWithWhereWithoutCustomFieldsInputSchema),z.lazy(() => TicketUpdateWithoutCustomFieldsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutCustomFieldsInputSchema) ]).optional(),
}).strict();

export const TaskCreateNestedOneWithoutTaskUsersInputSchema: z.ZodType<Prisma.TaskCreateNestedOneWithoutTaskUsersInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskUsersInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutTaskUsersInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutTaskUsersInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTaskUsersInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTaskUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTaskUsersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TaskUpdateOneRequiredWithoutTaskUsersNestedInputSchema: z.ZodType<Prisma.TaskUpdateOneRequiredWithoutTaskUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskUsersInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaskCreateOrConnectWithoutTaskUsersInputSchema).optional(),
  upsert: z.lazy(() => TaskUpsertWithoutTaskUsersInputSchema).optional(),
  connect: z.lazy(() => TaskWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaskUpdateToOneWithWhereWithoutTaskUsersInputSchema),z.lazy(() => TaskUpdateWithoutTaskUsersInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTaskUsersInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutTaskUsersNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTaskUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTaskUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTaskUsersInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTaskUsersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTaskUsersInputSchema),z.lazy(() => UserUpdateWithoutTaskUsersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTaskUsersInputSchema) ]).optional(),
}).strict();

export const TicketCreateNestedOneWithoutTicketUsersInputSchema: z.ZodType<Prisma.TicketCreateNestedOneWithoutTicketUsersInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutTicketUsersInputSchema),z.lazy(() => TicketUncheckedCreateWithoutTicketUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketCreateOrConnectWithoutTicketUsersInputSchema).optional(),
  connect: z.lazy(() => TicketWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutTicketUsersInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTicketUsersInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTicketUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTicketUsersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const TicketUpdateOneRequiredWithoutTicketUsersNestedInputSchema: z.ZodType<Prisma.TicketUpdateOneRequiredWithoutTicketUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => TicketCreateWithoutTicketUsersInputSchema),z.lazy(() => TicketUncheckedCreateWithoutTicketUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TicketCreateOrConnectWithoutTicketUsersInputSchema).optional(),
  upsert: z.lazy(() => TicketUpsertWithoutTicketUsersInputSchema).optional(),
  connect: z.lazy(() => TicketWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TicketUpdateToOneWithWhereWithoutTicketUsersInputSchema),z.lazy(() => TicketUpdateWithoutTicketUsersInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutTicketUsersInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutTicketUsersNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTicketUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTicketUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTicketUsersInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTicketUsersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTicketUsersInputSchema),z.lazy(() => UserUpdateWithoutTicketUsersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketUsersInputSchema) ]).optional(),
}).strict();

export const back3nd_password_resetCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.back3nd_password_resetCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_password_resetCreateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetCreateWithoutUserInputSchema).array(),z.lazy(() => back3nd_password_resetUncheckedCreateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_password_resetCreateOrConnectWithoutUserInputSchema),z.lazy(() => back3nd_password_resetCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_password_resetCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),z.lazy(() => back3nd_password_resetWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const back3nd_user_roleCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.back3nd_user_roleCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleCreateWithoutUserInputSchema).array(),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_user_roleCreateOrConnectWithoutUserInputSchema),z.lazy(() => back3nd_user_roleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_user_roleCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const back3nd_password_resetUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.back3nd_password_resetUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_password_resetCreateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetCreateWithoutUserInputSchema).array(),z.lazy(() => back3nd_password_resetUncheckedCreateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_password_resetCreateOrConnectWithoutUserInputSchema),z.lazy(() => back3nd_password_resetCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_password_resetCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),z.lazy(() => back3nd_password_resetWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const back3nd_user_roleUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleCreateWithoutUserInputSchema).array(),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_user_roleCreateOrConnectWithoutUserInputSchema),z.lazy(() => back3nd_user_roleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_user_roleCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const back3nd_password_resetUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.back3nd_password_resetUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_password_resetCreateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetCreateWithoutUserInputSchema).array(),z.lazy(() => back3nd_password_resetUncheckedCreateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_password_resetCreateOrConnectWithoutUserInputSchema),z.lazy(() => back3nd_password_resetCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => back3nd_password_resetUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_password_resetCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),z.lazy(() => back3nd_password_resetWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),z.lazy(() => back3nd_password_resetWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),z.lazy(() => back3nd_password_resetWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),z.lazy(() => back3nd_password_resetWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => back3nd_password_resetUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => back3nd_password_resetUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => back3nd_password_resetScalarWhereInputSchema),z.lazy(() => back3nd_password_resetScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const back3nd_user_roleUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.back3nd_user_roleUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleCreateWithoutUserInputSchema).array(),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_user_roleCreateOrConnectWithoutUserInputSchema),z.lazy(() => back3nd_user_roleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => back3nd_user_roleUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_user_roleCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => back3nd_user_roleUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => back3nd_user_roleUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => back3nd_user_roleScalarWhereInputSchema),z.lazy(() => back3nd_user_roleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const back3nd_password_resetUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.back3nd_password_resetUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_password_resetCreateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetCreateWithoutUserInputSchema).array(),z.lazy(() => back3nd_password_resetUncheckedCreateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_password_resetCreateOrConnectWithoutUserInputSchema),z.lazy(() => back3nd_password_resetCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => back3nd_password_resetUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_password_resetCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),z.lazy(() => back3nd_password_resetWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),z.lazy(() => back3nd_password_resetWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),z.lazy(() => back3nd_password_resetWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),z.lazy(() => back3nd_password_resetWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => back3nd_password_resetUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => back3nd_password_resetUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => back3nd_password_resetScalarWhereInputSchema),z.lazy(() => back3nd_password_resetScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const back3nd_user_roleUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleCreateWithoutUserInputSchema).array(),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_user_roleCreateOrConnectWithoutUserInputSchema),z.lazy(() => back3nd_user_roleCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => back3nd_user_roleUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_user_roleCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => back3nd_user_roleUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => back3nd_user_roleUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => back3nd_user_roleScalarWhereInputSchema),z.lazy(() => back3nd_user_roleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const back3nd_permissionCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_permissionCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_permissionCreateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionCreateWithoutRoleInputSchema).array(),z.lazy(() => back3nd_permissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_permissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => back3nd_permissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_permissionCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => back3nd_permissionWhereUniqueInputSchema),z.lazy(() => back3nd_permissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const back3nd_user_roleCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleCreateWithoutRoleInputSchema).array(),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_user_roleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_user_roleCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const back3nd_permissionUncheckedCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_permissionUncheckedCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_permissionCreateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionCreateWithoutRoleInputSchema).array(),z.lazy(() => back3nd_permissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_permissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => back3nd_permissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_permissionCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => back3nd_permissionWhereUniqueInputSchema),z.lazy(() => back3nd_permissionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const back3nd_user_roleUncheckedCreateNestedManyWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedCreateNestedManyWithoutRoleInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleCreateWithoutRoleInputSchema).array(),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_user_roleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_user_roleCreateManyRoleInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const back3nd_permissionUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.back3nd_permissionUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_permissionCreateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionCreateWithoutRoleInputSchema).array(),z.lazy(() => back3nd_permissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_permissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => back3nd_permissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => back3nd_permissionUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_permissionCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => back3nd_permissionWhereUniqueInputSchema),z.lazy(() => back3nd_permissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => back3nd_permissionWhereUniqueInputSchema),z.lazy(() => back3nd_permissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => back3nd_permissionWhereUniqueInputSchema),z.lazy(() => back3nd_permissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => back3nd_permissionWhereUniqueInputSchema),z.lazy(() => back3nd_permissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => back3nd_permissionUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => back3nd_permissionUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => back3nd_permissionScalarWhereInputSchema),z.lazy(() => back3nd_permissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const back3nd_user_roleUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.back3nd_user_roleUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleCreateWithoutRoleInputSchema).array(),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_user_roleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => back3nd_user_roleUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_user_roleCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => back3nd_user_roleUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => back3nd_user_roleUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => back3nd_user_roleScalarWhereInputSchema),z.lazy(() => back3nd_user_roleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const back3nd_permissionUncheckedUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.back3nd_permissionUncheckedUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_permissionCreateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionCreateWithoutRoleInputSchema).array(),z.lazy(() => back3nd_permissionUncheckedCreateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_permissionCreateOrConnectWithoutRoleInputSchema),z.lazy(() => back3nd_permissionCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => back3nd_permissionUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_permissionCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => back3nd_permissionWhereUniqueInputSchema),z.lazy(() => back3nd_permissionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => back3nd_permissionWhereUniqueInputSchema),z.lazy(() => back3nd_permissionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => back3nd_permissionWhereUniqueInputSchema),z.lazy(() => back3nd_permissionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => back3nd_permissionWhereUniqueInputSchema),z.lazy(() => back3nd_permissionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => back3nd_permissionUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => back3nd_permissionUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => back3nd_permissionScalarWhereInputSchema),z.lazy(() => back3nd_permissionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const back3nd_user_roleUncheckedUpdateManyWithoutRoleNestedInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedUpdateManyWithoutRoleNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleCreateWithoutRoleInputSchema).array(),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutRoleInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => back3nd_user_roleCreateOrConnectWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleCreateOrConnectWithoutRoleInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => back3nd_user_roleUpsertWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUpsertWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  createMany: z.lazy(() => back3nd_user_roleCreateManyRoleInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),z.lazy(() => back3nd_user_roleWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => back3nd_user_roleUpdateWithWhereUniqueWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUpdateWithWhereUniqueWithoutRoleInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => back3nd_user_roleUpdateManyWithWhereWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUpdateManyWithWhereWithoutRoleInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => back3nd_user_roleScalarWhereInputSchema),z.lazy(() => back3nd_user_roleScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const back3nd_roleCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.back3nd_roleCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_roleCreateWithoutUsersInputSchema),z.lazy(() => back3nd_roleUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => back3nd_roleCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => back3nd_roleWhereUniqueInputSchema).optional()
}).strict();

export const back3nd_userCreateNestedOneWithoutRolesInputSchema: z.ZodType<Prisma.back3nd_userCreateNestedOneWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_userCreateWithoutRolesInputSchema),z.lazy(() => back3nd_userUncheckedCreateWithoutRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => back3nd_userCreateOrConnectWithoutRolesInputSchema).optional(),
  connect: z.lazy(() => back3nd_userWhereUniqueInputSchema).optional()
}).strict();

export const back3nd_roleUpdateOneRequiredWithoutUsersNestedInputSchema: z.ZodType<Prisma.back3nd_roleUpdateOneRequiredWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_roleCreateWithoutUsersInputSchema),z.lazy(() => back3nd_roleUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => back3nd_roleCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => back3nd_roleUpsertWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => back3nd_roleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => back3nd_roleUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => back3nd_roleUpdateWithoutUsersInputSchema),z.lazy(() => back3nd_roleUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const back3nd_userUpdateOneRequiredWithoutRolesNestedInputSchema: z.ZodType<Prisma.back3nd_userUpdateOneRequiredWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_userCreateWithoutRolesInputSchema),z.lazy(() => back3nd_userUncheckedCreateWithoutRolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => back3nd_userCreateOrConnectWithoutRolesInputSchema).optional(),
  upsert: z.lazy(() => back3nd_userUpsertWithoutRolesInputSchema).optional(),
  connect: z.lazy(() => back3nd_userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => back3nd_userUpdateToOneWithWhereWithoutRolesInputSchema),z.lazy(() => back3nd_userUpdateWithoutRolesInputSchema),z.lazy(() => back3nd_userUncheckedUpdateWithoutRolesInputSchema) ]).optional(),
}).strict();

export const back3nd_roleCreateNestedOneWithoutPermissionsInputSchema: z.ZodType<Prisma.back3nd_roleCreateNestedOneWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_roleCreateWithoutPermissionsInputSchema),z.lazy(() => back3nd_roleUncheckedCreateWithoutPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => back3nd_roleCreateOrConnectWithoutPermissionsInputSchema).optional(),
  connect: z.lazy(() => back3nd_roleWhereUniqueInputSchema).optional()
}).strict();

export const back3nd_roleUpdateOneRequiredWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.back3nd_roleUpdateOneRequiredWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_roleCreateWithoutPermissionsInputSchema),z.lazy(() => back3nd_roleUncheckedCreateWithoutPermissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => back3nd_roleCreateOrConnectWithoutPermissionsInputSchema).optional(),
  upsert: z.lazy(() => back3nd_roleUpsertWithoutPermissionsInputSchema).optional(),
  connect: z.lazy(() => back3nd_roleWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => back3nd_roleUpdateToOneWithWhereWithoutPermissionsInputSchema),z.lazy(() => back3nd_roleUpdateWithoutPermissionsInputSchema),z.lazy(() => back3nd_roleUncheckedUpdateWithoutPermissionsInputSchema) ]).optional(),
}).strict();

export const back3nd_userCreateNestedOneWithoutBack3nd_password_resetInputSchema: z.ZodType<Prisma.back3nd_userCreateNestedOneWithoutBack3nd_password_resetInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_userCreateWithoutBack3nd_password_resetInputSchema),z.lazy(() => back3nd_userUncheckedCreateWithoutBack3nd_password_resetInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => back3nd_userCreateOrConnectWithoutBack3nd_password_resetInputSchema).optional(),
  connect: z.lazy(() => back3nd_userWhereUniqueInputSchema).optional()
}).strict();

export const back3nd_userUpdateOneRequiredWithoutBack3nd_password_resetNestedInputSchema: z.ZodType<Prisma.back3nd_userUpdateOneRequiredWithoutBack3nd_password_resetNestedInput> = z.object({
  create: z.union([ z.lazy(() => back3nd_userCreateWithoutBack3nd_password_resetInputSchema),z.lazy(() => back3nd_userUncheckedCreateWithoutBack3nd_password_resetInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => back3nd_userCreateOrConnectWithoutBack3nd_password_resetInputSchema).optional(),
  upsert: z.lazy(() => back3nd_userUpsertWithoutBack3nd_password_resetInputSchema).optional(),
  connect: z.lazy(() => back3nd_userWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => back3nd_userUpdateToOneWithWhereWithoutBack3nd_password_resetInputSchema),z.lazy(() => back3nd_userUpdateWithoutBack3nd_password_resetInputSchema),z.lazy(() => back3nd_userUncheckedUpdateWithoutBack3nd_password_resetInputSchema) ]).optional(),
}).strict();

export const NestedUuidFilterSchema: z.ZodType<Prisma.NestedUuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedUuidWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedUuidNullableFilterSchema: z.ZodType<Prisma.NestedUuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedUuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  search: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AuditLogCreateWithoutPerformedByInputSchema: z.ZodType<Prisma.AuditLogCreateWithoutPerformedByInput> = z.object({
  id: z.string().optional(),
  action: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable(),
  task: z.lazy(() => TaskCreateNestedOneWithoutAuditLogsInputSchema).optional(),
  workflow: z.lazy(() => WorkflowCreateNestedOneWithoutAuditLogsInputSchema).optional()
}).strict();

export const AuditLogUncheckedCreateWithoutPerformedByInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateWithoutPerformedByInput> = z.object({
  id: z.string().optional(),
  taskId: z.string().optional().nullable(),
  workflowId: z.string().optional().nullable(),
  action: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable()
}).strict();

export const AuditLogCreateOrConnectWithoutPerformedByInputSchema: z.ZodType<Prisma.AuditLogCreateOrConnectWithoutPerformedByInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutPerformedByInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutPerformedByInputSchema) ]),
}).strict();

export const AuditLogCreateManyPerformedByInputEnvelopeSchema: z.ZodType<Prisma.AuditLogCreateManyPerformedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AuditLogCreateManyPerformedByInputSchema),z.lazy(() => AuditLogCreateManyPerformedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DigitalCertificateCreateWithoutUserInputSchema: z.ZodType<Prisma.DigitalCertificateCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  alias: z.string(),
  filePath: z.string(),
  password: z.string(),
  createdAt: z.coerce.date().optional(),
  expiration: z.coerce.date()
}).strict();

export const DigitalCertificateUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.DigitalCertificateUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  alias: z.string(),
  filePath: z.string(),
  password: z.string(),
  createdAt: z.coerce.date().optional(),
  expiration: z.coerce.date()
}).strict();

export const DigitalCertificateCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.DigitalCertificateCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => DigitalCertificateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DigitalCertificateCreateWithoutUserInputSchema),z.lazy(() => DigitalCertificateUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DigitalCertificateCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.DigitalCertificateCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DigitalCertificateCreateManyUserInputSchema),z.lazy(() => DigitalCertificateCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DocumentUserCreateWithoutUserInputSchema: z.ZodType<Prisma.DocumentUserCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutDocumentUsersInputSchema)
}).strict();

export const DocumentUserUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.DocumentUserUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentUserCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.DocumentUserCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => DocumentUserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutUserInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DocumentUserCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.DocumentUserCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DocumentUserCreateManyUserInputSchema),z.lazy(() => DocumentUserCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DocumentVersionCreatorCreateWithoutUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  version: z.lazy(() => DocumentVersionCreateNestedOneWithoutDocumentVersionCreatorsInputSchema)
}).strict();

export const DocumentVersionCreatorUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  versionId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentVersionCreatorCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DocumentVersionCreatorCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DocumentVersionCreatorCreateManyUserInputSchema),z.lazy(() => DocumentVersionCreatorCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const NotificationCreateWithoutUserInputSchema: z.ZodType<Prisma.NotificationCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  message: z.string(),
  read: z.boolean().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const NotificationUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.NotificationUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  message: z.string(),
  read: z.boolean().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const NotificationCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.NotificationCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => NotificationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => NotificationCreateWithoutUserInputSchema),z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const NotificationCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.NotificationCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => NotificationCreateManyUserInputSchema),z.lazy(() => NotificationCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SharedDocumentCreateWithoutUserInputSchema: z.ZodType<Prisma.SharedDocumentCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  sharedAt: z.coerce.date().optional(),
  permission: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutSharedDocumentsInputSchema)
}).strict();

export const SharedDocumentUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  sharedAt: z.coerce.date().optional(),
  permission: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SharedDocumentCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SharedDocumentCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SharedDocumentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutUserInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SharedDocumentCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SharedDocumentCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SharedDocumentCreateManyUserInputSchema),z.lazy(() => SharedDocumentCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskCreateWithoutAssignedToInputSchema: z.ZodType<Prisma.TaskCreateWithoutAssignedToInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutTaskInputSchema).optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutTasksInputSchema).optional(),
  workflow: z.lazy(() => WorkflowCreateNestedOneWithoutTasksInputSchema),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutAssignedToInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutAssignedToInput> = z.object({
  id: z.string().optional(),
  workflowId: z.string(),
  documentId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutAssignedToInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutAssignedToInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutAssignedToInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAssignedToInputSchema) ]),
}).strict();

export const TaskCreateManyAssignedToInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyAssignedToInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TaskCreateManyAssignedToInputSchema),z.lazy(() => TaskCreateManyAssignedToInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskUserCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskUserCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  task: z.lazy(() => TaskCreateNestedOneWithoutTaskUsersInputSchema)
}).strict();

export const TaskUserUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TaskUserUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  taskId: z.string()
}).strict();

export const TaskUserCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TaskUserCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TaskUserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskUserCreateWithoutUserInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskUserCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TaskUserCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TaskUserCreateManyUserInputSchema),z.lazy(() => TaskUserCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketCreateWithoutAssignedToInputSchema: z.ZodType<Prisma.TicketCreateWithoutAssignedToInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutAssignedToInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutAssignedToInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutAssignedToInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutAssignedToInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutAssignedToInputSchema),z.lazy(() => TicketUncheckedCreateWithoutAssignedToInputSchema) ]),
}).strict();

export const TicketCreateManyAssignedToInputEnvelopeSchema: z.ZodType<Prisma.TicketCreateManyAssignedToInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketCreateManyAssignedToInputSchema),z.lazy(() => TicketCreateManyAssignedToInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.TicketCreateWithoutCreatedByInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutCreatedByInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const TicketCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.TicketCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketCreateManyCreatedByInputSchema),z.lazy(() => TicketCreateManyCreatedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketCollaboratorCreateWithoutUserInputSchema: z.ZodType<Prisma.TicketCollaboratorCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  ticket: z.lazy(() => TicketCreateNestedOneWithoutCollaboratorsInputSchema)
}).strict();

export const TicketCollaboratorUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string()
}).strict();

export const TicketCollaboratorCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TicketCollaboratorCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TicketCollaboratorCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TicketCollaboratorCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketCollaboratorCreateManyUserInputSchema),z.lazy(() => TicketCollaboratorCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketThreadCreateWithoutUserInputSchema: z.ZodType<Prisma.TicketThreadCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  message: z.string(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketThreadInputSchema).optional(),
  ticket: z.lazy(() => TicketCreateNestedOneWithoutThreadsInputSchema)
}).strict();

export const TicketThreadUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TicketThreadUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  message: z.string(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketThreadInputSchema).optional()
}).strict();

export const TicketThreadCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TicketThreadCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TicketThreadWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutUserInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TicketThreadCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TicketThreadCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketThreadCreateManyUserInputSchema),z.lazy(() => TicketThreadCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketUserCreateWithoutUserInputSchema: z.ZodType<Prisma.TicketUserCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  ticket: z.lazy(() => TicketCreateNestedOneWithoutTicketUsersInputSchema)
}).strict();

export const TicketUserUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TicketUserUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string()
}).strict();

export const TicketUserCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TicketUserCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TicketUserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketUserCreateWithoutUserInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TicketUserCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TicketUserCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketUserCreateManyUserInputSchema),z.lazy(() => TicketUserCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserDepartmentCreateWithoutUserInputSchema: z.ZodType<Prisma.UserDepartmentCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional(),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutUserDepartmentsInputSchema)
}).strict();

export const UserDepartmentUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  departmentId: z.number().int(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserDepartmentCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.UserDepartmentCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => UserDepartmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutUserInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserDepartmentCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.UserDepartmentCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserDepartmentCreateManyUserInputSchema),z.lazy(() => UserDepartmentCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DepartmentCreateWithoutHeadInputSchema: z.ZodType<Prisma.DepartmentCreateWithoutHeadInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  institution: z.lazy(() => InstitutionCreateNestedOneWithoutDepartmentsInputSchema),
  parentDepartment: z.lazy(() => DepartmentCreateNestedOneWithoutChildDepartmentsInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentUncheckedCreateWithoutHeadInputSchema: z.ZodType<Prisma.DepartmentUncheckedCreateWithoutHeadInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  institutionId: z.string(),
  parentDepartmentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentCreateOrConnectWithoutHeadInputSchema: z.ZodType<Prisma.DepartmentCreateOrConnectWithoutHeadInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutHeadInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutHeadInputSchema) ]),
}).strict();

export const DepartmentCreateManyHeadInputEnvelopeSchema: z.ZodType<Prisma.DepartmentCreateManyHeadInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DepartmentCreateManyHeadInputSchema),z.lazy(() => DepartmentCreateManyHeadInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InstitutionCreateWithoutMayorInputSchema: z.ZodType<Prisma.InstitutionCreateWithoutMayorInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  flag: z.string().optional().nullable(),
  emblem: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  viceMayor: z.lazy(() => UserCreateNestedOneWithoutViceMayorInstitutionsInputSchema).optional(),
  departments: z.lazy(() => DepartmentCreateNestedManyWithoutInstitutionInputSchema).optional()
}).strict();

export const InstitutionUncheckedCreateWithoutMayorInputSchema: z.ZodType<Prisma.InstitutionUncheckedCreateWithoutMayorInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  flag: z.string().optional().nullable(),
  emblem: z.string().optional().nullable(),
  viceMayorId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  departments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutInstitutionInputSchema).optional()
}).strict();

export const InstitutionCreateOrConnectWithoutMayorInputSchema: z.ZodType<Prisma.InstitutionCreateOrConnectWithoutMayorInput> = z.object({
  where: z.lazy(() => InstitutionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InstitutionCreateWithoutMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutMayorInputSchema) ]),
}).strict();

export const InstitutionCreateManyMayorInputEnvelopeSchema: z.ZodType<Prisma.InstitutionCreateManyMayorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InstitutionCreateManyMayorInputSchema),z.lazy(() => InstitutionCreateManyMayorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InstitutionCreateWithoutViceMayorInputSchema: z.ZodType<Prisma.InstitutionCreateWithoutViceMayorInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  flag: z.string().optional().nullable(),
  emblem: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  mayor: z.lazy(() => UserCreateNestedOneWithoutMayorInstitutionsInputSchema).optional(),
  departments: z.lazy(() => DepartmentCreateNestedManyWithoutInstitutionInputSchema).optional()
}).strict();

export const InstitutionUncheckedCreateWithoutViceMayorInputSchema: z.ZodType<Prisma.InstitutionUncheckedCreateWithoutViceMayorInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  flag: z.string().optional().nullable(),
  emblem: z.string().optional().nullable(),
  mayorId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  departments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutInstitutionInputSchema).optional()
}).strict();

export const InstitutionCreateOrConnectWithoutViceMayorInputSchema: z.ZodType<Prisma.InstitutionCreateOrConnectWithoutViceMayorInput> = z.object({
  where: z.lazy(() => InstitutionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InstitutionCreateWithoutViceMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutViceMayorInputSchema) ]),
}).strict();

export const InstitutionCreateManyViceMayorInputEnvelopeSchema: z.ZodType<Prisma.InstitutionCreateManyViceMayorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InstitutionCreateManyViceMayorInputSchema),z.lazy(() => InstitutionCreateManyViceMayorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserOnDocumentsCreateWithoutUserInputSchema: z.ZodType<Prisma.UserOnDocumentsCreateWithoutUserInput> = z.object({
  assignedAt: z.coerce.date().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutUserOnDocumentsInputSchema)
}).strict();

export const UserOnDocumentsUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedCreateWithoutUserInput> = z.object({
  documentId: z.string(),
  assignedAt: z.coerce.date().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserOnDocumentsCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.UserOnDocumentsCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserOnDocumentsCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.UserOnDocumentsCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserOnDocumentsCreateManyUserInputSchema),z.lazy(() => UserOnDocumentsCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AuditLogUpsertWithWhereUniqueWithoutPerformedByInputSchema: z.ZodType<Prisma.AuditLogUpsertWithWhereUniqueWithoutPerformedByInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AuditLogUpdateWithoutPerformedByInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutPerformedByInputSchema) ]),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutPerformedByInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutPerformedByInputSchema) ]),
}).strict();

export const AuditLogUpdateWithWhereUniqueWithoutPerformedByInputSchema: z.ZodType<Prisma.AuditLogUpdateWithWhereUniqueWithoutPerformedByInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateWithoutPerformedByInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutPerformedByInputSchema) ]),
}).strict();

export const AuditLogUpdateManyWithWhereWithoutPerformedByInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithWhereWithoutPerformedByInput> = z.object({
  where: z.lazy(() => AuditLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateManyMutationInputSchema),z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByInputSchema) ]),
}).strict();

export const AuditLogScalarWhereInputSchema: z.ZodType<Prisma.AuditLogScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  workflowId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  performedById: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const DigitalCertificateUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DigitalCertificateUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DigitalCertificateWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DigitalCertificateUpdateWithoutUserInputSchema),z.lazy(() => DigitalCertificateUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => DigitalCertificateCreateWithoutUserInputSchema),z.lazy(() => DigitalCertificateUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DigitalCertificateUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DigitalCertificateUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DigitalCertificateWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DigitalCertificateUpdateWithoutUserInputSchema),z.lazy(() => DigitalCertificateUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const DigitalCertificateUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.DigitalCertificateUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => DigitalCertificateScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DigitalCertificateUpdateManyMutationInputSchema),z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const DigitalCertificateScalarWhereInputSchema: z.ZodType<Prisma.DigitalCertificateScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DigitalCertificateScalarWhereInputSchema),z.lazy(() => DigitalCertificateScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DigitalCertificateScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DigitalCertificateScalarWhereInputSchema),z.lazy(() => DigitalCertificateScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  alias: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expiration: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DocumentUserUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DocumentUserUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DocumentUserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DocumentUserUpdateWithoutUserInputSchema),z.lazy(() => DocumentUserUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutUserInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DocumentUserUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DocumentUserUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DocumentUserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DocumentUserUpdateWithoutUserInputSchema),z.lazy(() => DocumentUserUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const DocumentUserUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.DocumentUserUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => DocumentUserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DocumentUserUpdateManyMutationInputSchema),z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const DocumentUserScalarWhereInputSchema: z.ZodType<Prisma.DocumentUserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentUserScalarWhereInputSchema),z.lazy(() => DocumentUserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentUserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentUserScalarWhereInputSchema),z.lazy(() => DocumentUserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DocumentVersionCreatorUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DocumentVersionCreatorUpdateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const DocumentVersionCreatorUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DocumentVersionCreatorUpdateWithoutUserInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const DocumentVersionCreatorUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DocumentVersionCreatorUpdateManyMutationInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const DocumentVersionCreatorScalarWhereInputSchema: z.ZodType<Prisma.DocumentVersionCreatorScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema),z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema),z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  versionId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const NotificationUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.NotificationUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => NotificationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => NotificationUpdateWithoutUserInputSchema),z.lazy(() => NotificationUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => NotificationCreateWithoutUserInputSchema),z.lazy(() => NotificationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const NotificationUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.NotificationUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => NotificationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => NotificationUpdateWithoutUserInputSchema),z.lazy(() => NotificationUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const NotificationUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.NotificationUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => NotificationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => NotificationUpdateManyMutationInputSchema),z.lazy(() => NotificationUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const NotificationScalarWhereInputSchema: z.ZodType<Prisma.NotificationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => NotificationScalarWhereInputSchema),z.lazy(() => NotificationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NotificationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NotificationScalarWhereInputSchema),z.lazy(() => NotificationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SharedDocumentUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SharedDocumentUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SharedDocumentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SharedDocumentUpdateWithoutUserInputSchema),z.lazy(() => SharedDocumentUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutUserInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SharedDocumentUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SharedDocumentUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SharedDocumentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SharedDocumentUpdateWithoutUserInputSchema),z.lazy(() => SharedDocumentUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SharedDocumentUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SharedDocumentUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SharedDocumentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SharedDocumentUpdateManyMutationInputSchema),z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SharedDocumentScalarWhereInputSchema: z.ZodType<Prisma.SharedDocumentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SharedDocumentScalarWhereInputSchema),z.lazy(() => SharedDocumentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SharedDocumentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SharedDocumentScalarWhereInputSchema),z.lazy(() => SharedDocumentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  sharedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  permission: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TaskUpsertWithWhereUniqueWithoutAssignedToInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutAssignedToInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutAssignedToInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutAssignedToInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutAssignedToInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAssignedToInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutAssignedToInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutAssignedToInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutAssignedToInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutAssignedToInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutAssignedToInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutAssignedToInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToInputSchema) ]),
}).strict();

export const TaskScalarWhereInputSchema: z.ZodType<Prisma.TaskScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskScalarWhereInputSchema),z.lazy(() => TaskScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  workflowId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  documentId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TaskUserUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskUserUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskUserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUserUpdateWithoutUserInputSchema),z.lazy(() => TaskUserUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TaskUserCreateWithoutUserInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TaskUserUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TaskUserUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TaskUserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUserUpdateWithoutUserInputSchema),z.lazy(() => TaskUserUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TaskUserUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TaskUserUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TaskUserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUserUpdateManyMutationInputSchema),z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TaskUserScalarWhereInputSchema: z.ZodType<Prisma.TaskUserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaskUserScalarWhereInputSchema),z.lazy(() => TaskUserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaskUserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaskUserScalarWhereInputSchema),z.lazy(() => TaskUserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  taskId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
}).strict();

export const TicketUpsertWithWhereUniqueWithoutAssignedToInputSchema: z.ZodType<Prisma.TicketUpsertWithWhereUniqueWithoutAssignedToInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketUpdateWithoutAssignedToInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutAssignedToInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutAssignedToInputSchema),z.lazy(() => TicketUncheckedCreateWithoutAssignedToInputSchema) ]),
}).strict();

export const TicketUpdateWithWhereUniqueWithoutAssignedToInputSchema: z.ZodType<Prisma.TicketUpdateWithWhereUniqueWithoutAssignedToInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateWithoutAssignedToInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutAssignedToInputSchema) ]),
}).strict();

export const TicketUpdateManyWithWhereWithoutAssignedToInputSchema: z.ZodType<Prisma.TicketUpdateManyWithWhereWithoutAssignedToInput> = z.object({
  where: z.lazy(() => TicketScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateManyMutationInputSchema),z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToInputSchema) ]),
}).strict();

export const TicketScalarWhereInputSchema: z.ZodType<Prisma.TicketScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketScalarWhereInputSchema),z.lazy(() => TicketScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  subject: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  statusId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  priorityId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdById: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  departmentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  helpTopicId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  slaPlanId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  dueDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  closedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastResponseAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const TicketUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.TicketUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketUpdateWithoutCreatedByInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutCreatedByInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const TicketUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.TicketUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateWithoutCreatedByInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const TicketUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.TicketUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => TicketScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateManyMutationInputSchema),z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const TicketCollaboratorUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TicketCollaboratorUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketCollaboratorUpdateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TicketCollaboratorUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TicketCollaboratorUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketCollaboratorUpdateWithoutUserInputSchema),z.lazy(() => TicketCollaboratorUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TicketCollaboratorUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TicketCollaboratorUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TicketCollaboratorScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketCollaboratorUpdateManyMutationInputSchema),z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TicketCollaboratorScalarWhereInputSchema: z.ZodType<Prisma.TicketCollaboratorScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketCollaboratorScalarWhereInputSchema),z.lazy(() => TicketCollaboratorScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketCollaboratorScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketCollaboratorScalarWhereInputSchema),z.lazy(() => TicketCollaboratorScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
}).strict();

export const TicketThreadUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TicketThreadUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TicketThreadWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketThreadUpdateWithoutUserInputSchema),z.lazy(() => TicketThreadUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutUserInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TicketThreadUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TicketThreadUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TicketThreadWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketThreadUpdateWithoutUserInputSchema),z.lazy(() => TicketThreadUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TicketThreadUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TicketThreadUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TicketThreadScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketThreadUpdateManyMutationInputSchema),z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TicketThreadScalarWhereInputSchema: z.ZodType<Prisma.TicketThreadScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketThreadScalarWhereInputSchema),z.lazy(() => TicketThreadScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketThreadScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketThreadScalarWhereInputSchema),z.lazy(() => TicketThreadScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TicketUserUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TicketUserUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TicketUserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketUserUpdateWithoutUserInputSchema),z.lazy(() => TicketUserUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TicketUserCreateWithoutUserInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TicketUserUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TicketUserUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TicketUserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketUserUpdateWithoutUserInputSchema),z.lazy(() => TicketUserUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TicketUserUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TicketUserUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TicketUserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketUserUpdateManyMutationInputSchema),z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TicketUserScalarWhereInputSchema: z.ZodType<Prisma.TicketUserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketUserScalarWhereInputSchema),z.lazy(() => TicketUserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketUserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketUserScalarWhereInputSchema),z.lazy(() => TicketUserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
}).strict();

export const UserDepartmentUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserDepartmentUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserDepartmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserDepartmentUpdateWithoutUserInputSchema),z.lazy(() => UserDepartmentUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutUserInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserDepartmentUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserDepartmentUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserDepartmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserDepartmentUpdateWithoutUserInputSchema),z.lazy(() => UserDepartmentUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const UserDepartmentUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.UserDepartmentUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => UserDepartmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserDepartmentUpdateManyMutationInputSchema),z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const UserDepartmentScalarWhereInputSchema: z.ZodType<Prisma.UserDepartmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserDepartmentScalarWhereInputSchema),z.lazy(() => UserDepartmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserDepartmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserDepartmentScalarWhereInputSchema),z.lazy(() => UserDepartmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  departmentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DepartmentUpsertWithWhereUniqueWithoutHeadInputSchema: z.ZodType<Prisma.DepartmentUpsertWithWhereUniqueWithoutHeadInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DepartmentUpdateWithoutHeadInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutHeadInputSchema) ]),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutHeadInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutHeadInputSchema) ]),
}).strict();

export const DepartmentUpdateWithWhereUniqueWithoutHeadInputSchema: z.ZodType<Prisma.DepartmentUpdateWithWhereUniqueWithoutHeadInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DepartmentUpdateWithoutHeadInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutHeadInputSchema) ]),
}).strict();

export const DepartmentUpdateManyWithWhereWithoutHeadInputSchema: z.ZodType<Prisma.DepartmentUpdateManyWithWhereWithoutHeadInput> = z.object({
  where: z.lazy(() => DepartmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DepartmentUpdateManyMutationInputSchema),z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadInputSchema) ]),
}).strict();

export const DepartmentScalarWhereInputSchema: z.ZodType<Prisma.DepartmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DepartmentScalarWhereInputSchema),z.lazy(() => DepartmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DepartmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DepartmentScalarWhereInputSchema),z.lazy(() => DepartmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isSecretariat: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  institutionId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  parentDepartmentId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  headId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InstitutionUpsertWithWhereUniqueWithoutMayorInputSchema: z.ZodType<Prisma.InstitutionUpsertWithWhereUniqueWithoutMayorInput> = z.object({
  where: z.lazy(() => InstitutionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InstitutionUpdateWithoutMayorInputSchema),z.lazy(() => InstitutionUncheckedUpdateWithoutMayorInputSchema) ]),
  create: z.union([ z.lazy(() => InstitutionCreateWithoutMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutMayorInputSchema) ]),
}).strict();

export const InstitutionUpdateWithWhereUniqueWithoutMayorInputSchema: z.ZodType<Prisma.InstitutionUpdateWithWhereUniqueWithoutMayorInput> = z.object({
  where: z.lazy(() => InstitutionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InstitutionUpdateWithoutMayorInputSchema),z.lazy(() => InstitutionUncheckedUpdateWithoutMayorInputSchema) ]),
}).strict();

export const InstitutionUpdateManyWithWhereWithoutMayorInputSchema: z.ZodType<Prisma.InstitutionUpdateManyWithWhereWithoutMayorInput> = z.object({
  where: z.lazy(() => InstitutionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InstitutionUpdateManyMutationInputSchema),z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorInputSchema) ]),
}).strict();

export const InstitutionScalarWhereInputSchema: z.ZodType<Prisma.InstitutionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InstitutionScalarWhereInputSchema),z.lazy(() => InstitutionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InstitutionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InstitutionScalarWhereInputSchema),z.lazy(() => InstitutionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  flag: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  emblem: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mayorId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  viceMayorId: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InstitutionUpsertWithWhereUniqueWithoutViceMayorInputSchema: z.ZodType<Prisma.InstitutionUpsertWithWhereUniqueWithoutViceMayorInput> = z.object({
  where: z.lazy(() => InstitutionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InstitutionUpdateWithoutViceMayorInputSchema),z.lazy(() => InstitutionUncheckedUpdateWithoutViceMayorInputSchema) ]),
  create: z.union([ z.lazy(() => InstitutionCreateWithoutViceMayorInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutViceMayorInputSchema) ]),
}).strict();

export const InstitutionUpdateWithWhereUniqueWithoutViceMayorInputSchema: z.ZodType<Prisma.InstitutionUpdateWithWhereUniqueWithoutViceMayorInput> = z.object({
  where: z.lazy(() => InstitutionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InstitutionUpdateWithoutViceMayorInputSchema),z.lazy(() => InstitutionUncheckedUpdateWithoutViceMayorInputSchema) ]),
}).strict();

export const InstitutionUpdateManyWithWhereWithoutViceMayorInputSchema: z.ZodType<Prisma.InstitutionUpdateManyWithWhereWithoutViceMayorInput> = z.object({
  where: z.lazy(() => InstitutionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InstitutionUpdateManyMutationInputSchema),z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorInputSchema) ]),
}).strict();

export const UserOnDocumentsUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserOnDocumentsUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserOnDocumentsUpdateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserOnDocumentsUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserOnDocumentsUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserOnDocumentsUpdateWithoutUserInputSchema),z.lazy(() => UserOnDocumentsUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const UserOnDocumentsUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.UserOnDocumentsUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => UserOnDocumentsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserOnDocumentsUpdateManyMutationInputSchema),z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const UserOnDocumentsScalarWhereInputSchema: z.ZodType<Prisma.UserOnDocumentsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserOnDocumentsScalarWhereInputSchema),z.lazy(() => UserOnDocumentsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserOnDocumentsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserOnDocumentsScalarWhereInputSchema),z.lazy(() => UserOnDocumentsScalarWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  assignedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AttachmentCreateWithoutDocumentInputSchema: z.ZodType<Prisma.AttachmentCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AttachmentUncheckedCreateWithoutDocumentInputSchema: z.ZodType<Prisma.AttachmentUncheckedCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AttachmentCreateOrConnectWithoutDocumentInputSchema: z.ZodType<Prisma.AttachmentCreateOrConnectWithoutDocumentInput> = z.object({
  where: z.lazy(() => AttachmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AttachmentCreateWithoutDocumentInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const AttachmentCreateManyDocumentInputEnvelopeSchema: z.ZodType<Prisma.AttachmentCreateManyDocumentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AttachmentCreateManyDocumentInputSchema),z.lazy(() => AttachmentCreateManyDocumentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DocumentUserCreateWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentUserCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutDocumentUsersInputSchema)
}).strict();

export const DocumentUserUncheckedCreateWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentUserUncheckedCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentUserCreateOrConnectWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentUserCreateOrConnectWithoutDocumentInput> = z.object({
  where: z.lazy(() => DocumentUserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutDocumentInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const DocumentUserCreateManyDocumentInputEnvelopeSchema: z.ZodType<Prisma.DocumentUserCreateManyDocumentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DocumentUserCreateManyDocumentInputSchema),z.lazy(() => DocumentUserCreateManyDocumentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DocumentVersionCreateWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentVersionCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  versionNumber: z.number().int(),
  filePath: z.string(),
  changesDescription: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutVersionInputSchema).optional()
}).strict();

export const DocumentVersionUncheckedCreateWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentVersionUncheckedCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  versionNumber: z.number().int(),
  filePath: z.string(),
  changesDescription: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutVersionInputSchema).optional()
}).strict();

export const DocumentVersionCreateOrConnectWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentVersionCreateOrConnectWithoutDocumentInput> = z.object({
  where: z.lazy(() => DocumentVersionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentVersionCreateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const DocumentVersionCreateManyDocumentInputEnvelopeSchema: z.ZodType<Prisma.DocumentVersionCreateManyDocumentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DocumentVersionCreateManyDocumentInputSchema),z.lazy(() => DocumentVersionCreateManyDocumentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FileMetadataCreateWithoutDocumentInputSchema: z.ZodType<Prisma.FileMetadataCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  fileSize: z.number().int(),
  mimeType: z.string(),
  checksum: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FileMetadataUncheckedCreateWithoutDocumentInputSchema: z.ZodType<Prisma.FileMetadataUncheckedCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  fileSize: z.number().int(),
  mimeType: z.string(),
  checksum: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FileMetadataCreateOrConnectWithoutDocumentInputSchema: z.ZodType<Prisma.FileMetadataCreateOrConnectWithoutDocumentInput> = z.object({
  where: z.lazy(() => FileMetadataWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FileMetadataCreateWithoutDocumentInputSchema),z.lazy(() => FileMetadataUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const SharedDocumentCreateWithoutDocumentInputSchema: z.ZodType<Prisma.SharedDocumentCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  sharedAt: z.coerce.date().optional(),
  permission: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutSharedDocumentsInputSchema)
}).strict();

export const SharedDocumentUncheckedCreateWithoutDocumentInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  sharedAt: z.coerce.date().optional(),
  permission: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SharedDocumentCreateOrConnectWithoutDocumentInputSchema: z.ZodType<Prisma.SharedDocumentCreateOrConnectWithoutDocumentInput> = z.object({
  where: z.lazy(() => SharedDocumentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const SharedDocumentCreateManyDocumentInputEnvelopeSchema: z.ZodType<Prisma.SharedDocumentCreateManyDocumentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SharedDocumentCreateManyDocumentInputSchema),z.lazy(() => SharedDocumentCreateManyDocumentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskCreateWithoutDocumentInputSchema: z.ZodType<Prisma.TaskCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutTaskInputSchema).optional(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTasksAssignedInputSchema).optional(),
  workflow: z.lazy(() => WorkflowCreateNestedOneWithoutTasksInputSchema),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutDocumentInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutDocumentInput> = z.object({
  id: z.string().optional(),
  workflowId: z.string(),
  assignedToId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutDocumentInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutDocumentInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutDocumentInputSchema),z.lazy(() => TaskUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const TaskCreateManyDocumentInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyDocumentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TaskCreateManyDocumentInputSchema),z.lazy(() => TaskCreateManyDocumentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserOnDocumentsCreateWithoutDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsCreateWithoutDocumentInput> = z.object({
  assignedAt: z.coerce.date().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutUserOnDocumentsInputSchema)
}).strict();

export const UserOnDocumentsUncheckedCreateWithoutDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedCreateWithoutDocumentInput> = z.object({
  userId: z.string(),
  assignedAt: z.coerce.date().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserOnDocumentsCreateOrConnectWithoutDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsCreateOrConnectWithoutDocumentInput> = z.object({
  where: z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const UserOnDocumentsCreateManyDocumentInputEnvelopeSchema: z.ZodType<Prisma.UserOnDocumentsCreateManyDocumentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserOnDocumentsCreateManyDocumentInputSchema),z.lazy(() => UserOnDocumentsCreateManyDocumentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AttachmentUpsertWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.AttachmentUpsertWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => AttachmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AttachmentUpdateWithoutDocumentInputSchema),z.lazy(() => AttachmentUncheckedUpdateWithoutDocumentInputSchema) ]),
  create: z.union([ z.lazy(() => AttachmentCreateWithoutDocumentInputSchema),z.lazy(() => AttachmentUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const AttachmentUpdateWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.AttachmentUpdateWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => AttachmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AttachmentUpdateWithoutDocumentInputSchema),z.lazy(() => AttachmentUncheckedUpdateWithoutDocumentInputSchema) ]),
}).strict();

export const AttachmentUpdateManyWithWhereWithoutDocumentInputSchema: z.ZodType<Prisma.AttachmentUpdateManyWithWhereWithoutDocumentInput> = z.object({
  where: z.lazy(() => AttachmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AttachmentUpdateManyMutationInputSchema),z.lazy(() => AttachmentUncheckedUpdateManyWithoutDocumentInputSchema) ]),
}).strict();

export const AttachmentScalarWhereInputSchema: z.ZodType<Prisma.AttachmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AttachmentScalarWhereInputSchema),z.lazy(() => AttachmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AttachmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AttachmentScalarWhereInputSchema),z.lazy(() => AttachmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DocumentUserUpsertWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentUserUpsertWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => DocumentUserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DocumentUserUpdateWithoutDocumentInputSchema),z.lazy(() => DocumentUserUncheckedUpdateWithoutDocumentInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentUserCreateWithoutDocumentInputSchema),z.lazy(() => DocumentUserUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const DocumentUserUpdateWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentUserUpdateWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => DocumentUserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DocumentUserUpdateWithoutDocumentInputSchema),z.lazy(() => DocumentUserUncheckedUpdateWithoutDocumentInputSchema) ]),
}).strict();

export const DocumentUserUpdateManyWithWhereWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentUserUpdateManyWithWhereWithoutDocumentInput> = z.object({
  where: z.lazy(() => DocumentUserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DocumentUserUpdateManyMutationInputSchema),z.lazy(() => DocumentUserUncheckedUpdateManyWithoutDocumentInputSchema) ]),
}).strict();

export const DocumentVersionUpsertWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentVersionUpsertWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => DocumentVersionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DocumentVersionUpdateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUncheckedUpdateWithoutDocumentInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentVersionCreateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const DocumentVersionUpdateWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentVersionUpdateWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => DocumentVersionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DocumentVersionUpdateWithoutDocumentInputSchema),z.lazy(() => DocumentVersionUncheckedUpdateWithoutDocumentInputSchema) ]),
}).strict();

export const DocumentVersionUpdateManyWithWhereWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentVersionUpdateManyWithWhereWithoutDocumentInput> = z.object({
  where: z.lazy(() => DocumentVersionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DocumentVersionUpdateManyMutationInputSchema),z.lazy(() => DocumentVersionUncheckedUpdateManyWithoutDocumentInputSchema) ]),
}).strict();

export const DocumentVersionScalarWhereInputSchema: z.ZodType<Prisma.DocumentVersionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentVersionScalarWhereInputSchema),z.lazy(() => DocumentVersionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentVersionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentVersionScalarWhereInputSchema),z.lazy(() => DocumentVersionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  documentId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  versionNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  changesDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FileMetadataUpsertWithoutDocumentInputSchema: z.ZodType<Prisma.FileMetadataUpsertWithoutDocumentInput> = z.object({
  update: z.union([ z.lazy(() => FileMetadataUpdateWithoutDocumentInputSchema),z.lazy(() => FileMetadataUncheckedUpdateWithoutDocumentInputSchema) ]),
  create: z.union([ z.lazy(() => FileMetadataCreateWithoutDocumentInputSchema),z.lazy(() => FileMetadataUncheckedCreateWithoutDocumentInputSchema) ]),
  where: z.lazy(() => FileMetadataWhereInputSchema).optional()
}).strict();

export const FileMetadataUpdateToOneWithWhereWithoutDocumentInputSchema: z.ZodType<Prisma.FileMetadataUpdateToOneWithWhereWithoutDocumentInput> = z.object({
  where: z.lazy(() => FileMetadataWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FileMetadataUpdateWithoutDocumentInputSchema),z.lazy(() => FileMetadataUncheckedUpdateWithoutDocumentInputSchema) ]),
}).strict();

export const FileMetadataUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.FileMetadataUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checksum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FileMetadataUncheckedUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.FileMetadataUncheckedUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  checksum: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SharedDocumentUpsertWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.SharedDocumentUpsertWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => SharedDocumentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SharedDocumentUpdateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUncheckedUpdateWithoutDocumentInputSchema) ]),
  create: z.union([ z.lazy(() => SharedDocumentCreateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const SharedDocumentUpdateWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.SharedDocumentUpdateWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => SharedDocumentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SharedDocumentUpdateWithoutDocumentInputSchema),z.lazy(() => SharedDocumentUncheckedUpdateWithoutDocumentInputSchema) ]),
}).strict();

export const SharedDocumentUpdateManyWithWhereWithoutDocumentInputSchema: z.ZodType<Prisma.SharedDocumentUpdateManyWithWhereWithoutDocumentInput> = z.object({
  where: z.lazy(() => SharedDocumentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SharedDocumentUpdateManyMutationInputSchema),z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutDocumentInputSchema) ]),
}).strict();

export const TaskUpsertWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutDocumentInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutDocumentInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutDocumentInputSchema),z.lazy(() => TaskUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutDocumentInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutDocumentInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutDocumentInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutDocumentInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutDocumentInputSchema) ]),
}).strict();

export const UserOnDocumentsUpsertWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsUpsertWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserOnDocumentsUpdateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUncheckedUpdateWithoutDocumentInputSchema) ]),
  create: z.union([ z.lazy(() => UserOnDocumentsCreateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUncheckedCreateWithoutDocumentInputSchema) ]),
}).strict();

export const UserOnDocumentsUpdateWithWhereUniqueWithoutDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsUpdateWithWhereUniqueWithoutDocumentInput> = z.object({
  where: z.lazy(() => UserOnDocumentsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserOnDocumentsUpdateWithoutDocumentInputSchema),z.lazy(() => UserOnDocumentsUncheckedUpdateWithoutDocumentInputSchema) ]),
}).strict();

export const UserOnDocumentsUpdateManyWithWhereWithoutDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsUpdateManyWithWhereWithoutDocumentInput> = z.object({
  where: z.lazy(() => UserOnDocumentsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserOnDocumentsUpdateManyMutationInputSchema),z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutDocumentInputSchema) ]),
}).strict();

export const DocumentCreateWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.DocumentCreateWithoutUserOnDocumentsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentUncheckedCreateWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.DocumentUncheckedCreateWithoutUserOnDocumentsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentCreateOrConnectWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.DocumentCreateOrConnectWithoutUserOnDocumentsInput> = z.object({
  where: z.lazy(() => DocumentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentCreateWithoutUserOnDocumentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutUserOnDocumentsInputSchema) ]),
}).strict();

export const UserCreateWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.UserCreateWithoutUserOnDocumentsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUserOnDocumentsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUserOnDocumentsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUserOnDocumentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserOnDocumentsInputSchema) ]),
}).strict();

export const DocumentUpsertWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.DocumentUpsertWithoutUserOnDocumentsInput> = z.object({
  update: z.union([ z.lazy(() => DocumentUpdateWithoutUserOnDocumentsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutUserOnDocumentsInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentCreateWithoutUserOnDocumentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutUserOnDocumentsInputSchema) ]),
  where: z.lazy(() => DocumentWhereInputSchema).optional()
}).strict();

export const DocumentUpdateToOneWithWhereWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.DocumentUpdateToOneWithWhereWithoutUserOnDocumentsInput> = z.object({
  where: z.lazy(() => DocumentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DocumentUpdateWithoutUserOnDocumentsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutUserOnDocumentsInputSchema) ]),
}).strict();

export const DocumentUpdateWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.DocumentUpdateWithoutUserOnDocumentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const DocumentUncheckedUpdateWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.DocumentUncheckedUpdateWithoutUserOnDocumentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.UserUpsertWithoutUserOnDocumentsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUserOnDocumentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserOnDocumentsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUserOnDocumentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserOnDocumentsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUserOnDocumentsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUserOnDocumentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserOnDocumentsInputSchema) ]),
}).strict();

export const UserUpdateWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.UserUpdateWithoutUserOnDocumentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUserOnDocumentsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUserOnDocumentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional()
}).strict();

export const DocumentCreateWithoutDocumentUsersInputSchema: z.ZodType<Prisma.DocumentCreateWithoutDocumentUsersInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentUncheckedCreateWithoutDocumentUsersInputSchema: z.ZodType<Prisma.DocumentUncheckedCreateWithoutDocumentUsersInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentCreateOrConnectWithoutDocumentUsersInputSchema: z.ZodType<Prisma.DocumentCreateOrConnectWithoutDocumentUsersInput> = z.object({
  where: z.lazy(() => DocumentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentCreateWithoutDocumentUsersInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutDocumentUsersInputSchema) ]),
}).strict();

export const UserCreateWithoutDocumentUsersInputSchema: z.ZodType<Prisma.UserCreateWithoutDocumentUsersInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutDocumentUsersInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutDocumentUsersInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutDocumentUsersInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutDocumentUsersInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutDocumentUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutDocumentUsersInputSchema) ]),
}).strict();

export const DocumentUpsertWithoutDocumentUsersInputSchema: z.ZodType<Prisma.DocumentUpsertWithoutDocumentUsersInput> = z.object({
  update: z.union([ z.lazy(() => DocumentUpdateWithoutDocumentUsersInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutDocumentUsersInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentCreateWithoutDocumentUsersInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutDocumentUsersInputSchema) ]),
  where: z.lazy(() => DocumentWhereInputSchema).optional()
}).strict();

export const DocumentUpdateToOneWithWhereWithoutDocumentUsersInputSchema: z.ZodType<Prisma.DocumentUpdateToOneWithWhereWithoutDocumentUsersInput> = z.object({
  where: z.lazy(() => DocumentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DocumentUpdateWithoutDocumentUsersInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutDocumentUsersInputSchema) ]),
}).strict();

export const DocumentUpdateWithoutDocumentUsersInputSchema: z.ZodType<Prisma.DocumentUpdateWithoutDocumentUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const DocumentUncheckedUpdateWithoutDocumentUsersInputSchema: z.ZodType<Prisma.DocumentUncheckedUpdateWithoutDocumentUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutDocumentUsersInputSchema: z.ZodType<Prisma.UserUpsertWithoutDocumentUsersInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutDocumentUsersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDocumentUsersInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutDocumentUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutDocumentUsersInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutDocumentUsersInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutDocumentUsersInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutDocumentUsersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDocumentUsersInputSchema) ]),
}).strict();

export const UserUpdateWithoutDocumentUsersInputSchema: z.ZodType<Prisma.UserUpdateWithoutDocumentUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutDocumentUsersInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutDocumentUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const DocumentCreateWithoutVersionsInputSchema: z.ZodType<Prisma.DocumentCreateWithoutVersionsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentUncheckedCreateWithoutVersionsInputSchema: z.ZodType<Prisma.DocumentUncheckedCreateWithoutVersionsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentCreateOrConnectWithoutVersionsInputSchema: z.ZodType<Prisma.DocumentCreateOrConnectWithoutVersionsInput> = z.object({
  where: z.lazy(() => DocumentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentCreateWithoutVersionsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutVersionsInputSchema) ]),
}).strict();

export const DocumentVersionCreatorCreateWithoutVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateWithoutVersionInput> = z.object({
  id: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutDocumentVersionCreatorsInputSchema)
}).strict();

export const DocumentVersionCreatorUncheckedCreateWithoutVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedCreateWithoutVersionInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentVersionCreatorCreateOrConnectWithoutVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateOrConnectWithoutVersionInput> = z.object({
  where: z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutVersionInputSchema) ]),
}).strict();

export const DocumentVersionCreatorCreateManyVersionInputEnvelopeSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateManyVersionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DocumentVersionCreatorCreateManyVersionInputSchema),z.lazy(() => DocumentVersionCreatorCreateManyVersionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DocumentUpsertWithoutVersionsInputSchema: z.ZodType<Prisma.DocumentUpsertWithoutVersionsInput> = z.object({
  update: z.union([ z.lazy(() => DocumentUpdateWithoutVersionsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutVersionsInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentCreateWithoutVersionsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutVersionsInputSchema) ]),
  where: z.lazy(() => DocumentWhereInputSchema).optional()
}).strict();

export const DocumentUpdateToOneWithWhereWithoutVersionsInputSchema: z.ZodType<Prisma.DocumentUpdateToOneWithWhereWithoutVersionsInput> = z.object({
  where: z.lazy(() => DocumentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DocumentUpdateWithoutVersionsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutVersionsInputSchema) ]),
}).strict();

export const DocumentUpdateWithoutVersionsInputSchema: z.ZodType<Prisma.DocumentUpdateWithoutVersionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const DocumentUncheckedUpdateWithoutVersionsInputSchema: z.ZodType<Prisma.DocumentUncheckedUpdateWithoutVersionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const DocumentVersionCreatorUpsertWithWhereUniqueWithoutVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpsertWithWhereUniqueWithoutVersionInput> = z.object({
  where: z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DocumentVersionCreatorUpdateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedUpdateWithoutVersionInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentVersionCreatorCreateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedCreateWithoutVersionInputSchema) ]),
}).strict();

export const DocumentVersionCreatorUpdateWithWhereUniqueWithoutVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateWithWhereUniqueWithoutVersionInput> = z.object({
  where: z.lazy(() => DocumentVersionCreatorWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DocumentVersionCreatorUpdateWithoutVersionInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedUpdateWithoutVersionInputSchema) ]),
}).strict();

export const DocumentVersionCreatorUpdateManyWithWhereWithoutVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateManyWithWhereWithoutVersionInput> = z.object({
  where: z.lazy(() => DocumentVersionCreatorScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DocumentVersionCreatorUpdateManyMutationInputSchema),z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutVersionInputSchema) ]),
}).strict();

export const UserCreateWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.UserCreateWithoutDocumentVersionCreatorsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutDocumentVersionCreatorsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutDocumentVersionCreatorsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutDocumentVersionCreatorsInputSchema) ]),
}).strict();

export const DocumentVersionCreateWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.DocumentVersionCreateWithoutDocumentVersionCreatorsInput> = z.object({
  id: z.string().optional(),
  versionNumber: z.number().int(),
  filePath: z.string(),
  changesDescription: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutVersionsInputSchema)
}).strict();

export const DocumentVersionUncheckedCreateWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.DocumentVersionUncheckedCreateWithoutDocumentVersionCreatorsInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  versionNumber: z.number().int(),
  filePath: z.string(),
  changesDescription: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentVersionCreateOrConnectWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.DocumentVersionCreateOrConnectWithoutDocumentVersionCreatorsInput> = z.object({
  where: z.lazy(() => DocumentVersionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentVersionCreateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentVersionCreatorsInputSchema) ]),
}).strict();

export const UserUpsertWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.UserUpsertWithoutDocumentVersionCreatorsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDocumentVersionCreatorsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutDocumentVersionCreatorsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutDocumentVersionCreatorsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDocumentVersionCreatorsInputSchema) ]),
}).strict();

export const UserUpdateWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.UserUpdateWithoutDocumentVersionCreatorsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutDocumentVersionCreatorsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const DocumentVersionUpsertWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.DocumentVersionUpsertWithoutDocumentVersionCreatorsInput> = z.object({
  update: z.union([ z.lazy(() => DocumentVersionUpdateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => DocumentVersionUncheckedUpdateWithoutDocumentVersionCreatorsInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentVersionCreateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => DocumentVersionUncheckedCreateWithoutDocumentVersionCreatorsInputSchema) ]),
  where: z.lazy(() => DocumentVersionWhereInputSchema).optional()
}).strict();

export const DocumentVersionUpdateToOneWithWhereWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.DocumentVersionUpdateToOneWithWhereWithoutDocumentVersionCreatorsInput> = z.object({
  where: z.lazy(() => DocumentVersionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DocumentVersionUpdateWithoutDocumentVersionCreatorsInputSchema),z.lazy(() => DocumentVersionUncheckedUpdateWithoutDocumentVersionCreatorsInputSchema) ]),
}).strict();

export const DocumentVersionUpdateWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.DocumentVersionUpdateWithoutDocumentVersionCreatorsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  changesDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  document: z.lazy(() => DocumentUpdateOneRequiredWithoutVersionsNestedInputSchema).optional()
}).strict();

export const DocumentVersionUncheckedUpdateWithoutDocumentVersionCreatorsInputSchema: z.ZodType<Prisma.DocumentVersionUncheckedUpdateWithoutDocumentVersionCreatorsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  changesDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentCreateWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.DocumentCreateWithoutSharedDocumentsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataCreateNestedOneWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentUncheckedCreateWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.DocumentUncheckedCreateWithoutSharedDocumentsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedCreateNestedOneWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentCreateOrConnectWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.DocumentCreateOrConnectWithoutSharedDocumentsInput> = z.object({
  where: z.lazy(() => DocumentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentCreateWithoutSharedDocumentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutSharedDocumentsInputSchema) ]),
}).strict();

export const UserCreateWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.UserCreateWithoutSharedDocumentsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSharedDocumentsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSharedDocumentsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSharedDocumentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSharedDocumentsInputSchema) ]),
}).strict();

export const DocumentUpsertWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.DocumentUpsertWithoutSharedDocumentsInput> = z.object({
  update: z.union([ z.lazy(() => DocumentUpdateWithoutSharedDocumentsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutSharedDocumentsInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentCreateWithoutSharedDocumentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutSharedDocumentsInputSchema) ]),
  where: z.lazy(() => DocumentWhereInputSchema).optional()
}).strict();

export const DocumentUpdateToOneWithWhereWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.DocumentUpdateToOneWithWhereWithoutSharedDocumentsInput> = z.object({
  where: z.lazy(() => DocumentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DocumentUpdateWithoutSharedDocumentsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutSharedDocumentsInputSchema) ]),
}).strict();

export const DocumentUpdateWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.DocumentUpdateWithoutSharedDocumentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUpdateOneWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const DocumentUncheckedUpdateWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.DocumentUncheckedUpdateWithoutSharedDocumentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedUpdateOneWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSharedDocumentsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSharedDocumentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSharedDocumentsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSharedDocumentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSharedDocumentsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSharedDocumentsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSharedDocumentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSharedDocumentsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSharedDocumentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSharedDocumentsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSharedDocumentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const AuditLogCreateWithoutWorkflowInputSchema: z.ZodType<Prisma.AuditLogCreateWithoutWorkflowInput> = z.object({
  id: z.string().optional(),
  action: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable(),
  performedBy: z.lazy(() => UserCreateNestedOneWithoutAuditLogsInputSchema),
  task: z.lazy(() => TaskCreateNestedOneWithoutAuditLogsInputSchema).optional()
}).strict();

export const AuditLogUncheckedCreateWithoutWorkflowInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateWithoutWorkflowInput> = z.object({
  id: z.string().optional(),
  taskId: z.string().optional().nullable(),
  action: z.string(),
  performedById: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable()
}).strict();

export const AuditLogCreateOrConnectWithoutWorkflowInputSchema: z.ZodType<Prisma.AuditLogCreateOrConnectWithoutWorkflowInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutWorkflowInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutWorkflowInputSchema) ]),
}).strict();

export const AuditLogCreateManyWorkflowInputEnvelopeSchema: z.ZodType<Prisma.AuditLogCreateManyWorkflowInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AuditLogCreateManyWorkflowInputSchema),z.lazy(() => AuditLogCreateManyWorkflowInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaskCreateWithoutWorkflowInputSchema: z.ZodType<Prisma.TaskCreateWithoutWorkflowInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutTaskInputSchema).optional(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTasksAssignedInputSchema).optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutTasksInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutWorkflowInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutWorkflowInput> = z.object({
  id: z.string().optional(),
  assignedToId: z.string().optional().nullable(),
  documentId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutTaskInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutWorkflowInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutWorkflowInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkflowInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkflowInputSchema) ]),
}).strict();

export const TaskCreateManyWorkflowInputEnvelopeSchema: z.ZodType<Prisma.TaskCreateManyWorkflowInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TaskCreateManyWorkflowInputSchema),z.lazy(() => TaskCreateManyWorkflowInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AuditLogUpsertWithWhereUniqueWithoutWorkflowInputSchema: z.ZodType<Prisma.AuditLogUpsertWithWhereUniqueWithoutWorkflowInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AuditLogUpdateWithoutWorkflowInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutWorkflowInputSchema) ]),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutWorkflowInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutWorkflowInputSchema) ]),
}).strict();

export const AuditLogUpdateWithWhereUniqueWithoutWorkflowInputSchema: z.ZodType<Prisma.AuditLogUpdateWithWhereUniqueWithoutWorkflowInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateWithoutWorkflowInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutWorkflowInputSchema) ]),
}).strict();

export const AuditLogUpdateManyWithWhereWithoutWorkflowInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithWhereWithoutWorkflowInput> = z.object({
  where: z.lazy(() => AuditLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateManyMutationInputSchema),z.lazy(() => AuditLogUncheckedUpdateManyWithoutWorkflowInputSchema) ]),
}).strict();

export const TaskUpsertWithWhereUniqueWithoutWorkflowInputSchema: z.ZodType<Prisma.TaskUpsertWithWhereUniqueWithoutWorkflowInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUpdateWithoutWorkflowInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutWorkflowInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutWorkflowInputSchema),z.lazy(() => TaskUncheckedCreateWithoutWorkflowInputSchema) ]),
}).strict();

export const TaskUpdateWithWhereUniqueWithoutWorkflowInputSchema: z.ZodType<Prisma.TaskUpdateWithWhereUniqueWithoutWorkflowInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateWithoutWorkflowInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutWorkflowInputSchema) ]),
}).strict();

export const TaskUpdateManyWithWhereWithoutWorkflowInputSchema: z.ZodType<Prisma.TaskUpdateManyWithWhereWithoutWorkflowInput> = z.object({
  where: z.lazy(() => TaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUpdateManyMutationInputSchema),z.lazy(() => TaskUncheckedUpdateManyWithoutWorkflowInputSchema) ]),
}).strict();

export const AuditLogCreateWithoutTaskInputSchema: z.ZodType<Prisma.AuditLogCreateWithoutTaskInput> = z.object({
  id: z.string().optional(),
  action: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable(),
  performedBy: z.lazy(() => UserCreateNestedOneWithoutAuditLogsInputSchema),
  workflow: z.lazy(() => WorkflowCreateNestedOneWithoutAuditLogsInputSchema).optional()
}).strict();

export const AuditLogUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string().optional(),
  workflowId: z.string().optional().nullable(),
  action: z.string(),
  performedById: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable()
}).strict();

export const AuditLogCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.AuditLogCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutTaskInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const AuditLogCreateManyTaskInputEnvelopeSchema: z.ZodType<Prisma.AuditLogCreateManyTaskInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AuditLogCreateManyTaskInputSchema),z.lazy(() => AuditLogCreateManyTaskInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutTasksAssignedInputSchema: z.ZodType<Prisma.UserCreateWithoutTasksAssignedInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTasksAssignedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTasksAssignedInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTasksAssignedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTasksAssignedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTasksAssignedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTasksAssignedInputSchema) ]),
}).strict();

export const DocumentCreateWithoutTasksInputSchema: z.ZodType<Prisma.DocumentCreateWithoutTasksInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentUncheckedCreateWithoutTasksInputSchema: z.ZodType<Prisma.DocumentUncheckedCreateWithoutTasksInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentCreateOrConnectWithoutTasksInputSchema: z.ZodType<Prisma.DocumentCreateOrConnectWithoutTasksInput> = z.object({
  where: z.lazy(() => DocumentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentCreateWithoutTasksInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutTasksInputSchema) ]),
}).strict();

export const WorkflowCreateWithoutTasksInputSchema: z.ZodType<Prisma.WorkflowCreateWithoutTasksInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.string().optional(),
  status: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutWorkflowInputSchema).optional()
}).strict();

export const WorkflowUncheckedCreateWithoutTasksInputSchema: z.ZodType<Prisma.WorkflowUncheckedCreateWithoutTasksInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.string().optional(),
  status: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutWorkflowInputSchema).optional()
}).strict();

export const WorkflowCreateOrConnectWithoutTasksInputSchema: z.ZodType<Prisma.WorkflowCreateOrConnectWithoutTasksInput> = z.object({
  where: z.lazy(() => WorkflowWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkflowCreateWithoutTasksInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutTasksInputSchema) ]),
}).strict();

export const TaskUserCreateWithoutTaskInputSchema: z.ZodType<Prisma.TaskUserCreateWithoutTaskInput> = z.object({
  id: z.string().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutTaskUsersInputSchema)
}).strict();

export const TaskUserUncheckedCreateWithoutTaskInputSchema: z.ZodType<Prisma.TaskUserUncheckedCreateWithoutTaskInput> = z.object({
  id: z.string().optional(),
  userId: z.string()
}).strict();

export const TaskUserCreateOrConnectWithoutTaskInputSchema: z.ZodType<Prisma.TaskUserCreateOrConnectWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskUserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskUserCreateWithoutTaskInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TaskUserCreateManyTaskInputEnvelopeSchema: z.ZodType<Prisma.TaskUserCreateManyTaskInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TaskUserCreateManyTaskInputSchema),z.lazy(() => TaskUserCreateManyTaskInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AuditLogUpsertWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.AuditLogUpsertWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AuditLogUpdateWithoutTaskInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutTaskInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const AuditLogUpdateWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.AuditLogUpdateWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateWithoutTaskInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutTaskInputSchema) ]),
}).strict();

export const AuditLogUpdateManyWithWhereWithoutTaskInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithWhereWithoutTaskInput> = z.object({
  where: z.lazy(() => AuditLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateManyMutationInputSchema),z.lazy(() => AuditLogUncheckedUpdateManyWithoutTaskInputSchema) ]),
}).strict();

export const UserUpsertWithoutTasksAssignedInputSchema: z.ZodType<Prisma.UserUpsertWithoutTasksAssignedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTasksAssignedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTasksAssignedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTasksAssignedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTasksAssignedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTasksAssignedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTasksAssignedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTasksAssignedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTasksAssignedInputSchema) ]),
}).strict();

export const UserUpdateWithoutTasksAssignedInputSchema: z.ZodType<Prisma.UserUpdateWithoutTasksAssignedInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTasksAssignedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTasksAssignedInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const DocumentUpsertWithoutTasksInputSchema: z.ZodType<Prisma.DocumentUpsertWithoutTasksInput> = z.object({
  update: z.union([ z.lazy(() => DocumentUpdateWithoutTasksInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutTasksInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentCreateWithoutTasksInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutTasksInputSchema) ]),
  where: z.lazy(() => DocumentWhereInputSchema).optional()
}).strict();

export const DocumentUpdateToOneWithWhereWithoutTasksInputSchema: z.ZodType<Prisma.DocumentUpdateToOneWithWhereWithoutTasksInput> = z.object({
  where: z.lazy(() => DocumentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DocumentUpdateWithoutTasksInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutTasksInputSchema) ]),
}).strict();

export const DocumentUpdateWithoutTasksInputSchema: z.ZodType<Prisma.DocumentUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const DocumentUncheckedUpdateWithoutTasksInputSchema: z.ZodType<Prisma.DocumentUncheckedUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const WorkflowUpsertWithoutTasksInputSchema: z.ZodType<Prisma.WorkflowUpsertWithoutTasksInput> = z.object({
  update: z.union([ z.lazy(() => WorkflowUpdateWithoutTasksInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutTasksInputSchema) ]),
  create: z.union([ z.lazy(() => WorkflowCreateWithoutTasksInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutTasksInputSchema) ]),
  where: z.lazy(() => WorkflowWhereInputSchema).optional()
}).strict();

export const WorkflowUpdateToOneWithWhereWithoutTasksInputSchema: z.ZodType<Prisma.WorkflowUpdateToOneWithWhereWithoutTasksInput> = z.object({
  where: z.lazy(() => WorkflowWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkflowUpdateWithoutTasksInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutTasksInputSchema) ]),
}).strict();

export const WorkflowUpdateWithoutTasksInputSchema: z.ZodType<Prisma.WorkflowUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutWorkflowNestedInputSchema).optional()
}).strict();

export const WorkflowUncheckedUpdateWithoutTasksInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutWorkflowNestedInputSchema).optional()
}).strict();

export const TaskUserUpsertWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.TaskUserUpsertWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskUserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaskUserUpdateWithoutTaskInputSchema),z.lazy(() => TaskUserUncheckedUpdateWithoutTaskInputSchema) ]),
  create: z.union([ z.lazy(() => TaskUserCreateWithoutTaskInputSchema),z.lazy(() => TaskUserUncheckedCreateWithoutTaskInputSchema) ]),
}).strict();

export const TaskUserUpdateWithWhereUniqueWithoutTaskInputSchema: z.ZodType<Prisma.TaskUserUpdateWithWhereUniqueWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskUserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaskUserUpdateWithoutTaskInputSchema),z.lazy(() => TaskUserUncheckedUpdateWithoutTaskInputSchema) ]),
}).strict();

export const TaskUserUpdateManyWithWhereWithoutTaskInputSchema: z.ZodType<Prisma.TaskUserUpdateManyWithWhereWithoutTaskInput> = z.object({
  where: z.lazy(() => TaskUserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaskUserUpdateManyMutationInputSchema),z.lazy(() => TaskUserUncheckedUpdateManyWithoutTaskInputSchema) ]),
}).strict();

export const UserCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserCreateWithoutAuditLogsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAuditLogsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]),
}).strict();

export const TaskCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.TaskCreateWithoutAuditLogsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTasksAssignedInputSchema).optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutTasksInputSchema).optional(),
  workflow: z.lazy(() => WorkflowCreateNestedOneWithoutTasksInputSchema),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskUncheckedCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutAuditLogsInput> = z.object({
  id: z.string().optional(),
  workflowId: z.string(),
  assignedToId: z.string().optional().nullable(),
  documentId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutAuditLogsInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutAuditLogsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAuditLogsInputSchema) ]),
}).strict();

export const WorkflowCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.WorkflowCreateWithoutAuditLogsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.string().optional(),
  status: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutWorkflowInputSchema).optional()
}).strict();

export const WorkflowUncheckedCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.WorkflowUncheckedCreateWithoutAuditLogsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  type: z.string().optional(),
  status: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutWorkflowInputSchema).optional()
}).strict();

export const WorkflowCreateOrConnectWithoutAuditLogsInputSchema: z.ZodType<Prisma.WorkflowCreateOrConnectWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => WorkflowWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WorkflowCreateWithoutAuditLogsInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutAuditLogsInputSchema) ]),
}).strict();

export const UserUpsertWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAuditLogsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuditLogsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuditLogsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const TaskUpsertWithoutAuditLogsInputSchema: z.ZodType<Prisma.TaskUpsertWithoutAuditLogsInput> = z.object({
  update: z.union([ z.lazy(() => TaskUpdateWithoutAuditLogsInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutAuditLogsInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutAuditLogsInputSchema),z.lazy(() => TaskUncheckedCreateWithoutAuditLogsInputSchema) ]),
  where: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const TaskUpdateToOneWithWhereWithoutAuditLogsInputSchema: z.ZodType<Prisma.TaskUpdateToOneWithWhereWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => TaskWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TaskUpdateWithoutAuditLogsInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutAuditLogsInputSchema) ]),
}).strict();

export const TaskUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.TaskUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTasksAssignedNestedInputSchema).optional(),
  document: z.lazy(() => DocumentUpdateOneWithoutTasksNestedInputSchema).optional(),
  workflow: z.lazy(() => WorkflowUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workflowId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const WorkflowUpsertWithoutAuditLogsInputSchema: z.ZodType<Prisma.WorkflowUpsertWithoutAuditLogsInput> = z.object({
  update: z.union([ z.lazy(() => WorkflowUpdateWithoutAuditLogsInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutAuditLogsInputSchema) ]),
  create: z.union([ z.lazy(() => WorkflowCreateWithoutAuditLogsInputSchema),z.lazy(() => WorkflowUncheckedCreateWithoutAuditLogsInputSchema) ]),
  where: z.lazy(() => WorkflowWhereInputSchema).optional()
}).strict();

export const WorkflowUpdateToOneWithWhereWithoutAuditLogsInputSchema: z.ZodType<Prisma.WorkflowUpdateToOneWithWhereWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => WorkflowWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => WorkflowUpdateWithoutAuditLogsInputSchema),z.lazy(() => WorkflowUncheckedUpdateWithoutAuditLogsInputSchema) ]),
}).strict();

export const WorkflowUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.WorkflowUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutWorkflowNestedInputSchema).optional()
}).strict();

export const WorkflowUncheckedUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.WorkflowUncheckedUpdateWithoutAuditLogsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutWorkflowNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutNotificationsInputSchema: z.ZodType<Prisma.UserCreateWithoutNotificationsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutNotificationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutNotificationsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutNotificationsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutNotificationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema) ]),
}).strict();

export const UserUpsertWithoutNotificationsInputSchema: z.ZodType<Prisma.UserUpsertWithoutNotificationsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutNotificationsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutNotificationsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutNotificationsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutNotificationsInputSchema) ]),
}).strict();

export const UserUpdateWithoutNotificationsInputSchema: z.ZodType<Prisma.UserUpdateWithoutNotificationsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutNotificationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutNotificationsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const DocumentCreateWithoutAttachmentsInputSchema: z.ZodType<Prisma.DocumentCreateWithoutAttachmentsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentUncheckedCreateWithoutAttachmentsInputSchema: z.ZodType<Prisma.DocumentUncheckedCreateWithoutAttachmentsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedCreateNestedOneWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentCreateOrConnectWithoutAttachmentsInputSchema: z.ZodType<Prisma.DocumentCreateOrConnectWithoutAttachmentsInput> = z.object({
  where: z.lazy(() => DocumentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentCreateWithoutAttachmentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutAttachmentsInputSchema) ]),
}).strict();

export const DocumentUpsertWithoutAttachmentsInputSchema: z.ZodType<Prisma.DocumentUpsertWithoutAttachmentsInput> = z.object({
  update: z.union([ z.lazy(() => DocumentUpdateWithoutAttachmentsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutAttachmentsInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentCreateWithoutAttachmentsInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutAttachmentsInputSchema) ]),
  where: z.lazy(() => DocumentWhereInputSchema).optional()
}).strict();

export const DocumentUpdateToOneWithWhereWithoutAttachmentsInputSchema: z.ZodType<Prisma.DocumentUpdateToOneWithWhereWithoutAttachmentsInput> = z.object({
  where: z.lazy(() => DocumentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DocumentUpdateWithoutAttachmentsInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutAttachmentsInputSchema) ]),
}).strict();

export const DocumentUpdateWithoutAttachmentsInputSchema: z.ZodType<Prisma.DocumentUpdateWithoutAttachmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const DocumentUncheckedUpdateWithoutAttachmentsInputSchema: z.ZodType<Prisma.DocumentUncheckedUpdateWithoutAttachmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  fileMetadata: z.lazy(() => FileMetadataUncheckedUpdateOneWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutDigitalCertificatesInputSchema: z.ZodType<Prisma.UserCreateWithoutDigitalCertificatesInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutDigitalCertificatesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutDigitalCertificatesInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutDigitalCertificatesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutDigitalCertificatesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutDigitalCertificatesInputSchema),z.lazy(() => UserUncheckedCreateWithoutDigitalCertificatesInputSchema) ]),
}).strict();

export const UserUpsertWithoutDigitalCertificatesInputSchema: z.ZodType<Prisma.UserUpsertWithoutDigitalCertificatesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutDigitalCertificatesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDigitalCertificatesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutDigitalCertificatesInputSchema),z.lazy(() => UserUncheckedCreateWithoutDigitalCertificatesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutDigitalCertificatesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutDigitalCertificatesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutDigitalCertificatesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutDigitalCertificatesInputSchema) ]),
}).strict();

export const UserUpdateWithoutDigitalCertificatesInputSchema: z.ZodType<Prisma.UserUpdateWithoutDigitalCertificatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutDigitalCertificatesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutDigitalCertificatesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const DocumentCreateWithoutFileMetadataInputSchema: z.ZodType<Prisma.DocumentCreateWithoutFileMetadataInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionCreateNestedManyWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentUncheckedCreateWithoutFileMetadataInputSchema: z.ZodType<Prisma.DocumentUncheckedCreateWithoutFileMetadataInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  filePath: z.string(),
  mimeType: z.string(),
  keywords: z.union([ z.lazy(() => DocumentCreatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.string().optional().nullable(),
  ownerId: z.string(),
  signed: z.boolean().optional(),
  signedAt: z.coerce.date().optional().nullable(),
  signature: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => AttachmentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedCreateNestedManyWithoutDocumentInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutDocumentInputSchema).optional()
}).strict();

export const DocumentCreateOrConnectWithoutFileMetadataInputSchema: z.ZodType<Prisma.DocumentCreateOrConnectWithoutFileMetadataInput> = z.object({
  where: z.lazy(() => DocumentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DocumentCreateWithoutFileMetadataInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutFileMetadataInputSchema) ]),
}).strict();

export const DocumentUpsertWithoutFileMetadataInputSchema: z.ZodType<Prisma.DocumentUpsertWithoutFileMetadataInput> = z.object({
  update: z.union([ z.lazy(() => DocumentUpdateWithoutFileMetadataInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutFileMetadataInputSchema) ]),
  create: z.union([ z.lazy(() => DocumentCreateWithoutFileMetadataInputSchema),z.lazy(() => DocumentUncheckedCreateWithoutFileMetadataInputSchema) ]),
  where: z.lazy(() => DocumentWhereInputSchema).optional()
}).strict();

export const DocumentUpdateToOneWithWhereWithoutFileMetadataInputSchema: z.ZodType<Prisma.DocumentUpdateToOneWithWhereWithoutFileMetadataInput> = z.object({
  where: z.lazy(() => DocumentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DocumentUpdateWithoutFileMetadataInputSchema),z.lazy(() => DocumentUncheckedUpdateWithoutFileMetadataInputSchema) ]),
}).strict();

export const DocumentUpdateWithoutFileMetadataInputSchema: z.ZodType<Prisma.DocumentUpdateWithoutFileMetadataInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUpdateManyWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const DocumentUncheckedUpdateWithoutFileMetadataInputSchema: z.ZodType<Prisma.DocumentUncheckedUpdateWithoutFileMetadataInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  keywords: z.union([ z.lazy(() => DocumentUpdatekeywordsInputSchema),z.string().array() ]).optional(),
  ocrText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ownerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  signedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signature: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => AttachmentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  versions: z.lazy(() => DocumentVersionUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  tasks: z.lazy(() => TaskUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutDocumentNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutMayorInstitutionsInputSchema: z.ZodType<Prisma.UserCreateWithoutMayorInstitutionsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutMayorInstitutionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutMayorInstitutionsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutMayorInstitutionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutMayorInstitutionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutMayorInstitutionsInputSchema) ]),
}).strict();

export const UserCreateWithoutViceMayorInstitutionsInputSchema: z.ZodType<Prisma.UserCreateWithoutViceMayorInstitutionsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutViceMayorInstitutionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutViceMayorInstitutionsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutViceMayorInstitutionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutViceMayorInstitutionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutViceMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutViceMayorInstitutionsInputSchema) ]),
}).strict();

export const DepartmentCreateWithoutInstitutionInputSchema: z.ZodType<Prisma.DepartmentCreateWithoutInstitutionInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  parentDepartment: z.lazy(() => DepartmentCreateNestedOneWithoutChildDepartmentsInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  head: z.lazy(() => UserCreateNestedOneWithoutHeadOfDepartmentsInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentUncheckedCreateWithoutInstitutionInputSchema: z.ZodType<Prisma.DepartmentUncheckedCreateWithoutInstitutionInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  parentDepartmentId: z.number().int().optional().nullable(),
  headId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentCreateOrConnectWithoutInstitutionInputSchema: z.ZodType<Prisma.DepartmentCreateOrConnectWithoutInstitutionInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutInstitutionInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutInstitutionInputSchema) ]),
}).strict();

export const DepartmentCreateManyInstitutionInputEnvelopeSchema: z.ZodType<Prisma.DepartmentCreateManyInstitutionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DepartmentCreateManyInstitutionInputSchema),z.lazy(() => DepartmentCreateManyInstitutionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutMayorInstitutionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutMayorInstitutionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMayorInstitutionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutMayorInstitutionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutMayorInstitutionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutMayorInstitutionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMayorInstitutionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutMayorInstitutionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutMayorInstitutionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutMayorInstitutionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutMayorInstitutionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutViceMayorInstitutionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutViceMayorInstitutionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutViceMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutViceMayorInstitutionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutViceMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutViceMayorInstitutionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutViceMayorInstitutionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutViceMayorInstitutionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutViceMayorInstitutionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutViceMayorInstitutionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutViceMayorInstitutionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutViceMayorInstitutionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutViceMayorInstitutionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutViceMayorInstitutionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const DepartmentUpsertWithWhereUniqueWithoutInstitutionInputSchema: z.ZodType<Prisma.DepartmentUpsertWithWhereUniqueWithoutInstitutionInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DepartmentUpdateWithoutInstitutionInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutInstitutionInputSchema) ]),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutInstitutionInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutInstitutionInputSchema) ]),
}).strict();

export const DepartmentUpdateWithWhereUniqueWithoutInstitutionInputSchema: z.ZodType<Prisma.DepartmentUpdateWithWhereUniqueWithoutInstitutionInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DepartmentUpdateWithoutInstitutionInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutInstitutionInputSchema) ]),
}).strict();

export const DepartmentUpdateManyWithWhereWithoutInstitutionInputSchema: z.ZodType<Prisma.DepartmentUpdateManyWithWhereWithoutInstitutionInput> = z.object({
  where: z.lazy(() => DepartmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DepartmentUpdateManyMutationInputSchema),z.lazy(() => DepartmentUncheckedUpdateManyWithoutInstitutionInputSchema) ]),
}).strict();

export const InstitutionCreateWithoutDepartmentsInputSchema: z.ZodType<Prisma.InstitutionCreateWithoutDepartmentsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  flag: z.string().optional().nullable(),
  emblem: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  mayor: z.lazy(() => UserCreateNestedOneWithoutMayorInstitutionsInputSchema).optional(),
  viceMayor: z.lazy(() => UserCreateNestedOneWithoutViceMayorInstitutionsInputSchema).optional()
}).strict();

export const InstitutionUncheckedCreateWithoutDepartmentsInputSchema: z.ZodType<Prisma.InstitutionUncheckedCreateWithoutDepartmentsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  flag: z.string().optional().nullable(),
  emblem: z.string().optional().nullable(),
  mayorId: z.string().optional().nullable(),
  viceMayorId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InstitutionCreateOrConnectWithoutDepartmentsInputSchema: z.ZodType<Prisma.InstitutionCreateOrConnectWithoutDepartmentsInput> = z.object({
  where: z.lazy(() => InstitutionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InstitutionCreateWithoutDepartmentsInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutDepartmentsInputSchema) ]),
}).strict();

export const DepartmentCreateWithoutChildDepartmentsInputSchema: z.ZodType<Prisma.DepartmentCreateWithoutChildDepartmentsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  institution: z.lazy(() => InstitutionCreateNestedOneWithoutDepartmentsInputSchema),
  parentDepartment: z.lazy(() => DepartmentCreateNestedOneWithoutChildDepartmentsInputSchema).optional(),
  head: z.lazy(() => UserCreateNestedOneWithoutHeadOfDepartmentsInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentUncheckedCreateWithoutChildDepartmentsInputSchema: z.ZodType<Prisma.DepartmentUncheckedCreateWithoutChildDepartmentsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  institutionId: z.string(),
  parentDepartmentId: z.number().int().optional().nullable(),
  headId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentCreateOrConnectWithoutChildDepartmentsInputSchema: z.ZodType<Prisma.DepartmentCreateOrConnectWithoutChildDepartmentsInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutChildDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutChildDepartmentsInputSchema) ]),
}).strict();

export const DepartmentCreateWithoutParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentCreateWithoutParentDepartmentInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  institution: z.lazy(() => InstitutionCreateNestedOneWithoutDepartmentsInputSchema),
  childDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  head: z.lazy(() => UserCreateNestedOneWithoutHeadOfDepartmentsInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentUncheckedCreateWithoutParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentUncheckedCreateWithoutParentDepartmentInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  institutionId: z.string(),
  headId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentCreateOrConnectWithoutParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentCreateOrConnectWithoutParentDepartmentInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutParentDepartmentInputSchema) ]),
}).strict();

export const DepartmentCreateManyParentDepartmentInputEnvelopeSchema: z.ZodType<Prisma.DepartmentCreateManyParentDepartmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => DepartmentCreateManyParentDepartmentInputSchema),z.lazy(() => DepartmentCreateManyParentDepartmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutHeadOfDepartmentsInputSchema: z.ZodType<Prisma.UserCreateWithoutHeadOfDepartmentsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutHeadOfDepartmentsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutHeadOfDepartmentsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutHeadOfDepartmentsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutHeadOfDepartmentsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutHeadOfDepartmentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutHeadOfDepartmentsInputSchema) ]),
}).strict();

export const UserDepartmentCreateWithoutDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentCreateWithoutDepartmentInput> = z.object({
  id: z.string().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutUserDepartmentsInputSchema)
}).strict();

export const UserDepartmentUncheckedCreateWithoutDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedCreateWithoutDepartmentInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserDepartmentCreateOrConnectWithoutDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentCreateOrConnectWithoutDepartmentInput> = z.object({
  where: z.lazy(() => UserDepartmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutDepartmentInputSchema) ]),
}).strict();

export const UserDepartmentCreateManyDepartmentInputEnvelopeSchema: z.ZodType<Prisma.UserDepartmentCreateManyDepartmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserDepartmentCreateManyDepartmentInputSchema),z.lazy(() => UserDepartmentCreateManyDepartmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketCreateWithoutDepartmentInputSchema: z.ZodType<Prisma.TicketCreateWithoutDepartmentInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutDepartmentInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutDepartmentInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutDepartmentInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutDepartmentInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutDepartmentInputSchema),z.lazy(() => TicketUncheckedCreateWithoutDepartmentInputSchema) ]),
}).strict();

export const TicketCreateManyDepartmentInputEnvelopeSchema: z.ZodType<Prisma.TicketCreateManyDepartmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketCreateManyDepartmentInputSchema),z.lazy(() => TicketCreateManyDepartmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const HelpTopicCreateWithoutDepartmentInputSchema: z.ZodType<Prisma.HelpTopicCreateWithoutDepartmentInput> = z.object({
  topic: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutHelpTopicInputSchema).optional()
}).strict();

export const HelpTopicUncheckedCreateWithoutDepartmentInputSchema: z.ZodType<Prisma.HelpTopicUncheckedCreateWithoutDepartmentInput> = z.object({
  id: z.number().int().optional(),
  topic: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutHelpTopicInputSchema).optional()
}).strict();

export const HelpTopicCreateOrConnectWithoutDepartmentInputSchema: z.ZodType<Prisma.HelpTopicCreateOrConnectWithoutDepartmentInput> = z.object({
  where: z.lazy(() => HelpTopicWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => HelpTopicCreateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUncheckedCreateWithoutDepartmentInputSchema) ]),
}).strict();

export const HelpTopicCreateManyDepartmentInputEnvelopeSchema: z.ZodType<Prisma.HelpTopicCreateManyDepartmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => HelpTopicCreateManyDepartmentInputSchema),z.lazy(() => HelpTopicCreateManyDepartmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InstitutionUpsertWithoutDepartmentsInputSchema: z.ZodType<Prisma.InstitutionUpsertWithoutDepartmentsInput> = z.object({
  update: z.union([ z.lazy(() => InstitutionUpdateWithoutDepartmentsInputSchema),z.lazy(() => InstitutionUncheckedUpdateWithoutDepartmentsInputSchema) ]),
  create: z.union([ z.lazy(() => InstitutionCreateWithoutDepartmentsInputSchema),z.lazy(() => InstitutionUncheckedCreateWithoutDepartmentsInputSchema) ]),
  where: z.lazy(() => InstitutionWhereInputSchema).optional()
}).strict();

export const InstitutionUpdateToOneWithWhereWithoutDepartmentsInputSchema: z.ZodType<Prisma.InstitutionUpdateToOneWithWhereWithoutDepartmentsInput> = z.object({
  where: z.lazy(() => InstitutionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InstitutionUpdateWithoutDepartmentsInputSchema),z.lazy(() => InstitutionUncheckedUpdateWithoutDepartmentsInputSchema) ]),
}).strict();

export const InstitutionUpdateWithoutDepartmentsInputSchema: z.ZodType<Prisma.InstitutionUpdateWithoutDepartmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mayor: z.lazy(() => UserUpdateOneWithoutMayorInstitutionsNestedInputSchema).optional(),
  viceMayor: z.lazy(() => UserUpdateOneWithoutViceMayorInstitutionsNestedInputSchema).optional()
}).strict();

export const InstitutionUncheckedUpdateWithoutDepartmentsInputSchema: z.ZodType<Prisma.InstitutionUncheckedUpdateWithoutDepartmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mayorId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viceMayorId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DepartmentUpsertWithoutChildDepartmentsInputSchema: z.ZodType<Prisma.DepartmentUpsertWithoutChildDepartmentsInput> = z.object({
  update: z.union([ z.lazy(() => DepartmentUpdateWithoutChildDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutChildDepartmentsInputSchema) ]),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutChildDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutChildDepartmentsInputSchema) ]),
  where: z.lazy(() => DepartmentWhereInputSchema).optional()
}).strict();

export const DepartmentUpdateToOneWithWhereWithoutChildDepartmentsInputSchema: z.ZodType<Prisma.DepartmentUpdateToOneWithWhereWithoutChildDepartmentsInput> = z.object({
  where: z.lazy(() => DepartmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DepartmentUpdateWithoutChildDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutChildDepartmentsInputSchema) ]),
}).strict();

export const DepartmentUpdateWithoutChildDepartmentsInputSchema: z.ZodType<Prisma.DepartmentUpdateWithoutChildDepartmentsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  institution: z.lazy(() => InstitutionUpdateOneRequiredWithoutDepartmentsNestedInputSchema).optional(),
  parentDepartment: z.lazy(() => DepartmentUpdateOneWithoutChildDepartmentsNestedInputSchema).optional(),
  head: z.lazy(() => UserUpdateOneWithoutHeadOfDepartmentsNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUncheckedUpdateWithoutChildDepartmentsInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateWithoutChildDepartmentsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentDepartmentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  headId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUpsertWithWhereUniqueWithoutParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentUpsertWithWhereUniqueWithoutParentDepartmentInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DepartmentUpdateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutParentDepartmentInputSchema) ]),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutParentDepartmentInputSchema) ]),
}).strict();

export const DepartmentUpdateWithWhereUniqueWithoutParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentUpdateWithWhereUniqueWithoutParentDepartmentInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DepartmentUpdateWithoutParentDepartmentInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutParentDepartmentInputSchema) ]),
}).strict();

export const DepartmentUpdateManyWithWhereWithoutParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentUpdateManyWithWhereWithoutParentDepartmentInput> = z.object({
  where: z.lazy(() => DepartmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DepartmentUpdateManyMutationInputSchema),z.lazy(() => DepartmentUncheckedUpdateManyWithoutParentDepartmentInputSchema) ]),
}).strict();

export const UserUpsertWithoutHeadOfDepartmentsInputSchema: z.ZodType<Prisma.UserUpsertWithoutHeadOfDepartmentsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutHeadOfDepartmentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutHeadOfDepartmentsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutHeadOfDepartmentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutHeadOfDepartmentsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutHeadOfDepartmentsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutHeadOfDepartmentsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutHeadOfDepartmentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutHeadOfDepartmentsInputSchema) ]),
}).strict();

export const UserUpdateWithoutHeadOfDepartmentsInputSchema: z.ZodType<Prisma.UserUpdateWithoutHeadOfDepartmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutHeadOfDepartmentsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutHeadOfDepartmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserDepartmentUpsertWithWhereUniqueWithoutDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentUpsertWithWhereUniqueWithoutDepartmentInput> = z.object({
  where: z.lazy(() => UserDepartmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserDepartmentUpdateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUncheckedUpdateWithoutDepartmentInputSchema) ]),
  create: z.union([ z.lazy(() => UserDepartmentCreateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUncheckedCreateWithoutDepartmentInputSchema) ]),
}).strict();

export const UserDepartmentUpdateWithWhereUniqueWithoutDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentUpdateWithWhereUniqueWithoutDepartmentInput> = z.object({
  where: z.lazy(() => UserDepartmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserDepartmentUpdateWithoutDepartmentInputSchema),z.lazy(() => UserDepartmentUncheckedUpdateWithoutDepartmentInputSchema) ]),
}).strict();

export const UserDepartmentUpdateManyWithWhereWithoutDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentUpdateManyWithWhereWithoutDepartmentInput> = z.object({
  where: z.lazy(() => UserDepartmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserDepartmentUpdateManyMutationInputSchema),z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutDepartmentInputSchema) ]),
}).strict();

export const TicketUpsertWithWhereUniqueWithoutDepartmentInputSchema: z.ZodType<Prisma.TicketUpsertWithWhereUniqueWithoutDepartmentInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketUpdateWithoutDepartmentInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutDepartmentInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutDepartmentInputSchema),z.lazy(() => TicketUncheckedCreateWithoutDepartmentInputSchema) ]),
}).strict();

export const TicketUpdateWithWhereUniqueWithoutDepartmentInputSchema: z.ZodType<Prisma.TicketUpdateWithWhereUniqueWithoutDepartmentInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateWithoutDepartmentInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutDepartmentInputSchema) ]),
}).strict();

export const TicketUpdateManyWithWhereWithoutDepartmentInputSchema: z.ZodType<Prisma.TicketUpdateManyWithWhereWithoutDepartmentInput> = z.object({
  where: z.lazy(() => TicketScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateManyMutationInputSchema),z.lazy(() => TicketUncheckedUpdateManyWithoutDepartmentInputSchema) ]),
}).strict();

export const HelpTopicUpsertWithWhereUniqueWithoutDepartmentInputSchema: z.ZodType<Prisma.HelpTopicUpsertWithWhereUniqueWithoutDepartmentInput> = z.object({
  where: z.lazy(() => HelpTopicWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => HelpTopicUpdateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUncheckedUpdateWithoutDepartmentInputSchema) ]),
  create: z.union([ z.lazy(() => HelpTopicCreateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUncheckedCreateWithoutDepartmentInputSchema) ]),
}).strict();

export const HelpTopicUpdateWithWhereUniqueWithoutDepartmentInputSchema: z.ZodType<Prisma.HelpTopicUpdateWithWhereUniqueWithoutDepartmentInput> = z.object({
  where: z.lazy(() => HelpTopicWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => HelpTopicUpdateWithoutDepartmentInputSchema),z.lazy(() => HelpTopicUncheckedUpdateWithoutDepartmentInputSchema) ]),
}).strict();

export const HelpTopicUpdateManyWithWhereWithoutDepartmentInputSchema: z.ZodType<Prisma.HelpTopicUpdateManyWithWhereWithoutDepartmentInput> = z.object({
  where: z.lazy(() => HelpTopicScalarWhereInputSchema),
  data: z.union([ z.lazy(() => HelpTopicUpdateManyMutationInputSchema),z.lazy(() => HelpTopicUncheckedUpdateManyWithoutDepartmentInputSchema) ]),
}).strict();

export const HelpTopicScalarWhereInputSchema: z.ZodType<Prisma.HelpTopicScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => HelpTopicScalarWhereInputSchema),z.lazy(() => HelpTopicScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => HelpTopicScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => HelpTopicScalarWhereInputSchema),z.lazy(() => HelpTopicScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  topic: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  departmentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DepartmentCreateWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.DepartmentCreateWithoutUserDepartmentsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  institution: z.lazy(() => InstitutionCreateNestedOneWithoutDepartmentsInputSchema),
  parentDepartment: z.lazy(() => DepartmentCreateNestedOneWithoutChildDepartmentsInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  head: z.lazy(() => UserCreateNestedOneWithoutHeadOfDepartmentsInputSchema).optional(),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentUncheckedCreateWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.DepartmentUncheckedCreateWithoutUserDepartmentsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  institutionId: z.string(),
  parentDepartmentId: z.number().int().optional().nullable(),
  headId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentCreateOrConnectWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.DepartmentCreateOrConnectWithoutUserDepartmentsInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutUserDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutUserDepartmentsInputSchema) ]),
}).strict();

export const UserCreateWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.UserCreateWithoutUserDepartmentsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUserDepartmentsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUserDepartmentsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUserDepartmentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserDepartmentsInputSchema) ]),
}).strict();

export const DepartmentUpsertWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.DepartmentUpsertWithoutUserDepartmentsInput> = z.object({
  update: z.union([ z.lazy(() => DepartmentUpdateWithoutUserDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutUserDepartmentsInputSchema) ]),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutUserDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutUserDepartmentsInputSchema) ]),
  where: z.lazy(() => DepartmentWhereInputSchema).optional()
}).strict();

export const DepartmentUpdateToOneWithWhereWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.DepartmentUpdateToOneWithWhereWithoutUserDepartmentsInput> = z.object({
  where: z.lazy(() => DepartmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DepartmentUpdateWithoutUserDepartmentsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutUserDepartmentsInputSchema) ]),
}).strict();

export const DepartmentUpdateWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.DepartmentUpdateWithoutUserDepartmentsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  institution: z.lazy(() => InstitutionUpdateOneRequiredWithoutDepartmentsNestedInputSchema).optional(),
  parentDepartment: z.lazy(() => DepartmentUpdateOneWithoutChildDepartmentsNestedInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  head: z.lazy(() => UserUpdateOneWithoutHeadOfDepartmentsNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUncheckedUpdateWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateWithoutUserDepartmentsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentDepartmentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  headId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.UserUpsertWithoutUserDepartmentsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUserDepartmentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserDepartmentsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUserDepartmentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserDepartmentsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUserDepartmentsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUserDepartmentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserDepartmentsInputSchema) ]),
}).strict();

export const UserUpdateWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.UserUpdateWithoutUserDepartmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUserDepartmentsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUserDepartmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutTicketsAssignedInputSchema: z.ZodType<Prisma.UserCreateWithoutTicketsAssignedInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTicketsAssignedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTicketsAssignedInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTicketsAssignedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTicketsAssignedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTicketsAssignedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketsAssignedInputSchema) ]),
}).strict();

export const UserCreateWithoutTicketsCreatedInputSchema: z.ZodType<Prisma.UserCreateWithoutTicketsCreatedInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTicketsCreatedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTicketsCreatedInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTicketsCreatedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTicketsCreatedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTicketsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketsCreatedInputSchema) ]),
}).strict();

export const DepartmentCreateWithoutTicketsInputSchema: z.ZodType<Prisma.DepartmentCreateWithoutTicketsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  institution: z.lazy(() => InstitutionCreateNestedOneWithoutDepartmentsInputSchema),
  parentDepartment: z.lazy(() => DepartmentCreateNestedOneWithoutChildDepartmentsInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  head: z.lazy(() => UserCreateNestedOneWithoutHeadOfDepartmentsInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentUncheckedCreateWithoutTicketsInputSchema: z.ZodType<Prisma.DepartmentUncheckedCreateWithoutTicketsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  institutionId: z.string(),
  parentDepartmentId: z.number().int().optional().nullable(),
  headId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentCreateOrConnectWithoutTicketsInputSchema: z.ZodType<Prisma.DepartmentCreateOrConnectWithoutTicketsInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutTicketsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutTicketsInputSchema) ]),
}).strict();

export const HelpTopicCreateWithoutTicketsInputSchema: z.ZodType<Prisma.HelpTopicCreateWithoutTicketsInput> = z.object({
  topic: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutHelpTopicsInputSchema)
}).strict();

export const HelpTopicUncheckedCreateWithoutTicketsInputSchema: z.ZodType<Prisma.HelpTopicUncheckedCreateWithoutTicketsInput> = z.object({
  id: z.number().int().optional(),
  topic: z.string(),
  description: z.string().optional().nullable(),
  departmentId: z.number().int(),
  createdAt: z.coerce.date().optional()
}).strict();

export const HelpTopicCreateOrConnectWithoutTicketsInputSchema: z.ZodType<Prisma.HelpTopicCreateOrConnectWithoutTicketsInput> = z.object({
  where: z.lazy(() => HelpTopicWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => HelpTopicCreateWithoutTicketsInputSchema),z.lazy(() => HelpTopicUncheckedCreateWithoutTicketsInputSchema) ]),
}).strict();

export const TicketPriorityCreateWithoutTicketsInputSchema: z.ZodType<Prisma.TicketPriorityCreateWithoutTicketsInput> = z.object({
  name: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketPriorityUncheckedCreateWithoutTicketsInputSchema: z.ZodType<Prisma.TicketPriorityUncheckedCreateWithoutTicketsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketPriorityCreateOrConnectWithoutTicketsInputSchema: z.ZodType<Prisma.TicketPriorityCreateOrConnectWithoutTicketsInput> = z.object({
  where: z.lazy(() => TicketPriorityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketPriorityCreateWithoutTicketsInputSchema),z.lazy(() => TicketPriorityUncheckedCreateWithoutTicketsInputSchema) ]),
}).strict();

export const SLAPlanCreateWithoutTicketsInputSchema: z.ZodType<Prisma.SLAPlanCreateWithoutTicketsInput> = z.object({
  name: z.string(),
  gracePeriod: z.number().int(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SLAPlanUncheckedCreateWithoutTicketsInputSchema: z.ZodType<Prisma.SLAPlanUncheckedCreateWithoutTicketsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  gracePeriod: z.number().int(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SLAPlanCreateOrConnectWithoutTicketsInputSchema: z.ZodType<Prisma.SLAPlanCreateOrConnectWithoutTicketsInput> = z.object({
  where: z.lazy(() => SLAPlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SLAPlanCreateWithoutTicketsInputSchema),z.lazy(() => SLAPlanUncheckedCreateWithoutTicketsInputSchema) ]),
}).strict();

export const TicketStatusCreateWithoutTicketsInputSchema: z.ZodType<Prisma.TicketStatusCreateWithoutTicketsInput> = z.object({
  name: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketStatusUncheckedCreateWithoutTicketsInputSchema: z.ZodType<Prisma.TicketStatusUncheckedCreateWithoutTicketsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketStatusCreateOrConnectWithoutTicketsInputSchema: z.ZodType<Prisma.TicketStatusCreateOrConnectWithoutTicketsInput> = z.object({
  where: z.lazy(() => TicketStatusWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketStatusCreateWithoutTicketsInputSchema),z.lazy(() => TicketStatusUncheckedCreateWithoutTicketsInputSchema) ]),
}).strict();

export const TicketAttachmentCreateWithoutTicketInputSchema: z.ZodType<Prisma.TicketAttachmentCreateWithoutTicketInput> = z.object({
  id: z.string().optional(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional(),
  ticketThread: z.lazy(() => TicketThreadCreateNestedOneWithoutAttachmentsInputSchema)
}).strict();

export const TicketAttachmentUncheckedCreateWithoutTicketInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedCreateWithoutTicketInput> = z.object({
  id: z.string().optional(),
  ticketThreadId: z.string(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketAttachmentCreateOrConnectWithoutTicketInputSchema: z.ZodType<Prisma.TicketAttachmentCreateOrConnectWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketAttachmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketInputSchema) ]),
}).strict();

export const TicketAttachmentCreateManyTicketInputEnvelopeSchema: z.ZodType<Prisma.TicketAttachmentCreateManyTicketInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketAttachmentCreateManyTicketInputSchema),z.lazy(() => TicketAttachmentCreateManyTicketInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketCollaboratorCreateWithoutTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorCreateWithoutTicketInput> = z.object({
  id: z.string().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutTicketCollaboratorsInputSchema)
}).strict();

export const TicketCollaboratorUncheckedCreateWithoutTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedCreateWithoutTicketInput> = z.object({
  id: z.string().optional(),
  userId: z.string()
}).strict();

export const TicketCollaboratorCreateOrConnectWithoutTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorCreateOrConnectWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutTicketInputSchema) ]),
}).strict();

export const TicketCollaboratorCreateManyTicketInputEnvelopeSchema: z.ZodType<Prisma.TicketCollaboratorCreateManyTicketInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketCollaboratorCreateManyTicketInputSchema),z.lazy(() => TicketCollaboratorCreateManyTicketInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketCustomFieldCreateWithoutTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldCreateWithoutTicketInput> = z.object({
  id: z.string().optional(),
  value: z.string(),
  field: z.lazy(() => CustomFieldCreateNestedOneWithoutTicketsInputSchema)
}).strict();

export const TicketCustomFieldUncheckedCreateWithoutTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedCreateWithoutTicketInput> = z.object({
  id: z.string().optional(),
  fieldId: z.number().int(),
  value: z.string()
}).strict();

export const TicketCustomFieldCreateOrConnectWithoutTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldCreateOrConnectWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutTicketInputSchema) ]),
}).strict();

export const TicketCustomFieldCreateManyTicketInputEnvelopeSchema: z.ZodType<Prisma.TicketCustomFieldCreateManyTicketInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketCustomFieldCreateManyTicketInputSchema),z.lazy(() => TicketCustomFieldCreateManyTicketInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketThreadCreateWithoutTicketInputSchema: z.ZodType<Prisma.TicketThreadCreateWithoutTicketInput> = z.object({
  id: z.string().optional(),
  message: z.string(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketThreadInputSchema).optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutTicketThreadsInputSchema)
}).strict();

export const TicketThreadUncheckedCreateWithoutTicketInputSchema: z.ZodType<Prisma.TicketThreadUncheckedCreateWithoutTicketInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  message: z.string(),
  createdAt: z.coerce.date().optional(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketThreadInputSchema).optional()
}).strict();

export const TicketThreadCreateOrConnectWithoutTicketInputSchema: z.ZodType<Prisma.TicketThreadCreateOrConnectWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketThreadWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutTicketInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutTicketInputSchema) ]),
}).strict();

export const TicketUserCreateWithoutTicketInputSchema: z.ZodType<Prisma.TicketUserCreateWithoutTicketInput> = z.object({
  id: z.string().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutTicketUsersInputSchema)
}).strict();

export const TicketUserUncheckedCreateWithoutTicketInputSchema: z.ZodType<Prisma.TicketUserUncheckedCreateWithoutTicketInput> = z.object({
  id: z.string().optional(),
  userId: z.string()
}).strict();

export const TicketUserCreateOrConnectWithoutTicketInputSchema: z.ZodType<Prisma.TicketUserCreateOrConnectWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketUserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketUserCreateWithoutTicketInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutTicketInputSchema) ]),
}).strict();

export const TicketUserCreateManyTicketInputEnvelopeSchema: z.ZodType<Prisma.TicketUserCreateManyTicketInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketUserCreateManyTicketInputSchema),z.lazy(() => TicketUserCreateManyTicketInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutTicketsAssignedInputSchema: z.ZodType<Prisma.UserUpsertWithoutTicketsAssignedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTicketsAssignedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketsAssignedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTicketsAssignedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketsAssignedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTicketsAssignedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTicketsAssignedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTicketsAssignedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketsAssignedInputSchema) ]),
}).strict();

export const UserUpdateWithoutTicketsAssignedInputSchema: z.ZodType<Prisma.UserUpdateWithoutTicketsAssignedInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTicketsAssignedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTicketsAssignedInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutTicketsCreatedInputSchema: z.ZodType<Prisma.UserUpsertWithoutTicketsCreatedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTicketsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketsCreatedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTicketsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketsCreatedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTicketsCreatedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTicketsCreatedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTicketsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketsCreatedInputSchema) ]),
}).strict();

export const UserUpdateWithoutTicketsCreatedInputSchema: z.ZodType<Prisma.UserUpdateWithoutTicketsCreatedInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTicketsCreatedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTicketsCreatedInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const DepartmentUpsertWithoutTicketsInputSchema: z.ZodType<Prisma.DepartmentUpsertWithoutTicketsInput> = z.object({
  update: z.union([ z.lazy(() => DepartmentUpdateWithoutTicketsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutTicketsInputSchema) ]),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutTicketsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutTicketsInputSchema) ]),
  where: z.lazy(() => DepartmentWhereInputSchema).optional()
}).strict();

export const DepartmentUpdateToOneWithWhereWithoutTicketsInputSchema: z.ZodType<Prisma.DepartmentUpdateToOneWithWhereWithoutTicketsInput> = z.object({
  where: z.lazy(() => DepartmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DepartmentUpdateWithoutTicketsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutTicketsInputSchema) ]),
}).strict();

export const DepartmentUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.DepartmentUpdateWithoutTicketsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  institution: z.lazy(() => InstitutionUpdateOneRequiredWithoutDepartmentsNestedInputSchema).optional(),
  parentDepartment: z.lazy(() => DepartmentUpdateOneWithoutChildDepartmentsNestedInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  head: z.lazy(() => UserUpdateOneWithoutHeadOfDepartmentsNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUncheckedUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateWithoutTicketsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentDepartmentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  headId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const HelpTopicUpsertWithoutTicketsInputSchema: z.ZodType<Prisma.HelpTopicUpsertWithoutTicketsInput> = z.object({
  update: z.union([ z.lazy(() => HelpTopicUpdateWithoutTicketsInputSchema),z.lazy(() => HelpTopicUncheckedUpdateWithoutTicketsInputSchema) ]),
  create: z.union([ z.lazy(() => HelpTopicCreateWithoutTicketsInputSchema),z.lazy(() => HelpTopicUncheckedCreateWithoutTicketsInputSchema) ]),
  where: z.lazy(() => HelpTopicWhereInputSchema).optional()
}).strict();

export const HelpTopicUpdateToOneWithWhereWithoutTicketsInputSchema: z.ZodType<Prisma.HelpTopicUpdateToOneWithWhereWithoutTicketsInput> = z.object({
  where: z.lazy(() => HelpTopicWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => HelpTopicUpdateWithoutTicketsInputSchema),z.lazy(() => HelpTopicUncheckedUpdateWithoutTicketsInputSchema) ]),
}).strict();

export const HelpTopicUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.HelpTopicUpdateWithoutTicketsInput> = z.object({
  topic: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutHelpTopicsNestedInputSchema).optional()
}).strict();

export const HelpTopicUncheckedUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.HelpTopicUncheckedUpdateWithoutTicketsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  topic: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketPriorityUpsertWithoutTicketsInputSchema: z.ZodType<Prisma.TicketPriorityUpsertWithoutTicketsInput> = z.object({
  update: z.union([ z.lazy(() => TicketPriorityUpdateWithoutTicketsInputSchema),z.lazy(() => TicketPriorityUncheckedUpdateWithoutTicketsInputSchema) ]),
  create: z.union([ z.lazy(() => TicketPriorityCreateWithoutTicketsInputSchema),z.lazy(() => TicketPriorityUncheckedCreateWithoutTicketsInputSchema) ]),
  where: z.lazy(() => TicketPriorityWhereInputSchema).optional()
}).strict();

export const TicketPriorityUpdateToOneWithWhereWithoutTicketsInputSchema: z.ZodType<Prisma.TicketPriorityUpdateToOneWithWhereWithoutTicketsInput> = z.object({
  where: z.lazy(() => TicketPriorityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TicketPriorityUpdateWithoutTicketsInputSchema),z.lazy(() => TicketPriorityUncheckedUpdateWithoutTicketsInputSchema) ]),
}).strict();

export const TicketPriorityUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.TicketPriorityUpdateWithoutTicketsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketPriorityUncheckedUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.TicketPriorityUncheckedUpdateWithoutTicketsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SLAPlanUpsertWithoutTicketsInputSchema: z.ZodType<Prisma.SLAPlanUpsertWithoutTicketsInput> = z.object({
  update: z.union([ z.lazy(() => SLAPlanUpdateWithoutTicketsInputSchema),z.lazy(() => SLAPlanUncheckedUpdateWithoutTicketsInputSchema) ]),
  create: z.union([ z.lazy(() => SLAPlanCreateWithoutTicketsInputSchema),z.lazy(() => SLAPlanUncheckedCreateWithoutTicketsInputSchema) ]),
  where: z.lazy(() => SLAPlanWhereInputSchema).optional()
}).strict();

export const SLAPlanUpdateToOneWithWhereWithoutTicketsInputSchema: z.ZodType<Prisma.SLAPlanUpdateToOneWithWhereWithoutTicketsInput> = z.object({
  where: z.lazy(() => SLAPlanWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SLAPlanUpdateWithoutTicketsInputSchema),z.lazy(() => SLAPlanUncheckedUpdateWithoutTicketsInputSchema) ]),
}).strict();

export const SLAPlanUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.SLAPlanUpdateWithoutTicketsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gracePeriod: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SLAPlanUncheckedUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.SLAPlanUncheckedUpdateWithoutTicketsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gracePeriod: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketStatusUpsertWithoutTicketsInputSchema: z.ZodType<Prisma.TicketStatusUpsertWithoutTicketsInput> = z.object({
  update: z.union([ z.lazy(() => TicketStatusUpdateWithoutTicketsInputSchema),z.lazy(() => TicketStatusUncheckedUpdateWithoutTicketsInputSchema) ]),
  create: z.union([ z.lazy(() => TicketStatusCreateWithoutTicketsInputSchema),z.lazy(() => TicketStatusUncheckedCreateWithoutTicketsInputSchema) ]),
  where: z.lazy(() => TicketStatusWhereInputSchema).optional()
}).strict();

export const TicketStatusUpdateToOneWithWhereWithoutTicketsInputSchema: z.ZodType<Prisma.TicketStatusUpdateToOneWithWhereWithoutTicketsInput> = z.object({
  where: z.lazy(() => TicketStatusWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TicketStatusUpdateWithoutTicketsInputSchema),z.lazy(() => TicketStatusUncheckedUpdateWithoutTicketsInputSchema) ]),
}).strict();

export const TicketStatusUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.TicketStatusUpdateWithoutTicketsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketStatusUncheckedUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.TicketStatusUncheckedUpdateWithoutTicketsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketAttachmentUpsertWithWhereUniqueWithoutTicketInputSchema: z.ZodType<Prisma.TicketAttachmentUpsertWithWhereUniqueWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketAttachmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketAttachmentUpdateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUncheckedUpdateWithoutTicketInputSchema) ]),
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketInputSchema) ]),
}).strict();

export const TicketAttachmentUpdateWithWhereUniqueWithoutTicketInputSchema: z.ZodType<Prisma.TicketAttachmentUpdateWithWhereUniqueWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketAttachmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketAttachmentUpdateWithoutTicketInputSchema),z.lazy(() => TicketAttachmentUncheckedUpdateWithoutTicketInputSchema) ]),
}).strict();

export const TicketAttachmentUpdateManyWithWhereWithoutTicketInputSchema: z.ZodType<Prisma.TicketAttachmentUpdateManyWithWhereWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketAttachmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketAttachmentUpdateManyMutationInputSchema),z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketInputSchema) ]),
}).strict();

export const TicketAttachmentScalarWhereInputSchema: z.ZodType<Prisma.TicketAttachmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketAttachmentScalarWhereInputSchema),z.lazy(() => TicketAttachmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketAttachmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketAttachmentScalarWhereInputSchema),z.lazy(() => TicketAttachmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketThreadId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  filePath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fileName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mimeType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const TicketCollaboratorUpsertWithWhereUniqueWithoutTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorUpsertWithWhereUniqueWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketCollaboratorUpdateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUncheckedUpdateWithoutTicketInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCollaboratorCreateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUncheckedCreateWithoutTicketInputSchema) ]),
}).strict();

export const TicketCollaboratorUpdateWithWhereUniqueWithoutTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorUpdateWithWhereUniqueWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketCollaboratorWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketCollaboratorUpdateWithoutTicketInputSchema),z.lazy(() => TicketCollaboratorUncheckedUpdateWithoutTicketInputSchema) ]),
}).strict();

export const TicketCollaboratorUpdateManyWithWhereWithoutTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorUpdateManyWithWhereWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketCollaboratorScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketCollaboratorUpdateManyMutationInputSchema),z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketInputSchema) ]),
}).strict();

export const TicketCustomFieldUpsertWithWhereUniqueWithoutTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldUpsertWithWhereUniqueWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketCustomFieldUpdateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUncheckedUpdateWithoutTicketInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutTicketInputSchema) ]),
}).strict();

export const TicketCustomFieldUpdateWithWhereUniqueWithoutTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldUpdateWithWhereUniqueWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketCustomFieldUpdateWithoutTicketInputSchema),z.lazy(() => TicketCustomFieldUncheckedUpdateWithoutTicketInputSchema) ]),
}).strict();

export const TicketCustomFieldUpdateManyWithWhereWithoutTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldUpdateManyWithWhereWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketCustomFieldScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketCustomFieldUpdateManyMutationInputSchema),z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketInputSchema) ]),
}).strict();

export const TicketCustomFieldScalarWhereInputSchema: z.ZodType<Prisma.TicketCustomFieldScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TicketCustomFieldScalarWhereInputSchema),z.lazy(() => TicketCustomFieldScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TicketCustomFieldScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TicketCustomFieldScalarWhereInputSchema),z.lazy(() => TicketCustomFieldScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  ticketId: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  fieldId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const TicketThreadUpsertWithoutTicketInputSchema: z.ZodType<Prisma.TicketThreadUpsertWithoutTicketInput> = z.object({
  update: z.union([ z.lazy(() => TicketThreadUpdateWithoutTicketInputSchema),z.lazy(() => TicketThreadUncheckedUpdateWithoutTicketInputSchema) ]),
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutTicketInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutTicketInputSchema) ]),
  where: z.lazy(() => TicketThreadWhereInputSchema).optional()
}).strict();

export const TicketThreadUpdateToOneWithWhereWithoutTicketInputSchema: z.ZodType<Prisma.TicketThreadUpdateToOneWithWhereWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketThreadWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TicketThreadUpdateWithoutTicketInputSchema),z.lazy(() => TicketThreadUncheckedUpdateWithoutTicketInputSchema) ]),
}).strict();

export const TicketThreadUpdateWithoutTicketInputSchema: z.ZodType<Prisma.TicketThreadUpdateWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketThreadNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTicketThreadsNestedInputSchema).optional()
}).strict();

export const TicketThreadUncheckedUpdateWithoutTicketInputSchema: z.ZodType<Prisma.TicketThreadUncheckedUpdateWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketThreadNestedInputSchema).optional()
}).strict();

export const TicketUserUpsertWithWhereUniqueWithoutTicketInputSchema: z.ZodType<Prisma.TicketUserUpsertWithWhereUniqueWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketUserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketUserUpdateWithoutTicketInputSchema),z.lazy(() => TicketUserUncheckedUpdateWithoutTicketInputSchema) ]),
  create: z.union([ z.lazy(() => TicketUserCreateWithoutTicketInputSchema),z.lazy(() => TicketUserUncheckedCreateWithoutTicketInputSchema) ]),
}).strict();

export const TicketUserUpdateWithWhereUniqueWithoutTicketInputSchema: z.ZodType<Prisma.TicketUserUpdateWithWhereUniqueWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketUserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketUserUpdateWithoutTicketInputSchema),z.lazy(() => TicketUserUncheckedUpdateWithoutTicketInputSchema) ]),
}).strict();

export const TicketUserUpdateManyWithWhereWithoutTicketInputSchema: z.ZodType<Prisma.TicketUserUpdateManyWithWhereWithoutTicketInput> = z.object({
  where: z.lazy(() => TicketUserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketUserUpdateManyMutationInputSchema),z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketInputSchema) ]),
}).strict();

export const TicketCreateWithoutStatusInputSchema: z.ZodType<Prisma.TicketCreateWithoutStatusInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutStatusInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutStatusInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutStatusInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutStatusInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutStatusInputSchema),z.lazy(() => TicketUncheckedCreateWithoutStatusInputSchema) ]),
}).strict();

export const TicketCreateManyStatusInputEnvelopeSchema: z.ZodType<Prisma.TicketCreateManyStatusInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketCreateManyStatusInputSchema),z.lazy(() => TicketCreateManyStatusInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketUpsertWithWhereUniqueWithoutStatusInputSchema: z.ZodType<Prisma.TicketUpsertWithWhereUniqueWithoutStatusInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketUpdateWithoutStatusInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutStatusInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutStatusInputSchema),z.lazy(() => TicketUncheckedCreateWithoutStatusInputSchema) ]),
}).strict();

export const TicketUpdateWithWhereUniqueWithoutStatusInputSchema: z.ZodType<Prisma.TicketUpdateWithWhereUniqueWithoutStatusInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateWithoutStatusInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutStatusInputSchema) ]),
}).strict();

export const TicketUpdateManyWithWhereWithoutStatusInputSchema: z.ZodType<Prisma.TicketUpdateManyWithWhereWithoutStatusInput> = z.object({
  where: z.lazy(() => TicketScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateManyMutationInputSchema),z.lazy(() => TicketUncheckedUpdateManyWithoutStatusInputSchema) ]),
}).strict();

export const TicketCreateWithoutPriorityInputSchema: z.ZodType<Prisma.TicketCreateWithoutPriorityInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutPriorityInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutPriorityInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutPriorityInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutPriorityInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutPriorityInputSchema),z.lazy(() => TicketUncheckedCreateWithoutPriorityInputSchema) ]),
}).strict();

export const TicketCreateManyPriorityInputEnvelopeSchema: z.ZodType<Prisma.TicketCreateManyPriorityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketCreateManyPriorityInputSchema),z.lazy(() => TicketCreateManyPriorityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketUpsertWithWhereUniqueWithoutPriorityInputSchema: z.ZodType<Prisma.TicketUpsertWithWhereUniqueWithoutPriorityInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketUpdateWithoutPriorityInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutPriorityInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutPriorityInputSchema),z.lazy(() => TicketUncheckedCreateWithoutPriorityInputSchema) ]),
}).strict();

export const TicketUpdateWithWhereUniqueWithoutPriorityInputSchema: z.ZodType<Prisma.TicketUpdateWithWhereUniqueWithoutPriorityInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateWithoutPriorityInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutPriorityInputSchema) ]),
}).strict();

export const TicketUpdateManyWithWhereWithoutPriorityInputSchema: z.ZodType<Prisma.TicketUpdateManyWithWhereWithoutPriorityInput> = z.object({
  where: z.lazy(() => TicketScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateManyMutationInputSchema),z.lazy(() => TicketUncheckedUpdateManyWithoutPriorityInputSchema) ]),
}).strict();

export const DepartmentCreateWithoutHelpTopicsInputSchema: z.ZodType<Prisma.DepartmentCreateWithoutHelpTopicsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  institution: z.lazy(() => InstitutionCreateNestedOneWithoutDepartmentsInputSchema),
  parentDepartment: z.lazy(() => DepartmentCreateNestedOneWithoutChildDepartmentsInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  head: z.lazy(() => UserCreateNestedOneWithoutHeadOfDepartmentsInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentUncheckedCreateWithoutHelpTopicsInputSchema: z.ZodType<Prisma.DepartmentUncheckedCreateWithoutHelpTopicsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  institutionId: z.string(),
  parentDepartmentId: z.number().int().optional().nullable(),
  headId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutParentDepartmentInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedCreateNestedManyWithoutDepartmentInputSchema).optional()
}).strict();

export const DepartmentCreateOrConnectWithoutHelpTopicsInputSchema: z.ZodType<Prisma.DepartmentCreateOrConnectWithoutHelpTopicsInput> = z.object({
  where: z.lazy(() => DepartmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutHelpTopicsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutHelpTopicsInputSchema) ]),
}).strict();

export const TicketCreateWithoutHelpTopicInputSchema: z.ZodType<Prisma.TicketCreateWithoutHelpTopicInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutHelpTopicInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutHelpTopicInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutHelpTopicInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutHelpTopicInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutHelpTopicInputSchema),z.lazy(() => TicketUncheckedCreateWithoutHelpTopicInputSchema) ]),
}).strict();

export const TicketCreateManyHelpTopicInputEnvelopeSchema: z.ZodType<Prisma.TicketCreateManyHelpTopicInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketCreateManyHelpTopicInputSchema),z.lazy(() => TicketCreateManyHelpTopicInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DepartmentUpsertWithoutHelpTopicsInputSchema: z.ZodType<Prisma.DepartmentUpsertWithoutHelpTopicsInput> = z.object({
  update: z.union([ z.lazy(() => DepartmentUpdateWithoutHelpTopicsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutHelpTopicsInputSchema) ]),
  create: z.union([ z.lazy(() => DepartmentCreateWithoutHelpTopicsInputSchema),z.lazy(() => DepartmentUncheckedCreateWithoutHelpTopicsInputSchema) ]),
  where: z.lazy(() => DepartmentWhereInputSchema).optional()
}).strict();

export const DepartmentUpdateToOneWithWhereWithoutHelpTopicsInputSchema: z.ZodType<Prisma.DepartmentUpdateToOneWithWhereWithoutHelpTopicsInput> = z.object({
  where: z.lazy(() => DepartmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => DepartmentUpdateWithoutHelpTopicsInputSchema),z.lazy(() => DepartmentUncheckedUpdateWithoutHelpTopicsInputSchema) ]),
}).strict();

export const DepartmentUpdateWithoutHelpTopicsInputSchema: z.ZodType<Prisma.DepartmentUpdateWithoutHelpTopicsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  institution: z.lazy(() => InstitutionUpdateOneRequiredWithoutDepartmentsNestedInputSchema).optional(),
  parentDepartment: z.lazy(() => DepartmentUpdateOneWithoutChildDepartmentsNestedInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  head: z.lazy(() => UserUpdateOneWithoutHeadOfDepartmentsNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUncheckedUpdateWithoutHelpTopicsInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateWithoutHelpTopicsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentDepartmentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  headId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const TicketUpsertWithWhereUniqueWithoutHelpTopicInputSchema: z.ZodType<Prisma.TicketUpsertWithWhereUniqueWithoutHelpTopicInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketUpdateWithoutHelpTopicInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutHelpTopicInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutHelpTopicInputSchema),z.lazy(() => TicketUncheckedCreateWithoutHelpTopicInputSchema) ]),
}).strict();

export const TicketUpdateWithWhereUniqueWithoutHelpTopicInputSchema: z.ZodType<Prisma.TicketUpdateWithWhereUniqueWithoutHelpTopicInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateWithoutHelpTopicInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutHelpTopicInputSchema) ]),
}).strict();

export const TicketUpdateManyWithWhereWithoutHelpTopicInputSchema: z.ZodType<Prisma.TicketUpdateManyWithWhereWithoutHelpTopicInput> = z.object({
  where: z.lazy(() => TicketScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateManyMutationInputSchema),z.lazy(() => TicketUncheckedUpdateManyWithoutHelpTopicInputSchema) ]),
}).strict();

export const TicketCreateWithoutSlaPlanInputSchema: z.ZodType<Prisma.TicketCreateWithoutSlaPlanInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutSlaPlanInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutSlaPlanInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutSlaPlanInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutSlaPlanInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutSlaPlanInputSchema),z.lazy(() => TicketUncheckedCreateWithoutSlaPlanInputSchema) ]),
}).strict();

export const TicketCreateManySlaPlanInputEnvelopeSchema: z.ZodType<Prisma.TicketCreateManySlaPlanInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketCreateManySlaPlanInputSchema),z.lazy(() => TicketCreateManySlaPlanInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketUpsertWithWhereUniqueWithoutSlaPlanInputSchema: z.ZodType<Prisma.TicketUpsertWithWhereUniqueWithoutSlaPlanInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketUpdateWithoutSlaPlanInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutSlaPlanInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutSlaPlanInputSchema),z.lazy(() => TicketUncheckedCreateWithoutSlaPlanInputSchema) ]),
}).strict();

export const TicketUpdateWithWhereUniqueWithoutSlaPlanInputSchema: z.ZodType<Prisma.TicketUpdateWithWhereUniqueWithoutSlaPlanInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateWithoutSlaPlanInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutSlaPlanInputSchema) ]),
}).strict();

export const TicketUpdateManyWithWhereWithoutSlaPlanInputSchema: z.ZodType<Prisma.TicketUpdateManyWithWhereWithoutSlaPlanInput> = z.object({
  where: z.lazy(() => TicketScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketUpdateManyMutationInputSchema),z.lazy(() => TicketUncheckedUpdateManyWithoutSlaPlanInputSchema) ]),
}).strict();

export const TicketAttachmentCreateWithoutTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentCreateWithoutTicketThreadInput> = z.object({
  id: z.string().optional(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional(),
  ticket: z.lazy(() => TicketCreateNestedOneWithoutAttachmentsInputSchema)
}).strict();

export const TicketAttachmentUncheckedCreateWithoutTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedCreateWithoutTicketThreadInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketAttachmentCreateOrConnectWithoutTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentCreateOrConnectWithoutTicketThreadInput> = z.object({
  where: z.lazy(() => TicketAttachmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketThreadInputSchema) ]),
}).strict();

export const TicketAttachmentCreateManyTicketThreadInputEnvelopeSchema: z.ZodType<Prisma.TicketAttachmentCreateManyTicketThreadInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketAttachmentCreateManyTicketThreadInputSchema),z.lazy(() => TicketAttachmentCreateManyTicketThreadInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketCreateWithoutThreadsInputSchema: z.ZodType<Prisma.TicketCreateWithoutThreadsInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutThreadsInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutThreadsInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutThreadsInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutThreadsInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutThreadsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutThreadsInputSchema) ]),
}).strict();

export const UserCreateWithoutTicketThreadsInputSchema: z.ZodType<Prisma.UserCreateWithoutTicketThreadsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTicketThreadsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTicketThreadsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTicketThreadsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTicketThreadsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTicketThreadsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketThreadsInputSchema) ]),
}).strict();

export const TicketAttachmentUpsertWithWhereUniqueWithoutTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentUpsertWithWhereUniqueWithoutTicketThreadInput> = z.object({
  where: z.lazy(() => TicketAttachmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketAttachmentUpdateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUncheckedUpdateWithoutTicketThreadInputSchema) ]),
  create: z.union([ z.lazy(() => TicketAttachmentCreateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUncheckedCreateWithoutTicketThreadInputSchema) ]),
}).strict();

export const TicketAttachmentUpdateWithWhereUniqueWithoutTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentUpdateWithWhereUniqueWithoutTicketThreadInput> = z.object({
  where: z.lazy(() => TicketAttachmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketAttachmentUpdateWithoutTicketThreadInputSchema),z.lazy(() => TicketAttachmentUncheckedUpdateWithoutTicketThreadInputSchema) ]),
}).strict();

export const TicketAttachmentUpdateManyWithWhereWithoutTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentUpdateManyWithWhereWithoutTicketThreadInput> = z.object({
  where: z.lazy(() => TicketAttachmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketAttachmentUpdateManyMutationInputSchema),z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketThreadInputSchema) ]),
}).strict();

export const TicketUpsertWithoutThreadsInputSchema: z.ZodType<Prisma.TicketUpsertWithoutThreadsInput> = z.object({
  update: z.union([ z.lazy(() => TicketUpdateWithoutThreadsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutThreadsInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutThreadsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutThreadsInputSchema) ]),
  where: z.lazy(() => TicketWhereInputSchema).optional()
}).strict();

export const TicketUpdateToOneWithWhereWithoutThreadsInputSchema: z.ZodType<Prisma.TicketUpdateToOneWithWhereWithoutThreadsInput> = z.object({
  where: z.lazy(() => TicketWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TicketUpdateWithoutThreadsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutThreadsInputSchema) ]),
}).strict();

export const TicketUpdateWithoutThreadsInputSchema: z.ZodType<Prisma.TicketUpdateWithoutThreadsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutThreadsInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutThreadsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutTicketThreadsInputSchema: z.ZodType<Prisma.UserUpsertWithoutTicketThreadsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTicketThreadsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketThreadsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTicketThreadsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketThreadsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTicketThreadsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTicketThreadsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTicketThreadsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketThreadsInputSchema) ]),
}).strict();

export const UserUpdateWithoutTicketThreadsInputSchema: z.ZodType<Prisma.UserUpdateWithoutTicketThreadsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTicketThreadsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTicketThreadsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const TicketCreateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketCreateWithoutAttachmentsInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutAttachmentsInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutAttachmentsInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutAttachmentsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutAttachmentsInputSchema) ]),
}).strict();

export const TicketThreadCreateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketThreadCreateWithoutAttachmentsInput> = z.object({
  id: z.string().optional(),
  message: z.string(),
  createdAt: z.coerce.date().optional(),
  ticket: z.lazy(() => TicketCreateNestedOneWithoutThreadsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutTicketThreadsInputSchema)
}).strict();

export const TicketThreadUncheckedCreateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketThreadUncheckedCreateWithoutAttachmentsInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  userId: z.string(),
  message: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketThreadCreateOrConnectWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketThreadCreateOrConnectWithoutAttachmentsInput> = z.object({
  where: z.lazy(() => TicketThreadWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutAttachmentsInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutAttachmentsInputSchema) ]),
}).strict();

export const TicketUpsertWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketUpsertWithoutAttachmentsInput> = z.object({
  update: z.union([ z.lazy(() => TicketUpdateWithoutAttachmentsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutAttachmentsInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutAttachmentsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutAttachmentsInputSchema) ]),
  where: z.lazy(() => TicketWhereInputSchema).optional()
}).strict();

export const TicketUpdateToOneWithWhereWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketUpdateToOneWithWhereWithoutAttachmentsInput> = z.object({
  where: z.lazy(() => TicketWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TicketUpdateWithoutAttachmentsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutAttachmentsInputSchema) ]),
}).strict();

export const TicketUpdateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketUpdateWithoutAttachmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutAttachmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketThreadUpsertWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketThreadUpsertWithoutAttachmentsInput> = z.object({
  update: z.union([ z.lazy(() => TicketThreadUpdateWithoutAttachmentsInputSchema),z.lazy(() => TicketThreadUncheckedUpdateWithoutAttachmentsInputSchema) ]),
  create: z.union([ z.lazy(() => TicketThreadCreateWithoutAttachmentsInputSchema),z.lazy(() => TicketThreadUncheckedCreateWithoutAttachmentsInputSchema) ]),
  where: z.lazy(() => TicketThreadWhereInputSchema).optional()
}).strict();

export const TicketThreadUpdateToOneWithWhereWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketThreadUpdateToOneWithWhereWithoutAttachmentsInput> = z.object({
  where: z.lazy(() => TicketThreadWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TicketThreadUpdateWithoutAttachmentsInputSchema),z.lazy(() => TicketThreadUncheckedUpdateWithoutAttachmentsInputSchema) ]),
}).strict();

export const TicketThreadUpdateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketThreadUpdateWithoutAttachmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ticket: z.lazy(() => TicketUpdateOneRequiredWithoutThreadsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTicketThreadsNestedInputSchema).optional()
}).strict();

export const TicketThreadUncheckedUpdateWithoutAttachmentsInputSchema: z.ZodType<Prisma.TicketThreadUncheckedUpdateWithoutAttachmentsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCreateWithoutCollaboratorsInputSchema: z.ZodType<Prisma.TicketCreateWithoutCollaboratorsInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutCollaboratorsInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutCollaboratorsInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutCollaboratorsInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutCollaboratorsInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutCollaboratorsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCollaboratorsInputSchema) ]),
}).strict();

export const UserCreateWithoutTicketCollaboratorsInputSchema: z.ZodType<Prisma.UserCreateWithoutTicketCollaboratorsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTicketCollaboratorsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTicketCollaboratorsInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTicketCollaboratorsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTicketCollaboratorsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTicketCollaboratorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketCollaboratorsInputSchema) ]),
}).strict();

export const TicketUpsertWithoutCollaboratorsInputSchema: z.ZodType<Prisma.TicketUpsertWithoutCollaboratorsInput> = z.object({
  update: z.union([ z.lazy(() => TicketUpdateWithoutCollaboratorsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutCollaboratorsInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutCollaboratorsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCollaboratorsInputSchema) ]),
  where: z.lazy(() => TicketWhereInputSchema).optional()
}).strict();

export const TicketUpdateToOneWithWhereWithoutCollaboratorsInputSchema: z.ZodType<Prisma.TicketUpdateToOneWithWhereWithoutCollaboratorsInput> = z.object({
  where: z.lazy(() => TicketWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TicketUpdateWithoutCollaboratorsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutCollaboratorsInputSchema) ]),
}).strict();

export const TicketUpdateWithoutCollaboratorsInputSchema: z.ZodType<Prisma.TicketUpdateWithoutCollaboratorsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutCollaboratorsInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutCollaboratorsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutTicketCollaboratorsInputSchema: z.ZodType<Prisma.UserUpsertWithoutTicketCollaboratorsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTicketCollaboratorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketCollaboratorsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTicketCollaboratorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketCollaboratorsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTicketCollaboratorsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTicketCollaboratorsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTicketCollaboratorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketCollaboratorsInputSchema) ]),
}).strict();

export const UserUpdateWithoutTicketCollaboratorsInputSchema: z.ZodType<Prisma.UserUpdateWithoutTicketCollaboratorsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTicketCollaboratorsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTicketCollaboratorsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const TicketCustomFieldCreateWithoutFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldCreateWithoutFieldInput> = z.object({
  id: z.string().optional(),
  value: z.string(),
  ticket: z.lazy(() => TicketCreateNestedOneWithoutCustomFieldsInputSchema)
}).strict();

export const TicketCustomFieldUncheckedCreateWithoutFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedCreateWithoutFieldInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  value: z.string()
}).strict();

export const TicketCustomFieldCreateOrConnectWithoutFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldCreateOrConnectWithoutFieldInput> = z.object({
  where: z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutFieldInputSchema) ]),
}).strict();

export const TicketCustomFieldCreateManyFieldInputEnvelopeSchema: z.ZodType<Prisma.TicketCustomFieldCreateManyFieldInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TicketCustomFieldCreateManyFieldInputSchema),z.lazy(() => TicketCustomFieldCreateManyFieldInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TicketCustomFieldUpsertWithWhereUniqueWithoutFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldUpsertWithWhereUniqueWithoutFieldInput> = z.object({
  where: z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TicketCustomFieldUpdateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUncheckedUpdateWithoutFieldInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCustomFieldCreateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUncheckedCreateWithoutFieldInputSchema) ]),
}).strict();

export const TicketCustomFieldUpdateWithWhereUniqueWithoutFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldUpdateWithWhereUniqueWithoutFieldInput> = z.object({
  where: z.lazy(() => TicketCustomFieldWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TicketCustomFieldUpdateWithoutFieldInputSchema),z.lazy(() => TicketCustomFieldUncheckedUpdateWithoutFieldInputSchema) ]),
}).strict();

export const TicketCustomFieldUpdateManyWithWhereWithoutFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldUpdateManyWithWhereWithoutFieldInput> = z.object({
  where: z.lazy(() => TicketCustomFieldScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TicketCustomFieldUpdateManyMutationInputSchema),z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutFieldInputSchema) ]),
}).strict();

export const CustomFieldCreateWithoutTicketsInputSchema: z.ZodType<Prisma.CustomFieldCreateWithoutTicketsInput> = z.object({
  name: z.string(),
  fieldType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const CustomFieldUncheckedCreateWithoutTicketsInputSchema: z.ZodType<Prisma.CustomFieldUncheckedCreateWithoutTicketsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  fieldType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const CustomFieldCreateOrConnectWithoutTicketsInputSchema: z.ZodType<Prisma.CustomFieldCreateOrConnectWithoutTicketsInput> = z.object({
  where: z.lazy(() => CustomFieldWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomFieldCreateWithoutTicketsInputSchema),z.lazy(() => CustomFieldUncheckedCreateWithoutTicketsInputSchema) ]),
}).strict();

export const TicketCreateWithoutCustomFieldsInputSchema: z.ZodType<Prisma.TicketCreateWithoutCustomFieldsInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutCustomFieldsInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutCustomFieldsInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutCustomFieldsInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutCustomFieldsInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutCustomFieldsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCustomFieldsInputSchema) ]),
}).strict();

export const CustomFieldUpsertWithoutTicketsInputSchema: z.ZodType<Prisma.CustomFieldUpsertWithoutTicketsInput> = z.object({
  update: z.union([ z.lazy(() => CustomFieldUpdateWithoutTicketsInputSchema),z.lazy(() => CustomFieldUncheckedUpdateWithoutTicketsInputSchema) ]),
  create: z.union([ z.lazy(() => CustomFieldCreateWithoutTicketsInputSchema),z.lazy(() => CustomFieldUncheckedCreateWithoutTicketsInputSchema) ]),
  where: z.lazy(() => CustomFieldWhereInputSchema).optional()
}).strict();

export const CustomFieldUpdateToOneWithWhereWithoutTicketsInputSchema: z.ZodType<Prisma.CustomFieldUpdateToOneWithWhereWithoutTicketsInput> = z.object({
  where: z.lazy(() => CustomFieldWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CustomFieldUpdateWithoutTicketsInputSchema),z.lazy(() => CustomFieldUncheckedUpdateWithoutTicketsInputSchema) ]),
}).strict();

export const CustomFieldUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.CustomFieldUpdateWithoutTicketsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fieldType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomFieldUncheckedUpdateWithoutTicketsInputSchema: z.ZodType<Prisma.CustomFieldUncheckedUpdateWithoutTicketsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fieldType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketUpsertWithoutCustomFieldsInputSchema: z.ZodType<Prisma.TicketUpsertWithoutCustomFieldsInput> = z.object({
  update: z.union([ z.lazy(() => TicketUpdateWithoutCustomFieldsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutCustomFieldsInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutCustomFieldsInputSchema),z.lazy(() => TicketUncheckedCreateWithoutCustomFieldsInputSchema) ]),
  where: z.lazy(() => TicketWhereInputSchema).optional()
}).strict();

export const TicketUpdateToOneWithWhereWithoutCustomFieldsInputSchema: z.ZodType<Prisma.TicketUpdateToOneWithWhereWithoutCustomFieldsInput> = z.object({
  where: z.lazy(() => TicketWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TicketUpdateWithoutCustomFieldsInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutCustomFieldsInputSchema) ]),
}).strict();

export const TicketUpdateWithoutCustomFieldsInputSchema: z.ZodType<Prisma.TicketUpdateWithoutCustomFieldsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutCustomFieldsInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutCustomFieldsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TaskCreateWithoutTaskUsersInputSchema: z.ZodType<Prisma.TaskCreateWithoutTaskUsersInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutTaskInputSchema).optional(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTasksAssignedInputSchema).optional(),
  document: z.lazy(() => DocumentCreateNestedOneWithoutTasksInputSchema).optional(),
  workflow: z.lazy(() => WorkflowCreateNestedOneWithoutTasksInputSchema)
}).strict();

export const TaskUncheckedCreateWithoutTaskUsersInputSchema: z.ZodType<Prisma.TaskUncheckedCreateWithoutTaskUsersInput> = z.object({
  id: z.string().optional(),
  workflowId: z.string(),
  assignedToId: z.string().optional().nullable(),
  documentId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutTaskInputSchema).optional()
}).strict();

export const TaskCreateOrConnectWithoutTaskUsersInputSchema: z.ZodType<Prisma.TaskCreateOrConnectWithoutTaskUsersInput> = z.object({
  where: z.lazy(() => TaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskUsersInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskUsersInputSchema) ]),
}).strict();

export const UserCreateWithoutTaskUsersInputSchema: z.ZodType<Prisma.UserCreateWithoutTaskUsersInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTaskUsersInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTaskUsersInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTaskUsersInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTaskUsersInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTaskUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskUsersInputSchema) ]),
}).strict();

export const TaskUpsertWithoutTaskUsersInputSchema: z.ZodType<Prisma.TaskUpsertWithoutTaskUsersInput> = z.object({
  update: z.union([ z.lazy(() => TaskUpdateWithoutTaskUsersInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTaskUsersInputSchema) ]),
  create: z.union([ z.lazy(() => TaskCreateWithoutTaskUsersInputSchema),z.lazy(() => TaskUncheckedCreateWithoutTaskUsersInputSchema) ]),
  where: z.lazy(() => TaskWhereInputSchema).optional()
}).strict();

export const TaskUpdateToOneWithWhereWithoutTaskUsersInputSchema: z.ZodType<Prisma.TaskUpdateToOneWithWhereWithoutTaskUsersInput> = z.object({
  where: z.lazy(() => TaskWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TaskUpdateWithoutTaskUsersInputSchema),z.lazy(() => TaskUncheckedUpdateWithoutTaskUsersInputSchema) ]),
}).strict();

export const TaskUpdateWithoutTaskUsersInputSchema: z.ZodType<Prisma.TaskUpdateWithoutTaskUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutTaskNestedInputSchema).optional(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTasksAssignedNestedInputSchema).optional(),
  document: z.lazy(() => DocumentUpdateOneWithoutTasksNestedInputSchema).optional(),
  workflow: z.lazy(() => WorkflowUpdateOneRequiredWithoutTasksNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutTaskUsersInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutTaskUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workflowId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutTaskUsersInputSchema: z.ZodType<Prisma.UserUpsertWithoutTaskUsersInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTaskUsersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTaskUsersInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTaskUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutTaskUsersInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTaskUsersInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTaskUsersInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTaskUsersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTaskUsersInputSchema) ]),
}).strict();

export const UserUpdateWithoutTaskUsersInputSchema: z.ZodType<Prisma.UserUpdateWithoutTaskUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTaskUsersInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTaskUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const TicketCreateWithoutTicketUsersInputSchema: z.ZodType<Prisma.TicketCreateWithoutTicketUsersInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutTicketsAssignedInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutTicketsCreatedInputSchema),
  department: z.lazy(() => DepartmentCreateNestedOneWithoutTicketsInputSchema),
  helpTopic: z.lazy(() => HelpTopicCreateNestedOneWithoutTicketsInputSchema),
  priority: z.lazy(() => TicketPriorityCreateNestedOneWithoutTicketsInputSchema),
  slaPlan: z.lazy(() => SLAPlanCreateNestedOneWithoutTicketsInputSchema).optional(),
  status: z.lazy(() => TicketStatusCreateNestedOneWithoutTicketsInputSchema),
  attachments: z.lazy(() => TicketAttachmentCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadCreateNestedOneWithoutTicketInputSchema).optional()
}).strict();

export const TicketUncheckedCreateWithoutTicketUsersInputSchema: z.ZodType<Prisma.TicketUncheckedCreateWithoutTicketUsersInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedCreateNestedManyWithoutTicketInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedCreateNestedOneWithoutTicketInputSchema).optional()
}).strict();

export const TicketCreateOrConnectWithoutTicketUsersInputSchema: z.ZodType<Prisma.TicketCreateOrConnectWithoutTicketUsersInput> = z.object({
  where: z.lazy(() => TicketWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TicketCreateWithoutTicketUsersInputSchema),z.lazy(() => TicketUncheckedCreateWithoutTicketUsersInputSchema) ]),
}).strict();

export const UserCreateWithoutTicketUsersInputSchema: z.ZodType<Prisma.UserCreateWithoutTicketUsersInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTicketUsersInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTicketUsersInput> = z.object({
  id: z.string().optional(),
  apiUserId: z.string(),
  email: z.string(),
  name: z.string(),
  phoneNumber: z.string().optional().nullable(),
  jobTitle: z.string().optional().nullable(),
  profilePhoto: z.string().optional().nullable(),
  role: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutPerformedByInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedCreateNestedManyWithoutHeadInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutMayorInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedCreateNestedManyWithoutViceMayorInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTicketUsersInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTicketUsersInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTicketUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketUsersInputSchema) ]),
}).strict();

export const TicketUpsertWithoutTicketUsersInputSchema: z.ZodType<Prisma.TicketUpsertWithoutTicketUsersInput> = z.object({
  update: z.union([ z.lazy(() => TicketUpdateWithoutTicketUsersInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutTicketUsersInputSchema) ]),
  create: z.union([ z.lazy(() => TicketCreateWithoutTicketUsersInputSchema),z.lazy(() => TicketUncheckedCreateWithoutTicketUsersInputSchema) ]),
  where: z.lazy(() => TicketWhereInputSchema).optional()
}).strict();

export const TicketUpdateToOneWithWhereWithoutTicketUsersInputSchema: z.ZodType<Prisma.TicketUpdateToOneWithWhereWithoutTicketUsersInput> = z.object({
  where: z.lazy(() => TicketWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TicketUpdateWithoutTicketUsersInputSchema),z.lazy(() => TicketUncheckedUpdateWithoutTicketUsersInputSchema) ]),
}).strict();

export const TicketUpdateWithoutTicketUsersInputSchema: z.ZodType<Prisma.TicketUpdateWithoutTicketUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutTicketUsersInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutTicketUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutTicketUsersInputSchema: z.ZodType<Prisma.UserUpsertWithoutTicketUsersInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTicketUsersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketUsersInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTicketUsersInputSchema),z.lazy(() => UserUncheckedCreateWithoutTicketUsersInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTicketUsersInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTicketUsersInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTicketUsersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTicketUsersInputSchema) ]),
}).strict();

export const UserUpdateWithoutTicketUsersInputSchema: z.ZodType<Prisma.UserUpdateWithoutTicketUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTicketUsersInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTicketUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  apiUserId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  jobTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  profilePhoto: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutPerformedByNestedInputSchema).optional(),
  digitalCertificates: z.lazy(() => DigitalCertificateUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentUsers: z.lazy(() => DocumentUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  notifications: z.lazy(() => NotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sharedDocuments: z.lazy(() => SharedDocumentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  tasksAssigned: z.lazy(() => TaskUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketsAssigned: z.lazy(() => TicketUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  ticketsCreated: z.lazy(() => TicketUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  ticketCollaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  ticketThreads: z.lazy(() => TicketThreadUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  headOfDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutHeadNestedInputSchema).optional(),
  mayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutMayorNestedInputSchema).optional(),
  viceMayorInstitutions: z.lazy(() => InstitutionUncheckedUpdateManyWithoutViceMayorNestedInputSchema).optional(),
  userOnDocuments: z.lazy(() => UserOnDocumentsUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const back3nd_password_resetCreateWithoutUserInputSchema: z.ZodType<Prisma.back3nd_password_resetCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  expires_at: z.coerce.date()
}).strict();

export const back3nd_password_resetUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.back3nd_password_resetUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  expires_at: z.coerce.date()
}).strict();

export const back3nd_password_resetCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.back3nd_password_resetCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => back3nd_password_resetCreateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const back3nd_password_resetCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.back3nd_password_resetCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => back3nd_password_resetCreateManyUserInputSchema),z.lazy(() => back3nd_password_resetCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const back3nd_user_roleCreateWithoutUserInputSchema: z.ZodType<Prisma.back3nd_user_roleCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  created_at: z.coerce.date().optional(),
  role: z.lazy(() => back3nd_roleCreateNestedOneWithoutUsersInputSchema)
}).strict();

export const back3nd_user_roleUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  role_id: z.string(),
  created_at: z.coerce.date().optional()
}).strict();

export const back3nd_user_roleCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.back3nd_user_roleCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const back3nd_user_roleCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.back3nd_user_roleCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => back3nd_user_roleCreateManyUserInputSchema),z.lazy(() => back3nd_user_roleCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const back3nd_password_resetUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.back3nd_password_resetUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => back3nd_password_resetUpdateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => back3nd_password_resetCreateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const back3nd_password_resetUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.back3nd_password_resetUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => back3nd_password_resetWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => back3nd_password_resetUpdateWithoutUserInputSchema),z.lazy(() => back3nd_password_resetUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const back3nd_password_resetUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.back3nd_password_resetUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => back3nd_password_resetScalarWhereInputSchema),
  data: z.union([ z.lazy(() => back3nd_password_resetUpdateManyMutationInputSchema),z.lazy(() => back3nd_password_resetUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const back3nd_password_resetScalarWhereInputSchema: z.ZodType<Prisma.back3nd_password_resetScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_password_resetScalarWhereInputSchema),z.lazy(() => back3nd_password_resetScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_password_resetScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_password_resetScalarWhereInputSchema),z.lazy(() => back3nd_password_resetScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  expires_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const back3nd_user_roleUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.back3nd_user_roleUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => back3nd_user_roleUpdateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const back3nd_user_roleUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.back3nd_user_roleUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => back3nd_user_roleUpdateWithoutUserInputSchema),z.lazy(() => back3nd_user_roleUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const back3nd_user_roleUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.back3nd_user_roleUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => back3nd_user_roleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => back3nd_user_roleUpdateManyMutationInputSchema),z.lazy(() => back3nd_user_roleUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const back3nd_user_roleScalarWhereInputSchema: z.ZodType<Prisma.back3nd_user_roleScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_user_roleScalarWhereInputSchema),z.lazy(() => back3nd_user_roleScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_user_roleScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_user_roleScalarWhereInputSchema),z.lazy(() => back3nd_user_roleScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const back3nd_permissionCreateWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_permissionCreateWithoutRoleInput> = z.object({
  id: z.string().optional(),
  can_create: z.boolean().optional(),
  can_read: z.boolean().optional(),
  can_update: z.boolean().optional(),
  can_delete: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  collection: z.string()
}).strict();

export const back3nd_permissionUncheckedCreateWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_permissionUncheckedCreateWithoutRoleInput> = z.object({
  id: z.string().optional(),
  can_create: z.boolean().optional(),
  can_read: z.boolean().optional(),
  can_update: z.boolean().optional(),
  can_delete: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  collection: z.string()
}).strict();

export const back3nd_permissionCreateOrConnectWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_permissionCreateOrConnectWithoutRoleInput> = z.object({
  where: z.lazy(() => back3nd_permissionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => back3nd_permissionCreateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const back3nd_permissionCreateManyRoleInputEnvelopeSchema: z.ZodType<Prisma.back3nd_permissionCreateManyRoleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => back3nd_permissionCreateManyRoleInputSchema),z.lazy(() => back3nd_permissionCreateManyRoleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const back3nd_user_roleCreateWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleCreateWithoutRoleInput> = z.object({
  id: z.string().optional(),
  created_at: z.coerce.date().optional(),
  user: z.lazy(() => back3nd_userCreateNestedOneWithoutRolesInputSchema)
}).strict();

export const back3nd_user_roleUncheckedCreateWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedCreateWithoutRoleInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  created_at: z.coerce.date().optional()
}).strict();

export const back3nd_user_roleCreateOrConnectWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleCreateOrConnectWithoutRoleInput> = z.object({
  where: z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const back3nd_user_roleCreateManyRoleInputEnvelopeSchema: z.ZodType<Prisma.back3nd_user_roleCreateManyRoleInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => back3nd_user_roleCreateManyRoleInputSchema),z.lazy(() => back3nd_user_roleCreateManyRoleInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const back3nd_permissionUpsertWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_permissionUpsertWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => back3nd_permissionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => back3nd_permissionUpdateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUncheckedUpdateWithoutRoleInputSchema) ]),
  create: z.union([ z.lazy(() => back3nd_permissionCreateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const back3nd_permissionUpdateWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_permissionUpdateWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => back3nd_permissionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => back3nd_permissionUpdateWithoutRoleInputSchema),z.lazy(() => back3nd_permissionUncheckedUpdateWithoutRoleInputSchema) ]),
}).strict();

export const back3nd_permissionUpdateManyWithWhereWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_permissionUpdateManyWithWhereWithoutRoleInput> = z.object({
  where: z.lazy(() => back3nd_permissionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => back3nd_permissionUpdateManyMutationInputSchema),z.lazy(() => back3nd_permissionUncheckedUpdateManyWithoutRoleInputSchema) ]),
}).strict();

export const back3nd_permissionScalarWhereInputSchema: z.ZodType<Prisma.back3nd_permissionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => back3nd_permissionScalarWhereInputSchema),z.lazy(() => back3nd_permissionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => back3nd_permissionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => back3nd_permissionScalarWhereInputSchema),z.lazy(() => back3nd_permissionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  can_create: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  can_read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  can_update: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  can_delete: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  collection: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const back3nd_user_roleUpsertWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleUpsertWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => back3nd_user_roleUpdateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUncheckedUpdateWithoutRoleInputSchema) ]),
  create: z.union([ z.lazy(() => back3nd_user_roleCreateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUncheckedCreateWithoutRoleInputSchema) ]),
}).strict();

export const back3nd_user_roleUpdateWithWhereUniqueWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleUpdateWithWhereUniqueWithoutRoleInput> = z.object({
  where: z.lazy(() => back3nd_user_roleWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => back3nd_user_roleUpdateWithoutRoleInputSchema),z.lazy(() => back3nd_user_roleUncheckedUpdateWithoutRoleInputSchema) ]),
}).strict();

export const back3nd_user_roleUpdateManyWithWhereWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleUpdateManyWithWhereWithoutRoleInput> = z.object({
  where: z.lazy(() => back3nd_user_roleScalarWhereInputSchema),
  data: z.union([ z.lazy(() => back3nd_user_roleUpdateManyMutationInputSchema),z.lazy(() => back3nd_user_roleUncheckedUpdateManyWithoutRoleInputSchema) ]),
}).strict();

export const back3nd_roleCreateWithoutUsersInputSchema: z.ZodType<Prisma.back3nd_roleCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  permissions: z.lazy(() => back3nd_permissionCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const back3nd_roleUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.back3nd_roleUncheckedCreateWithoutUsersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  permissions: z.lazy(() => back3nd_permissionUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const back3nd_roleCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.back3nd_roleCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => back3nd_roleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => back3nd_roleCreateWithoutUsersInputSchema),z.lazy(() => back3nd_roleUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const back3nd_userCreateWithoutRolesInputSchema: z.ZodType<Prisma.back3nd_userCreateWithoutRolesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  password: z.string(),
  reset_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  back3nd_password_reset: z.lazy(() => back3nd_password_resetCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const back3nd_userUncheckedCreateWithoutRolesInputSchema: z.ZodType<Prisma.back3nd_userUncheckedCreateWithoutRolesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  password: z.string(),
  reset_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  back3nd_password_reset: z.lazy(() => back3nd_password_resetUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const back3nd_userCreateOrConnectWithoutRolesInputSchema: z.ZodType<Prisma.back3nd_userCreateOrConnectWithoutRolesInput> = z.object({
  where: z.lazy(() => back3nd_userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => back3nd_userCreateWithoutRolesInputSchema),z.lazy(() => back3nd_userUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const back3nd_roleUpsertWithoutUsersInputSchema: z.ZodType<Prisma.back3nd_roleUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => back3nd_roleUpdateWithoutUsersInputSchema),z.lazy(() => back3nd_roleUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => back3nd_roleCreateWithoutUsersInputSchema),z.lazy(() => back3nd_roleUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => back3nd_roleWhereInputSchema).optional()
}).strict();

export const back3nd_roleUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.back3nd_roleUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => back3nd_roleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => back3nd_roleUpdateWithoutUsersInputSchema),z.lazy(() => back3nd_roleUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const back3nd_roleUpdateWithoutUsersInputSchema: z.ZodType<Prisma.back3nd_roleUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => back3nd_permissionUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const back3nd_roleUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.back3nd_roleUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permissions: z.lazy(() => back3nd_permissionUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const back3nd_userUpsertWithoutRolesInputSchema: z.ZodType<Prisma.back3nd_userUpsertWithoutRolesInput> = z.object({
  update: z.union([ z.lazy(() => back3nd_userUpdateWithoutRolesInputSchema),z.lazy(() => back3nd_userUncheckedUpdateWithoutRolesInputSchema) ]),
  create: z.union([ z.lazy(() => back3nd_userCreateWithoutRolesInputSchema),z.lazy(() => back3nd_userUncheckedCreateWithoutRolesInputSchema) ]),
  where: z.lazy(() => back3nd_userWhereInputSchema).optional()
}).strict();

export const back3nd_userUpdateToOneWithWhereWithoutRolesInputSchema: z.ZodType<Prisma.back3nd_userUpdateToOneWithWhereWithoutRolesInput> = z.object({
  where: z.lazy(() => back3nd_userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => back3nd_userUpdateWithoutRolesInputSchema),z.lazy(() => back3nd_userUncheckedUpdateWithoutRolesInputSchema) ]),
}).strict();

export const back3nd_userUpdateWithoutRolesInputSchema: z.ZodType<Prisma.back3nd_userUpdateWithoutRolesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reset_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  back3nd_password_reset: z.lazy(() => back3nd_password_resetUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const back3nd_userUncheckedUpdateWithoutRolesInputSchema: z.ZodType<Prisma.back3nd_userUncheckedUpdateWithoutRolesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reset_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  back3nd_password_reset: z.lazy(() => back3nd_password_resetUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const back3nd_roleCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.back3nd_roleCreateWithoutPermissionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users: z.lazy(() => back3nd_user_roleCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const back3nd_roleUncheckedCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.back3nd_roleUncheckedCreateWithoutPermissionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users: z.lazy(() => back3nd_user_roleUncheckedCreateNestedManyWithoutRoleInputSchema).optional()
}).strict();

export const back3nd_roleCreateOrConnectWithoutPermissionsInputSchema: z.ZodType<Prisma.back3nd_roleCreateOrConnectWithoutPermissionsInput> = z.object({
  where: z.lazy(() => back3nd_roleWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => back3nd_roleCreateWithoutPermissionsInputSchema),z.lazy(() => back3nd_roleUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const back3nd_roleUpsertWithoutPermissionsInputSchema: z.ZodType<Prisma.back3nd_roleUpsertWithoutPermissionsInput> = z.object({
  update: z.union([ z.lazy(() => back3nd_roleUpdateWithoutPermissionsInputSchema),z.lazy(() => back3nd_roleUncheckedUpdateWithoutPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => back3nd_roleCreateWithoutPermissionsInputSchema),z.lazy(() => back3nd_roleUncheckedCreateWithoutPermissionsInputSchema) ]),
  where: z.lazy(() => back3nd_roleWhereInputSchema).optional()
}).strict();

export const back3nd_roleUpdateToOneWithWhereWithoutPermissionsInputSchema: z.ZodType<Prisma.back3nd_roleUpdateToOneWithWhereWithoutPermissionsInput> = z.object({
  where: z.lazy(() => back3nd_roleWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => back3nd_roleUpdateWithoutPermissionsInputSchema),z.lazy(() => back3nd_roleUncheckedUpdateWithoutPermissionsInputSchema) ]),
}).strict();

export const back3nd_roleUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.back3nd_roleUpdateWithoutPermissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => back3nd_user_roleUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const back3nd_roleUncheckedUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.back3nd_roleUncheckedUpdateWithoutPermissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => back3nd_user_roleUncheckedUpdateManyWithoutRoleNestedInputSchema).optional()
}).strict();

export const back3nd_userCreateWithoutBack3nd_password_resetInputSchema: z.ZodType<Prisma.back3nd_userCreateWithoutBack3nd_password_resetInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  password: z.string(),
  reset_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  roles: z.lazy(() => back3nd_user_roleCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const back3nd_userUncheckedCreateWithoutBack3nd_password_resetInputSchema: z.ZodType<Prisma.back3nd_userUncheckedCreateWithoutBack3nd_password_resetInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  email: z.string(),
  password: z.string(),
  reset_token: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  roles: z.lazy(() => back3nd_user_roleUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const back3nd_userCreateOrConnectWithoutBack3nd_password_resetInputSchema: z.ZodType<Prisma.back3nd_userCreateOrConnectWithoutBack3nd_password_resetInput> = z.object({
  where: z.lazy(() => back3nd_userWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => back3nd_userCreateWithoutBack3nd_password_resetInputSchema),z.lazy(() => back3nd_userUncheckedCreateWithoutBack3nd_password_resetInputSchema) ]),
}).strict();

export const back3nd_userUpsertWithoutBack3nd_password_resetInputSchema: z.ZodType<Prisma.back3nd_userUpsertWithoutBack3nd_password_resetInput> = z.object({
  update: z.union([ z.lazy(() => back3nd_userUpdateWithoutBack3nd_password_resetInputSchema),z.lazy(() => back3nd_userUncheckedUpdateWithoutBack3nd_password_resetInputSchema) ]),
  create: z.union([ z.lazy(() => back3nd_userCreateWithoutBack3nd_password_resetInputSchema),z.lazy(() => back3nd_userUncheckedCreateWithoutBack3nd_password_resetInputSchema) ]),
  where: z.lazy(() => back3nd_userWhereInputSchema).optional()
}).strict();

export const back3nd_userUpdateToOneWithWhereWithoutBack3nd_password_resetInputSchema: z.ZodType<Prisma.back3nd_userUpdateToOneWithWhereWithoutBack3nd_password_resetInput> = z.object({
  where: z.lazy(() => back3nd_userWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => back3nd_userUpdateWithoutBack3nd_password_resetInputSchema),z.lazy(() => back3nd_userUncheckedUpdateWithoutBack3nd_password_resetInputSchema) ]),
}).strict();

export const back3nd_userUpdateWithoutBack3nd_password_resetInputSchema: z.ZodType<Prisma.back3nd_userUpdateWithoutBack3nd_password_resetInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reset_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => back3nd_user_roleUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const back3nd_userUncheckedUpdateWithoutBack3nd_password_resetInputSchema: z.ZodType<Prisma.back3nd_userUncheckedUpdateWithoutBack3nd_password_resetInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reset_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  roles: z.lazy(() => back3nd_user_roleUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const AuditLogCreateManyPerformedByInputSchema: z.ZodType<Prisma.AuditLogCreateManyPerformedByInput> = z.object({
  id: z.string().optional(),
  taskId: z.string().optional().nullable(),
  workflowId: z.string().optional().nullable(),
  action: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable()
}).strict();

export const DigitalCertificateCreateManyUserInputSchema: z.ZodType<Prisma.DigitalCertificateCreateManyUserInput> = z.object({
  id: z.string().optional(),
  alias: z.string(),
  filePath: z.string(),
  password: z.string(),
  createdAt: z.coerce.date().optional(),
  expiration: z.coerce.date()
}).strict();

export const DocumentUserCreateManyUserInputSchema: z.ZodType<Prisma.DocumentUserCreateManyUserInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentVersionCreatorCreateManyUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateManyUserInput> = z.object({
  id: z.string().optional(),
  versionId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const NotificationCreateManyUserInputSchema: z.ZodType<Prisma.NotificationCreateManyUserInput> = z.object({
  id: z.string().optional(),
  message: z.string(),
  read: z.boolean().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SharedDocumentCreateManyUserInputSchema: z.ZodType<Prisma.SharedDocumentCreateManyUserInput> = z.object({
  id: z.string().optional(),
  documentId: z.string(),
  sharedAt: z.coerce.date().optional(),
  permission: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TaskCreateManyAssignedToInputSchema: z.ZodType<Prisma.TaskCreateManyAssignedToInput> = z.object({
  id: z.string().optional(),
  workflowId: z.string(),
  documentId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const TaskUserCreateManyUserInputSchema: z.ZodType<Prisma.TaskUserCreateManyUserInput> = z.object({
  id: z.string().optional(),
  taskId: z.string()
}).strict();

export const TicketCreateManyAssignedToInputSchema: z.ZodType<Prisma.TicketCreateManyAssignedToInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable()
}).strict();

export const TicketCreateManyCreatedByInputSchema: z.ZodType<Prisma.TicketCreateManyCreatedByInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable()
}).strict();

export const TicketCollaboratorCreateManyUserInputSchema: z.ZodType<Prisma.TicketCollaboratorCreateManyUserInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string()
}).strict();

export const TicketThreadCreateManyUserInputSchema: z.ZodType<Prisma.TicketThreadCreateManyUserInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  message: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketUserCreateManyUserInputSchema: z.ZodType<Prisma.TicketUserCreateManyUserInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string()
}).strict();

export const UserDepartmentCreateManyUserInputSchema: z.ZodType<Prisma.UserDepartmentCreateManyUserInput> = z.object({
  id: z.string().optional(),
  departmentId: z.number().int(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DepartmentCreateManyHeadInputSchema: z.ZodType<Prisma.DepartmentCreateManyHeadInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  institutionId: z.string(),
  parentDepartmentId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InstitutionCreateManyMayorInputSchema: z.ZodType<Prisma.InstitutionCreateManyMayorInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  flag: z.string().optional().nullable(),
  emblem: z.string().optional().nullable(),
  viceMayorId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InstitutionCreateManyViceMayorInputSchema: z.ZodType<Prisma.InstitutionCreateManyViceMayorInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  address: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  flag: z.string().optional().nullable(),
  emblem: z.string().optional().nullable(),
  mayorId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserOnDocumentsCreateManyUserInputSchema: z.ZodType<Prisma.UserOnDocumentsCreateManyUserInput> = z.object({
  documentId: z.string(),
  assignedAt: z.coerce.date().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AuditLogUpdateWithoutPerformedByInputSchema: z.ZodType<Prisma.AuditLogUpdateWithoutPerformedByInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  task: z.lazy(() => TaskUpdateOneWithoutAuditLogsNestedInputSchema).optional(),
  workflow: z.lazy(() => WorkflowUpdateOneWithoutAuditLogsNestedInputSchema).optional()
}).strict();

export const AuditLogUncheckedUpdateWithoutPerformedByInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateWithoutPerformedByInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workflowId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutPerformedByInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutPerformedByInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  workflowId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const DigitalCertificateUpdateWithoutUserInputSchema: z.ZodType<Prisma.DigitalCertificateUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alias: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DigitalCertificateUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.DigitalCertificateUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alias: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DigitalCertificateUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.DigitalCertificateUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  alias: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expiration: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentUserUpdateWithoutUserInputSchema: z.ZodType<Prisma.DocumentUserUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  document: z.lazy(() => DocumentUpdateOneRequiredWithoutDocumentUsersNestedInputSchema).optional()
}).strict();

export const DocumentUserUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.DocumentUserUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentUserUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.DocumentUserUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionCreatorUpdateWithoutUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.lazy(() => DocumentVersionUpdateOneRequiredWithoutDocumentVersionCreatorsNestedInputSchema).optional()
}).strict();

export const DocumentVersionCreatorUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionCreatorUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NotificationUpdateWithoutUserInputSchema: z.ZodType<Prisma.NotificationUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NotificationUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.NotificationUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NotificationUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.NotificationUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SharedDocumentUpdateWithoutUserInputSchema: z.ZodType<Prisma.SharedDocumentUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  document: z.lazy(() => DocumentUpdateOneRequiredWithoutSharedDocumentsNestedInputSchema).optional()
}).strict();

export const SharedDocumentUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SharedDocumentUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUpdateWithoutAssignedToInputSchema: z.ZodType<Prisma.TaskUpdateWithoutAssignedToInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutTaskNestedInputSchema).optional(),
  document: z.lazy(() => DocumentUpdateOneWithoutTasksNestedInputSchema).optional(),
  workflow: z.lazy(() => WorkflowUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutAssignedToInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutAssignedToInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workflowId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateManyWithoutAssignedToInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutAssignedToInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workflowId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  documentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUserUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskUserUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  task: z.lazy(() => TaskUpdateOneRequiredWithoutTaskUsersNestedInputSchema).optional()
}).strict();

export const TaskUserUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TaskUserUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUserUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TaskUserUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketUpdateWithoutAssignedToInputSchema: z.ZodType<Prisma.TicketUpdateWithoutAssignedToInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutAssignedToInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutAssignedToInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateManyWithoutAssignedToInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutAssignedToInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TicketUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.TicketUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TicketCollaboratorUpdateWithoutUserInputSchema: z.ZodType<Prisma.TicketCollaboratorUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticket: z.lazy(() => TicketUpdateOneRequiredWithoutCollaboratorsNestedInputSchema).optional()
}).strict();

export const TicketCollaboratorUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCollaboratorUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketThreadUpdateWithoutUserInputSchema: z.ZodType<Prisma.TicketThreadUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketThreadNestedInputSchema).optional(),
  ticket: z.lazy(() => TicketUpdateOneRequiredWithoutThreadsNestedInputSchema).optional()
}).strict();

export const TicketThreadUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TicketThreadUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketThreadNestedInputSchema).optional()
}).strict();

export const TicketThreadUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TicketThreadUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketUserUpdateWithoutUserInputSchema: z.ZodType<Prisma.TicketUserUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticket: z.lazy(() => TicketUpdateOneRequiredWithoutTicketUsersNestedInputSchema).optional()
}).strict();

export const TicketUserUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TicketUserUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketUserUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TicketUserUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserDepartmentUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserDepartmentUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutUserDepartmentsNestedInputSchema).optional()
}).strict();

export const UserDepartmentUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserDepartmentUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DepartmentUpdateWithoutHeadInputSchema: z.ZodType<Prisma.DepartmentUpdateWithoutHeadInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  institution: z.lazy(() => InstitutionUpdateOneRequiredWithoutDepartmentsNestedInputSchema).optional(),
  parentDepartment: z.lazy(() => DepartmentUpdateOneWithoutChildDepartmentsNestedInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUncheckedUpdateWithoutHeadInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateWithoutHeadInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentDepartmentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUncheckedUpdateManyWithoutHeadInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateManyWithoutHeadInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentDepartmentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InstitutionUpdateWithoutMayorInputSchema: z.ZodType<Prisma.InstitutionUpdateWithoutMayorInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  viceMayor: z.lazy(() => UserUpdateOneWithoutViceMayorInstitutionsNestedInputSchema).optional(),
  departments: z.lazy(() => DepartmentUpdateManyWithoutInstitutionNestedInputSchema).optional()
}).strict();

export const InstitutionUncheckedUpdateWithoutMayorInputSchema: z.ZodType<Prisma.InstitutionUncheckedUpdateWithoutMayorInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viceMayorId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  departments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutInstitutionNestedInputSchema).optional()
}).strict();

export const InstitutionUncheckedUpdateManyWithoutMayorInputSchema: z.ZodType<Prisma.InstitutionUncheckedUpdateManyWithoutMayorInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  viceMayorId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InstitutionUpdateWithoutViceMayorInputSchema: z.ZodType<Prisma.InstitutionUpdateWithoutViceMayorInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  mayor: z.lazy(() => UserUpdateOneWithoutMayorInstitutionsNestedInputSchema).optional(),
  departments: z.lazy(() => DepartmentUpdateManyWithoutInstitutionNestedInputSchema).optional()
}).strict();

export const InstitutionUncheckedUpdateWithoutViceMayorInputSchema: z.ZodType<Prisma.InstitutionUncheckedUpdateWithoutViceMayorInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mayorId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  departments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutInstitutionNestedInputSchema).optional()
}).strict();

export const InstitutionUncheckedUpdateManyWithoutViceMayorInputSchema: z.ZodType<Prisma.InstitutionUncheckedUpdateManyWithoutViceMayorInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  flag: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  emblem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mayorId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOnDocumentsUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserOnDocumentsUpdateWithoutUserInput> = z.object({
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  document: z.lazy(() => DocumentUpdateOneRequiredWithoutUserOnDocumentsNestedInputSchema).optional()
}).strict();

export const UserOnDocumentsUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedUpdateWithoutUserInput> = z.object({
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOnDocumentsUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedUpdateManyWithoutUserInput> = z.object({
  documentId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentCreateManyDocumentInputSchema: z.ZodType<Prisma.AttachmentCreateManyDocumentInput> = z.object({
  id: z.string().optional(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentUserCreateManyDocumentInputSchema: z.ZodType<Prisma.DocumentUserCreateManyDocumentInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentVersionCreateManyDocumentInputSchema: z.ZodType<Prisma.DocumentVersionCreateManyDocumentInput> = z.object({
  id: z.string().optional(),
  versionNumber: z.number().int(),
  filePath: z.string(),
  changesDescription: z.string().optional().nullable(),
  createdById: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SharedDocumentCreateManyDocumentInputSchema: z.ZodType<Prisma.SharedDocumentCreateManyDocumentInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  sharedAt: z.coerce.date().optional(),
  permission: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TaskCreateManyDocumentInputSchema: z.ZodType<Prisma.TaskCreateManyDocumentInput> = z.object({
  id: z.string().optional(),
  workflowId: z.string(),
  assignedToId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserOnDocumentsCreateManyDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsCreateManyDocumentInput> = z.object({
  userId: z.string(),
  assignedAt: z.coerce.date().optional(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AttachmentUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.AttachmentUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentUncheckedUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AttachmentUncheckedUpdateManyWithoutDocumentInputSchema: z.ZodType<Prisma.AttachmentUncheckedUpdateManyWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentUserUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentUserUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutDocumentUsersNestedInputSchema).optional()
}).strict();

export const DocumentUserUncheckedUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentUserUncheckedUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentUserUncheckedUpdateManyWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentUserUncheckedUpdateManyWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentVersionUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  changesDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUpdateManyWithoutVersionNestedInputSchema).optional()
}).strict();

export const DocumentVersionUncheckedUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentVersionUncheckedUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  changesDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  documentVersionCreators: z.lazy(() => DocumentVersionCreatorUncheckedUpdateManyWithoutVersionNestedInputSchema).optional()
}).strict();

export const DocumentVersionUncheckedUpdateManyWithoutDocumentInputSchema: z.ZodType<Prisma.DocumentVersionUncheckedUpdateManyWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  changesDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SharedDocumentUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.SharedDocumentUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSharedDocumentsNestedInputSchema).optional()
}).strict();

export const SharedDocumentUncheckedUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SharedDocumentUncheckedUpdateManyWithoutDocumentInputSchema: z.ZodType<Prisma.SharedDocumentUncheckedUpdateManyWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  permission: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.TaskUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutTaskNestedInputSchema).optional(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTasksAssignedNestedInputSchema).optional(),
  workflow: z.lazy(() => WorkflowUpdateOneRequiredWithoutTasksNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workflowId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateManyWithoutDocumentInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutDocumentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workflowId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOnDocumentsUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsUpdateWithoutDocumentInput> = z.object({
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutUserOnDocumentsNestedInputSchema).optional()
}).strict();

export const UserOnDocumentsUncheckedUpdateWithoutDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedUpdateWithoutDocumentInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserOnDocumentsUncheckedUpdateManyWithoutDocumentInputSchema: z.ZodType<Prisma.UserOnDocumentsUncheckedUpdateManyWithoutDocumentInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionCreatorCreateManyVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateManyVersionInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DocumentVersionCreatorUpdateWithoutVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateWithoutVersionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutDocumentVersionCreatorsNestedInputSchema).optional()
}).strict();

export const DocumentVersionCreatorUncheckedUpdateWithoutVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedUpdateWithoutVersionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentVersionCreatorUncheckedUpdateManyWithoutVersionInputSchema: z.ZodType<Prisma.DocumentVersionCreatorUncheckedUpdateManyWithoutVersionInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogCreateManyWorkflowInputSchema: z.ZodType<Prisma.AuditLogCreateManyWorkflowInput> = z.object({
  id: z.string().optional(),
  taskId: z.string().optional().nullable(),
  action: z.string(),
  performedById: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable()
}).strict();

export const TaskCreateManyWorkflowInputSchema: z.ZodType<Prisma.TaskCreateManyWorkflowInput> = z.object({
  id: z.string().optional(),
  assignedToId: z.string().optional().nullable(),
  documentId: z.string().optional().nullable(),
  title: z.string(),
  description: z.string().optional().nullable(),
  status: z.string(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AuditLogUpdateWithoutWorkflowInputSchema: z.ZodType<Prisma.AuditLogUpdateWithoutWorkflowInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  performedBy: z.lazy(() => UserUpdateOneRequiredWithoutAuditLogsNestedInputSchema).optional(),
  task: z.lazy(() => TaskUpdateOneWithoutAuditLogsNestedInputSchema).optional()
}).strict();

export const AuditLogUncheckedUpdateWithoutWorkflowInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateWithoutWorkflowInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutWorkflowInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutWorkflowInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taskId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaskUpdateWithoutWorkflowInputSchema: z.ZodType<Prisma.TaskUpdateWithoutWorkflowInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutTaskNestedInputSchema).optional(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTasksAssignedNestedInputSchema).optional(),
  document: z.lazy(() => DocumentUpdateOneWithoutTasksNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateWithoutWorkflowInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateWithoutWorkflowInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutTaskNestedInputSchema).optional(),
  taskUsers: z.lazy(() => TaskUserUncheckedUpdateManyWithoutTaskNestedInputSchema).optional()
}).strict();

export const TaskUncheckedUpdateManyWithoutWorkflowInputSchema: z.ZodType<Prisma.TaskUncheckedUpdateManyWithoutWorkflowInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  documentId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogCreateManyTaskInputSchema: z.ZodType<Prisma.AuditLogCreateManyTaskInput> = z.object({
  id: z.string().optional(),
  workflowId: z.string().optional().nullable(),
  action: z.string(),
  performedById: z.string(),
  timestamp: z.coerce.date().optional(),
  description: z.string().optional().nullable()
}).strict();

export const TaskUserCreateManyTaskInputSchema: z.ZodType<Prisma.TaskUserCreateManyTaskInput> = z.object({
  id: z.string().optional(),
  userId: z.string()
}).strict();

export const AuditLogUpdateWithoutTaskInputSchema: z.ZodType<Prisma.AuditLogUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  performedBy: z.lazy(() => UserUpdateOneRequiredWithoutAuditLogsNestedInputSchema).optional(),
  workflow: z.lazy(() => WorkflowUpdateOneWithoutAuditLogsNestedInputSchema).optional()
}).strict();

export const AuditLogUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workflowId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutTaskInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  workflowId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  performedById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaskUserUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TaskUserUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTaskUsersNestedInputSchema).optional()
}).strict();

export const TaskUserUncheckedUpdateWithoutTaskInputSchema: z.ZodType<Prisma.TaskUserUncheckedUpdateWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TaskUserUncheckedUpdateManyWithoutTaskInputSchema: z.ZodType<Prisma.TaskUserUncheckedUpdateManyWithoutTaskInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DepartmentCreateManyInstitutionInputSchema: z.ZodType<Prisma.DepartmentCreateManyInstitutionInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  parentDepartmentId: z.number().int().optional().nullable(),
  headId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DepartmentUpdateWithoutInstitutionInputSchema: z.ZodType<Prisma.DepartmentUpdateWithoutInstitutionInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  parentDepartment: z.lazy(() => DepartmentUpdateOneWithoutChildDepartmentsNestedInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  head: z.lazy(() => UserUpdateOneWithoutHeadOfDepartmentsNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUncheckedUpdateWithoutInstitutionInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateWithoutInstitutionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  parentDepartmentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  headId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUncheckedUpdateManyWithoutInstitutionInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateManyWithoutInstitutionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  parentDepartmentId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  headId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DepartmentCreateManyParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentCreateManyParentDepartmentInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isSecretariat: z.boolean().optional(),
  institutionId: z.string(),
  headId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserDepartmentCreateManyDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentCreateManyDepartmentInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketCreateManyDepartmentInputSchema: z.ZodType<Prisma.TicketCreateManyDepartmentInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable()
}).strict();

export const HelpTopicCreateManyDepartmentInputSchema: z.ZodType<Prisma.HelpTopicCreateManyDepartmentInput> = z.object({
  id: z.number().int().optional(),
  topic: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const DepartmentUpdateWithoutParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentUpdateWithoutParentDepartmentInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  institution: z.lazy(() => InstitutionUpdateOneRequiredWithoutDepartmentsNestedInputSchema).optional(),
  childDepartments: z.lazy(() => DepartmentUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  head: z.lazy(() => UserUpdateOneWithoutHeadOfDepartmentsNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUncheckedUpdateWithoutParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateWithoutParentDepartmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  headId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  childDepartments: z.lazy(() => DepartmentUncheckedUpdateManyWithoutParentDepartmentNestedInputSchema).optional(),
  userDepartments: z.lazy(() => UserDepartmentUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional(),
  helpTopics: z.lazy(() => HelpTopicUncheckedUpdateManyWithoutDepartmentNestedInputSchema).optional()
}).strict();

export const DepartmentUncheckedUpdateManyWithoutParentDepartmentInputSchema: z.ZodType<Prisma.DepartmentUncheckedUpdateManyWithoutParentDepartmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isSecretariat: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  institutionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  headId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserDepartmentUpdateWithoutDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentUpdateWithoutDepartmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutUserDepartmentsNestedInputSchema).optional()
}).strict();

export const UserDepartmentUncheckedUpdateWithoutDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedUpdateWithoutDepartmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserDepartmentUncheckedUpdateManyWithoutDepartmentInputSchema: z.ZodType<Prisma.UserDepartmentUncheckedUpdateManyWithoutDepartmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketUpdateWithoutDepartmentInputSchema: z.ZodType<Prisma.TicketUpdateWithoutDepartmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutDepartmentInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutDepartmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateManyWithoutDepartmentInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutDepartmentInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const HelpTopicUpdateWithoutDepartmentInputSchema: z.ZodType<Prisma.HelpTopicUpdateWithoutDepartmentInput> = z.object({
  topic: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketUpdateManyWithoutHelpTopicNestedInputSchema).optional()
}).strict();

export const HelpTopicUncheckedUpdateWithoutDepartmentInputSchema: z.ZodType<Prisma.HelpTopicUncheckedUpdateWithoutDepartmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  topic: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  tickets: z.lazy(() => TicketUncheckedUpdateManyWithoutHelpTopicNestedInputSchema).optional()
}).strict();

export const HelpTopicUncheckedUpdateManyWithoutDepartmentInputSchema: z.ZodType<Prisma.HelpTopicUncheckedUpdateManyWithoutDepartmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  topic: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketAttachmentCreateManyTicketInputSchema: z.ZodType<Prisma.TicketAttachmentCreateManyTicketInput> = z.object({
  id: z.string().optional(),
  ticketThreadId: z.string(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketCollaboratorCreateManyTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorCreateManyTicketInput> = z.object({
  id: z.string().optional(),
  userId: z.string()
}).strict();

export const TicketCustomFieldCreateManyTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldCreateManyTicketInput> = z.object({
  id: z.string().optional(),
  fieldId: z.number().int(),
  value: z.string()
}).strict();

export const TicketUserCreateManyTicketInputSchema: z.ZodType<Prisma.TicketUserCreateManyTicketInput> = z.object({
  id: z.string().optional(),
  userId: z.string()
}).strict();

export const TicketAttachmentUpdateWithoutTicketInputSchema: z.ZodType<Prisma.TicketAttachmentUpdateWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ticketThread: z.lazy(() => TicketThreadUpdateOneRequiredWithoutAttachmentsNestedInputSchema).optional()
}).strict();

export const TicketAttachmentUncheckedUpdateWithoutTicketInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedUpdateWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketThreadId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketAttachmentUncheckedUpdateManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedUpdateManyWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketThreadId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCollaboratorUpdateWithoutTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorUpdateWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTicketCollaboratorsNestedInputSchema).optional()
}).strict();

export const TicketCollaboratorUncheckedUpdateWithoutTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedUpdateWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCollaboratorUncheckedUpdateManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketCollaboratorUncheckedUpdateManyWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCustomFieldUpdateWithoutTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldUpdateWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field: z.lazy(() => CustomFieldUpdateOneRequiredWithoutTicketsNestedInputSchema).optional()
}).strict();

export const TicketCustomFieldUncheckedUpdateWithoutTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedUpdateWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fieldId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCustomFieldUncheckedUpdateManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedUpdateManyWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fieldId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketUserUpdateWithoutTicketInputSchema: z.ZodType<Prisma.TicketUserUpdateWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTicketUsersNestedInputSchema).optional()
}).strict();

export const TicketUserUncheckedUpdateWithoutTicketInputSchema: z.ZodType<Prisma.TicketUserUncheckedUpdateWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketUserUncheckedUpdateManyWithoutTicketInputSchema: z.ZodType<Prisma.TicketUserUncheckedUpdateManyWithoutTicketInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCreateManyStatusInputSchema: z.ZodType<Prisma.TicketCreateManyStatusInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable()
}).strict();

export const TicketUpdateWithoutStatusInputSchema: z.ZodType<Prisma.TicketUpdateWithoutStatusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutStatusInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutStatusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateManyWithoutStatusInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutStatusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TicketCreateManyPriorityInputSchema: z.ZodType<Prisma.TicketCreateManyPriorityInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable()
}).strict();

export const TicketUpdateWithoutPriorityInputSchema: z.ZodType<Prisma.TicketUpdateWithoutPriorityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutPriorityInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutPriorityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateManyWithoutPriorityInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutPriorityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TicketCreateManyHelpTopicInputSchema: z.ZodType<Prisma.TicketCreateManyHelpTopicInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  slaPlanId: z.number().int().optional().nullable(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable()
}).strict();

export const TicketUpdateWithoutHelpTopicInputSchema: z.ZodType<Prisma.TicketUpdateWithoutHelpTopicInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  slaPlan: z.lazy(() => SLAPlanUpdateOneWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutHelpTopicInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutHelpTopicInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateManyWithoutHelpTopicInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutHelpTopicInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  slaPlanId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TicketCreateManySlaPlanInputSchema: z.ZodType<Prisma.TicketCreateManySlaPlanInput> = z.object({
  id: z.string().optional(),
  subject: z.string(),
  description: z.string(),
  statusId: z.number().int(),
  priorityId: z.number().int(),
  createdById: z.string(),
  assignedToId: z.string().optional().nullable(),
  departmentId: z.number().int(),
  helpTopicId: z.number().int(),
  dueDate: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  closedAt: z.coerce.date().optional().nullable(),
  lastResponseAt: z.coerce.date().optional().nullable()
}).strict();

export const TicketUpdateWithoutSlaPlanInputSchema: z.ZodType<Prisma.TicketUpdateWithoutSlaPlanInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutTicketsAssignedNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutTicketsCreatedNestedInputSchema).optional(),
  department: z.lazy(() => DepartmentUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  helpTopic: z.lazy(() => HelpTopicUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  priority: z.lazy(() => TicketPriorityUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  status: z.lazy(() => TicketStatusUpdateOneRequiredWithoutTicketsNestedInputSchema).optional(),
  attachments: z.lazy(() => TicketAttachmentUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateWithoutSlaPlanInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateWithoutSlaPlanInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attachments: z.lazy(() => TicketAttachmentUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  collaborators: z.lazy(() => TicketCollaboratorUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  customFields: z.lazy(() => TicketCustomFieldUncheckedUpdateManyWithoutTicketNestedInputSchema).optional(),
  threads: z.lazy(() => TicketThreadUncheckedUpdateOneWithoutTicketNestedInputSchema).optional(),
  ticketUsers: z.lazy(() => TicketUserUncheckedUpdateManyWithoutTicketNestedInputSchema).optional()
}).strict();

export const TicketUncheckedUpdateManyWithoutSlaPlanInputSchema: z.ZodType<Prisma.TicketUncheckedUpdateManyWithoutSlaPlanInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subject: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  statusId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  priorityId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  departmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  helpTopicId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dueDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  closedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastResponseAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TicketAttachmentCreateManyTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentCreateManyTicketThreadInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  filePath: z.string(),
  fileName: z.string(),
  mimeType: z.string(),
  createdAt: z.coerce.date().optional()
}).strict();

export const TicketAttachmentUpdateWithoutTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentUpdateWithoutTicketThreadInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ticket: z.lazy(() => TicketUpdateOneRequiredWithoutAttachmentsNestedInputSchema).optional()
}).strict();

export const TicketAttachmentUncheckedUpdateWithoutTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedUpdateWithoutTicketThreadInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketAttachmentUncheckedUpdateManyWithoutTicketThreadInputSchema: z.ZodType<Prisma.TicketAttachmentUncheckedUpdateManyWithoutTicketThreadInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filePath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fileName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mimeType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCustomFieldCreateManyFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldCreateManyFieldInput> = z.object({
  id: z.string().optional(),
  ticketId: z.string(),
  value: z.string()
}).strict();

export const TicketCustomFieldUpdateWithoutFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldUpdateWithoutFieldInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticket: z.lazy(() => TicketUpdateOneRequiredWithoutCustomFieldsNestedInputSchema).optional()
}).strict();

export const TicketCustomFieldUncheckedUpdateWithoutFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedUpdateWithoutFieldInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TicketCustomFieldUncheckedUpdateManyWithoutFieldInputSchema: z.ZodType<Prisma.TicketCustomFieldUncheckedUpdateManyWithoutFieldInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ticketId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_password_resetCreateManyUserInputSchema: z.ZodType<Prisma.back3nd_password_resetCreateManyUserInput> = z.object({
  id: z.string().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  expires_at: z.coerce.date()
}).strict();

export const back3nd_user_roleCreateManyUserInputSchema: z.ZodType<Prisma.back3nd_user_roleCreateManyUserInput> = z.object({
  id: z.string().optional(),
  role_id: z.string(),
  created_at: z.coerce.date().optional()
}).strict();

export const back3nd_password_resetUpdateWithoutUserInputSchema: z.ZodType<Prisma.back3nd_password_resetUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_password_resetUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.back3nd_password_resetUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_password_resetUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.back3nd_password_resetUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  expires_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_user_roleUpdateWithoutUserInputSchema: z.ZodType<Prisma.back3nd_user_roleUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.lazy(() => back3nd_roleUpdateOneRequiredWithoutUsersNestedInputSchema).optional()
}).strict();

export const back3nd_user_roleUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_user_roleUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_permissionCreateManyRoleInputSchema: z.ZodType<Prisma.back3nd_permissionCreateManyRoleInput> = z.object({
  id: z.string().optional(),
  can_create: z.boolean().optional(),
  can_read: z.boolean().optional(),
  can_update: z.boolean().optional(),
  can_delete: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  collection: z.string()
}).strict();

export const back3nd_user_roleCreateManyRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleCreateManyRoleInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  created_at: z.coerce.date().optional()
}).strict();

export const back3nd_permissionUpdateWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_permissionUpdateWithoutRoleInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  can_create: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_update: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_delete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  collection: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_permissionUncheckedUpdateWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_permissionUncheckedUpdateWithoutRoleInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  can_create: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_update: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_delete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  collection: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_permissionUncheckedUpdateManyWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_permissionUncheckedUpdateManyWithoutRoleInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  can_create: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_update: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  can_delete: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  collection: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_user_roleUpdateWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleUpdateWithoutRoleInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => back3nd_userUpdateOneRequiredWithoutRolesNestedInputSchema).optional()
}).strict();

export const back3nd_user_roleUncheckedUpdateWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedUpdateWithoutRoleInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const back3nd_user_roleUncheckedUpdateManyWithoutRoleInputSchema: z.ZodType<Prisma.back3nd_user_roleUncheckedUpdateManyWithoutRoleInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const DocumentFindFirstArgsSchema: z.ZodType<Prisma.DocumentFindFirstArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  include: DocumentIncludeSchema.optional(),
  where: DocumentWhereInputSchema.optional(),
  orderBy: z.union([ DocumentOrderByWithRelationInputSchema.array(),DocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentScalarFieldEnumSchema,DocumentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DocumentFindFirstOrThrowArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  include: DocumentIncludeSchema.optional(),
  where: DocumentWhereInputSchema.optional(),
  orderBy: z.union([ DocumentOrderByWithRelationInputSchema.array(),DocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentScalarFieldEnumSchema,DocumentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentFindManyArgsSchema: z.ZodType<Prisma.DocumentFindManyArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  include: DocumentIncludeSchema.optional(),
  where: DocumentWhereInputSchema.optional(),
  orderBy: z.union([ DocumentOrderByWithRelationInputSchema.array(),DocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentScalarFieldEnumSchema,DocumentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentAggregateArgsSchema: z.ZodType<Prisma.DocumentAggregateArgs> = z.object({
  where: DocumentWhereInputSchema.optional(),
  orderBy: z.union([ DocumentOrderByWithRelationInputSchema.array(),DocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DocumentGroupByArgsSchema: z.ZodType<Prisma.DocumentGroupByArgs> = z.object({
  where: DocumentWhereInputSchema.optional(),
  orderBy: z.union([ DocumentOrderByWithAggregationInputSchema.array(),DocumentOrderByWithAggregationInputSchema ]).optional(),
  by: DocumentScalarFieldEnumSchema.array(),
  having: DocumentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DocumentFindUniqueArgsSchema: z.ZodType<Prisma.DocumentFindUniqueArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  include: DocumentIncludeSchema.optional(),
  where: DocumentWhereUniqueInputSchema,
}).strict() ;

export const DocumentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DocumentFindUniqueOrThrowArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  include: DocumentIncludeSchema.optional(),
  where: DocumentWhereUniqueInputSchema,
}).strict() ;

export const UserOnDocumentsFindFirstArgsSchema: z.ZodType<Prisma.UserOnDocumentsFindFirstArgs> = z.object({
  select: UserOnDocumentsSelectSchema.optional(),
  include: UserOnDocumentsIncludeSchema.optional(),
  where: UserOnDocumentsWhereInputSchema.optional(),
  orderBy: z.union([ UserOnDocumentsOrderByWithRelationInputSchema.array(),UserOnDocumentsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserOnDocumentsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserOnDocumentsScalarFieldEnumSchema,UserOnDocumentsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserOnDocumentsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserOnDocumentsFindFirstOrThrowArgs> = z.object({
  select: UserOnDocumentsSelectSchema.optional(),
  include: UserOnDocumentsIncludeSchema.optional(),
  where: UserOnDocumentsWhereInputSchema.optional(),
  orderBy: z.union([ UserOnDocumentsOrderByWithRelationInputSchema.array(),UserOnDocumentsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserOnDocumentsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserOnDocumentsScalarFieldEnumSchema,UserOnDocumentsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserOnDocumentsFindManyArgsSchema: z.ZodType<Prisma.UserOnDocumentsFindManyArgs> = z.object({
  select: UserOnDocumentsSelectSchema.optional(),
  include: UserOnDocumentsIncludeSchema.optional(),
  where: UserOnDocumentsWhereInputSchema.optional(),
  orderBy: z.union([ UserOnDocumentsOrderByWithRelationInputSchema.array(),UserOnDocumentsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserOnDocumentsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserOnDocumentsScalarFieldEnumSchema,UserOnDocumentsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserOnDocumentsAggregateArgsSchema: z.ZodType<Prisma.UserOnDocumentsAggregateArgs> = z.object({
  where: UserOnDocumentsWhereInputSchema.optional(),
  orderBy: z.union([ UserOnDocumentsOrderByWithRelationInputSchema.array(),UserOnDocumentsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserOnDocumentsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserOnDocumentsGroupByArgsSchema: z.ZodType<Prisma.UserOnDocumentsGroupByArgs> = z.object({
  where: UserOnDocumentsWhereInputSchema.optional(),
  orderBy: z.union([ UserOnDocumentsOrderByWithAggregationInputSchema.array(),UserOnDocumentsOrderByWithAggregationInputSchema ]).optional(),
  by: UserOnDocumentsScalarFieldEnumSchema.array(),
  having: UserOnDocumentsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserOnDocumentsFindUniqueArgsSchema: z.ZodType<Prisma.UserOnDocumentsFindUniqueArgs> = z.object({
  select: UserOnDocumentsSelectSchema.optional(),
  include: UserOnDocumentsIncludeSchema.optional(),
  where: UserOnDocumentsWhereUniqueInputSchema,
}).strict() ;

export const UserOnDocumentsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserOnDocumentsFindUniqueOrThrowArgs> = z.object({
  select: UserOnDocumentsSelectSchema.optional(),
  include: UserOnDocumentsIncludeSchema.optional(),
  where: UserOnDocumentsWhereUniqueInputSchema,
}).strict() ;

export const DocumentUserFindFirstArgsSchema: z.ZodType<Prisma.DocumentUserFindFirstArgs> = z.object({
  select: DocumentUserSelectSchema.optional(),
  include: DocumentUserIncludeSchema.optional(),
  where: DocumentUserWhereInputSchema.optional(),
  orderBy: z.union([ DocumentUserOrderByWithRelationInputSchema.array(),DocumentUserOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentUserScalarFieldEnumSchema,DocumentUserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentUserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DocumentUserFindFirstOrThrowArgs> = z.object({
  select: DocumentUserSelectSchema.optional(),
  include: DocumentUserIncludeSchema.optional(),
  where: DocumentUserWhereInputSchema.optional(),
  orderBy: z.union([ DocumentUserOrderByWithRelationInputSchema.array(),DocumentUserOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentUserScalarFieldEnumSchema,DocumentUserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentUserFindManyArgsSchema: z.ZodType<Prisma.DocumentUserFindManyArgs> = z.object({
  select: DocumentUserSelectSchema.optional(),
  include: DocumentUserIncludeSchema.optional(),
  where: DocumentUserWhereInputSchema.optional(),
  orderBy: z.union([ DocumentUserOrderByWithRelationInputSchema.array(),DocumentUserOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentUserScalarFieldEnumSchema,DocumentUserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentUserAggregateArgsSchema: z.ZodType<Prisma.DocumentUserAggregateArgs> = z.object({
  where: DocumentUserWhereInputSchema.optional(),
  orderBy: z.union([ DocumentUserOrderByWithRelationInputSchema.array(),DocumentUserOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DocumentUserGroupByArgsSchema: z.ZodType<Prisma.DocumentUserGroupByArgs> = z.object({
  where: DocumentUserWhereInputSchema.optional(),
  orderBy: z.union([ DocumentUserOrderByWithAggregationInputSchema.array(),DocumentUserOrderByWithAggregationInputSchema ]).optional(),
  by: DocumentUserScalarFieldEnumSchema.array(),
  having: DocumentUserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DocumentUserFindUniqueArgsSchema: z.ZodType<Prisma.DocumentUserFindUniqueArgs> = z.object({
  select: DocumentUserSelectSchema.optional(),
  include: DocumentUserIncludeSchema.optional(),
  where: DocumentUserWhereUniqueInputSchema,
}).strict() ;

export const DocumentUserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DocumentUserFindUniqueOrThrowArgs> = z.object({
  select: DocumentUserSelectSchema.optional(),
  include: DocumentUserIncludeSchema.optional(),
  where: DocumentUserWhereUniqueInputSchema,
}).strict() ;

export const DocumentVersionFindFirstArgsSchema: z.ZodType<Prisma.DocumentVersionFindFirstArgs> = z.object({
  select: DocumentVersionSelectSchema.optional(),
  include: DocumentVersionIncludeSchema.optional(),
  where: DocumentVersionWhereInputSchema.optional(),
  orderBy: z.union([ DocumentVersionOrderByWithRelationInputSchema.array(),DocumentVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentVersionScalarFieldEnumSchema,DocumentVersionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentVersionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DocumentVersionFindFirstOrThrowArgs> = z.object({
  select: DocumentVersionSelectSchema.optional(),
  include: DocumentVersionIncludeSchema.optional(),
  where: DocumentVersionWhereInputSchema.optional(),
  orderBy: z.union([ DocumentVersionOrderByWithRelationInputSchema.array(),DocumentVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentVersionScalarFieldEnumSchema,DocumentVersionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentVersionFindManyArgsSchema: z.ZodType<Prisma.DocumentVersionFindManyArgs> = z.object({
  select: DocumentVersionSelectSchema.optional(),
  include: DocumentVersionIncludeSchema.optional(),
  where: DocumentVersionWhereInputSchema.optional(),
  orderBy: z.union([ DocumentVersionOrderByWithRelationInputSchema.array(),DocumentVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentVersionScalarFieldEnumSchema,DocumentVersionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentVersionAggregateArgsSchema: z.ZodType<Prisma.DocumentVersionAggregateArgs> = z.object({
  where: DocumentVersionWhereInputSchema.optional(),
  orderBy: z.union([ DocumentVersionOrderByWithRelationInputSchema.array(),DocumentVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DocumentVersionGroupByArgsSchema: z.ZodType<Prisma.DocumentVersionGroupByArgs> = z.object({
  where: DocumentVersionWhereInputSchema.optional(),
  orderBy: z.union([ DocumentVersionOrderByWithAggregationInputSchema.array(),DocumentVersionOrderByWithAggregationInputSchema ]).optional(),
  by: DocumentVersionScalarFieldEnumSchema.array(),
  having: DocumentVersionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DocumentVersionFindUniqueArgsSchema: z.ZodType<Prisma.DocumentVersionFindUniqueArgs> = z.object({
  select: DocumentVersionSelectSchema.optional(),
  include: DocumentVersionIncludeSchema.optional(),
  where: DocumentVersionWhereUniqueInputSchema,
}).strict() ;

export const DocumentVersionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DocumentVersionFindUniqueOrThrowArgs> = z.object({
  select: DocumentVersionSelectSchema.optional(),
  include: DocumentVersionIncludeSchema.optional(),
  where: DocumentVersionWhereUniqueInputSchema,
}).strict() ;

export const DocumentVersionCreatorFindFirstArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorFindFirstArgs> = z.object({
  select: DocumentVersionCreatorSelectSchema.optional(),
  include: DocumentVersionCreatorIncludeSchema.optional(),
  where: DocumentVersionCreatorWhereInputSchema.optional(),
  orderBy: z.union([ DocumentVersionCreatorOrderByWithRelationInputSchema.array(),DocumentVersionCreatorOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentVersionCreatorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentVersionCreatorScalarFieldEnumSchema,DocumentVersionCreatorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentVersionCreatorFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorFindFirstOrThrowArgs> = z.object({
  select: DocumentVersionCreatorSelectSchema.optional(),
  include: DocumentVersionCreatorIncludeSchema.optional(),
  where: DocumentVersionCreatorWhereInputSchema.optional(),
  orderBy: z.union([ DocumentVersionCreatorOrderByWithRelationInputSchema.array(),DocumentVersionCreatorOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentVersionCreatorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentVersionCreatorScalarFieldEnumSchema,DocumentVersionCreatorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentVersionCreatorFindManyArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorFindManyArgs> = z.object({
  select: DocumentVersionCreatorSelectSchema.optional(),
  include: DocumentVersionCreatorIncludeSchema.optional(),
  where: DocumentVersionCreatorWhereInputSchema.optional(),
  orderBy: z.union([ DocumentVersionCreatorOrderByWithRelationInputSchema.array(),DocumentVersionCreatorOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentVersionCreatorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentVersionCreatorScalarFieldEnumSchema,DocumentVersionCreatorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentVersionCreatorAggregateArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorAggregateArgs> = z.object({
  where: DocumentVersionCreatorWhereInputSchema.optional(),
  orderBy: z.union([ DocumentVersionCreatorOrderByWithRelationInputSchema.array(),DocumentVersionCreatorOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentVersionCreatorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DocumentVersionCreatorGroupByArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorGroupByArgs> = z.object({
  where: DocumentVersionCreatorWhereInputSchema.optional(),
  orderBy: z.union([ DocumentVersionCreatorOrderByWithAggregationInputSchema.array(),DocumentVersionCreatorOrderByWithAggregationInputSchema ]).optional(),
  by: DocumentVersionCreatorScalarFieldEnumSchema.array(),
  having: DocumentVersionCreatorScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DocumentVersionCreatorFindUniqueArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorFindUniqueArgs> = z.object({
  select: DocumentVersionCreatorSelectSchema.optional(),
  include: DocumentVersionCreatorIncludeSchema.optional(),
  where: DocumentVersionCreatorWhereUniqueInputSchema,
}).strict() ;

export const DocumentVersionCreatorFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorFindUniqueOrThrowArgs> = z.object({
  select: DocumentVersionCreatorSelectSchema.optional(),
  include: DocumentVersionCreatorIncludeSchema.optional(),
  where: DocumentVersionCreatorWhereUniqueInputSchema,
}).strict() ;

export const SharedDocumentFindFirstArgsSchema: z.ZodType<Prisma.SharedDocumentFindFirstArgs> = z.object({
  select: SharedDocumentSelectSchema.optional(),
  include: SharedDocumentIncludeSchema.optional(),
  where: SharedDocumentWhereInputSchema.optional(),
  orderBy: z.union([ SharedDocumentOrderByWithRelationInputSchema.array(),SharedDocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: SharedDocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SharedDocumentScalarFieldEnumSchema,SharedDocumentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SharedDocumentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SharedDocumentFindFirstOrThrowArgs> = z.object({
  select: SharedDocumentSelectSchema.optional(),
  include: SharedDocumentIncludeSchema.optional(),
  where: SharedDocumentWhereInputSchema.optional(),
  orderBy: z.union([ SharedDocumentOrderByWithRelationInputSchema.array(),SharedDocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: SharedDocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SharedDocumentScalarFieldEnumSchema,SharedDocumentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SharedDocumentFindManyArgsSchema: z.ZodType<Prisma.SharedDocumentFindManyArgs> = z.object({
  select: SharedDocumentSelectSchema.optional(),
  include: SharedDocumentIncludeSchema.optional(),
  where: SharedDocumentWhereInputSchema.optional(),
  orderBy: z.union([ SharedDocumentOrderByWithRelationInputSchema.array(),SharedDocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: SharedDocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SharedDocumentScalarFieldEnumSchema,SharedDocumentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SharedDocumentAggregateArgsSchema: z.ZodType<Prisma.SharedDocumentAggregateArgs> = z.object({
  where: SharedDocumentWhereInputSchema.optional(),
  orderBy: z.union([ SharedDocumentOrderByWithRelationInputSchema.array(),SharedDocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: SharedDocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SharedDocumentGroupByArgsSchema: z.ZodType<Prisma.SharedDocumentGroupByArgs> = z.object({
  where: SharedDocumentWhereInputSchema.optional(),
  orderBy: z.union([ SharedDocumentOrderByWithAggregationInputSchema.array(),SharedDocumentOrderByWithAggregationInputSchema ]).optional(),
  by: SharedDocumentScalarFieldEnumSchema.array(),
  having: SharedDocumentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SharedDocumentFindUniqueArgsSchema: z.ZodType<Prisma.SharedDocumentFindUniqueArgs> = z.object({
  select: SharedDocumentSelectSchema.optional(),
  include: SharedDocumentIncludeSchema.optional(),
  where: SharedDocumentWhereUniqueInputSchema,
}).strict() ;

export const SharedDocumentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SharedDocumentFindUniqueOrThrowArgs> = z.object({
  select: SharedDocumentSelectSchema.optional(),
  include: SharedDocumentIncludeSchema.optional(),
  where: SharedDocumentWhereUniqueInputSchema,
}).strict() ;

export const WorkflowFindFirstArgsSchema: z.ZodType<Prisma.WorkflowFindFirstArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereInputSchema.optional(),
  orderBy: z.union([ WorkflowOrderByWithRelationInputSchema.array(),WorkflowOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkflowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WorkflowScalarFieldEnumSchema,WorkflowScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WorkflowFindFirstOrThrowArgsSchema: z.ZodType<Prisma.WorkflowFindFirstOrThrowArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereInputSchema.optional(),
  orderBy: z.union([ WorkflowOrderByWithRelationInputSchema.array(),WorkflowOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkflowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WorkflowScalarFieldEnumSchema,WorkflowScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WorkflowFindManyArgsSchema: z.ZodType<Prisma.WorkflowFindManyArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereInputSchema.optional(),
  orderBy: z.union([ WorkflowOrderByWithRelationInputSchema.array(),WorkflowOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkflowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WorkflowScalarFieldEnumSchema,WorkflowScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WorkflowAggregateArgsSchema: z.ZodType<Prisma.WorkflowAggregateArgs> = z.object({
  where: WorkflowWhereInputSchema.optional(),
  orderBy: z.union([ WorkflowOrderByWithRelationInputSchema.array(),WorkflowOrderByWithRelationInputSchema ]).optional(),
  cursor: WorkflowWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WorkflowGroupByArgsSchema: z.ZodType<Prisma.WorkflowGroupByArgs> = z.object({
  where: WorkflowWhereInputSchema.optional(),
  orderBy: z.union([ WorkflowOrderByWithAggregationInputSchema.array(),WorkflowOrderByWithAggregationInputSchema ]).optional(),
  by: WorkflowScalarFieldEnumSchema.array(),
  having: WorkflowScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WorkflowFindUniqueArgsSchema: z.ZodType<Prisma.WorkflowFindUniqueArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereUniqueInputSchema,
}).strict() ;

export const WorkflowFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.WorkflowFindUniqueOrThrowArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereUniqueInputSchema,
}).strict() ;

export const TaskFindFirstArgsSchema: z.ZodType<Prisma.TaskFindFirstArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaskFindFirstOrThrowArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskFindManyArgsSchema: z.ZodType<Prisma.TaskFindManyArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskScalarFieldEnumSchema,TaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskAggregateArgsSchema: z.ZodType<Prisma.TaskAggregateArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithRelationInputSchema.array(),TaskOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TaskGroupByArgsSchema: z.ZodType<Prisma.TaskGroupByArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
  orderBy: z.union([ TaskOrderByWithAggregationInputSchema.array(),TaskOrderByWithAggregationInputSchema ]).optional(),
  by: TaskScalarFieldEnumSchema.array(),
  having: TaskScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TaskFindUniqueArgsSchema: z.ZodType<Prisma.TaskFindUniqueArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const TaskFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaskFindUniqueOrThrowArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const AuditLogFindFirstArgsSchema: z.ZodType<Prisma.AuditLogFindFirstArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AuditLogFindFirstOrThrowArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogFindManyArgsSchema: z.ZodType<Prisma.AuditLogFindManyArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogAggregateArgsSchema: z.ZodType<Prisma.AuditLogAggregateArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AuditLogGroupByArgsSchema: z.ZodType<Prisma.AuditLogGroupByArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithAggregationInputSchema.array(),AuditLogOrderByWithAggregationInputSchema ]).optional(),
  by: AuditLogScalarFieldEnumSchema.array(),
  having: AuditLogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AuditLogFindUniqueArgsSchema: z.ZodType<Prisma.AuditLogFindUniqueArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AuditLogFindUniqueOrThrowArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const NotificationFindFirstArgsSchema: z.ZodType<Prisma.NotificationFindFirstArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([ NotificationOrderByWithRelationInputSchema.array(),NotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NotificationScalarFieldEnumSchema,NotificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NotificationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.NotificationFindFirstOrThrowArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([ NotificationOrderByWithRelationInputSchema.array(),NotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NotificationScalarFieldEnumSchema,NotificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NotificationFindManyArgsSchema: z.ZodType<Prisma.NotificationFindManyArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([ NotificationOrderByWithRelationInputSchema.array(),NotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NotificationScalarFieldEnumSchema,NotificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NotificationAggregateArgsSchema: z.ZodType<Prisma.NotificationAggregateArgs> = z.object({
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([ NotificationOrderByWithRelationInputSchema.array(),NotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const NotificationGroupByArgsSchema: z.ZodType<Prisma.NotificationGroupByArgs> = z.object({
  where: NotificationWhereInputSchema.optional(),
  orderBy: z.union([ NotificationOrderByWithAggregationInputSchema.array(),NotificationOrderByWithAggregationInputSchema ]).optional(),
  by: NotificationScalarFieldEnumSchema.array(),
  having: NotificationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const NotificationFindUniqueArgsSchema: z.ZodType<Prisma.NotificationFindUniqueArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereUniqueInputSchema,
}).strict() ;

export const NotificationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.NotificationFindUniqueOrThrowArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereUniqueInputSchema,
}).strict() ;

export const AttachmentFindFirstArgsSchema: z.ZodType<Prisma.AttachmentFindFirstArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AttachmentScalarFieldEnumSchema,AttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AttachmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AttachmentFindFirstOrThrowArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AttachmentScalarFieldEnumSchema,AttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AttachmentFindManyArgsSchema: z.ZodType<Prisma.AttachmentFindManyArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AttachmentScalarFieldEnumSchema,AttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AttachmentAggregateArgsSchema: z.ZodType<Prisma.AttachmentAggregateArgs> = z.object({
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithRelationInputSchema.array(),AttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: AttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AttachmentGroupByArgsSchema: z.ZodType<Prisma.AttachmentGroupByArgs> = z.object({
  where: AttachmentWhereInputSchema.optional(),
  orderBy: z.union([ AttachmentOrderByWithAggregationInputSchema.array(),AttachmentOrderByWithAggregationInputSchema ]).optional(),
  by: AttachmentScalarFieldEnumSchema.array(),
  having: AttachmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AttachmentFindUniqueArgsSchema: z.ZodType<Prisma.AttachmentFindUniqueArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const AttachmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AttachmentFindUniqueOrThrowArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const DigitalCertificateFindFirstArgsSchema: z.ZodType<Prisma.DigitalCertificateFindFirstArgs> = z.object({
  select: DigitalCertificateSelectSchema.optional(),
  include: DigitalCertificateIncludeSchema.optional(),
  where: DigitalCertificateWhereInputSchema.optional(),
  orderBy: z.union([ DigitalCertificateOrderByWithRelationInputSchema.array(),DigitalCertificateOrderByWithRelationInputSchema ]).optional(),
  cursor: DigitalCertificateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DigitalCertificateScalarFieldEnumSchema,DigitalCertificateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DigitalCertificateFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DigitalCertificateFindFirstOrThrowArgs> = z.object({
  select: DigitalCertificateSelectSchema.optional(),
  include: DigitalCertificateIncludeSchema.optional(),
  where: DigitalCertificateWhereInputSchema.optional(),
  orderBy: z.union([ DigitalCertificateOrderByWithRelationInputSchema.array(),DigitalCertificateOrderByWithRelationInputSchema ]).optional(),
  cursor: DigitalCertificateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DigitalCertificateScalarFieldEnumSchema,DigitalCertificateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DigitalCertificateFindManyArgsSchema: z.ZodType<Prisma.DigitalCertificateFindManyArgs> = z.object({
  select: DigitalCertificateSelectSchema.optional(),
  include: DigitalCertificateIncludeSchema.optional(),
  where: DigitalCertificateWhereInputSchema.optional(),
  orderBy: z.union([ DigitalCertificateOrderByWithRelationInputSchema.array(),DigitalCertificateOrderByWithRelationInputSchema ]).optional(),
  cursor: DigitalCertificateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DigitalCertificateScalarFieldEnumSchema,DigitalCertificateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DigitalCertificateAggregateArgsSchema: z.ZodType<Prisma.DigitalCertificateAggregateArgs> = z.object({
  where: DigitalCertificateWhereInputSchema.optional(),
  orderBy: z.union([ DigitalCertificateOrderByWithRelationInputSchema.array(),DigitalCertificateOrderByWithRelationInputSchema ]).optional(),
  cursor: DigitalCertificateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DigitalCertificateGroupByArgsSchema: z.ZodType<Prisma.DigitalCertificateGroupByArgs> = z.object({
  where: DigitalCertificateWhereInputSchema.optional(),
  orderBy: z.union([ DigitalCertificateOrderByWithAggregationInputSchema.array(),DigitalCertificateOrderByWithAggregationInputSchema ]).optional(),
  by: DigitalCertificateScalarFieldEnumSchema.array(),
  having: DigitalCertificateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DigitalCertificateFindUniqueArgsSchema: z.ZodType<Prisma.DigitalCertificateFindUniqueArgs> = z.object({
  select: DigitalCertificateSelectSchema.optional(),
  include: DigitalCertificateIncludeSchema.optional(),
  where: DigitalCertificateWhereUniqueInputSchema,
}).strict() ;

export const DigitalCertificateFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DigitalCertificateFindUniqueOrThrowArgs> = z.object({
  select: DigitalCertificateSelectSchema.optional(),
  include: DigitalCertificateIncludeSchema.optional(),
  where: DigitalCertificateWhereUniqueInputSchema,
}).strict() ;

export const FileMetadataFindFirstArgsSchema: z.ZodType<Prisma.FileMetadataFindFirstArgs> = z.object({
  select: FileMetadataSelectSchema.optional(),
  include: FileMetadataIncludeSchema.optional(),
  where: FileMetadataWhereInputSchema.optional(),
  orderBy: z.union([ FileMetadataOrderByWithRelationInputSchema.array(),FileMetadataOrderByWithRelationInputSchema ]).optional(),
  cursor: FileMetadataWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FileMetadataScalarFieldEnumSchema,FileMetadataScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FileMetadataFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FileMetadataFindFirstOrThrowArgs> = z.object({
  select: FileMetadataSelectSchema.optional(),
  include: FileMetadataIncludeSchema.optional(),
  where: FileMetadataWhereInputSchema.optional(),
  orderBy: z.union([ FileMetadataOrderByWithRelationInputSchema.array(),FileMetadataOrderByWithRelationInputSchema ]).optional(),
  cursor: FileMetadataWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FileMetadataScalarFieldEnumSchema,FileMetadataScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FileMetadataFindManyArgsSchema: z.ZodType<Prisma.FileMetadataFindManyArgs> = z.object({
  select: FileMetadataSelectSchema.optional(),
  include: FileMetadataIncludeSchema.optional(),
  where: FileMetadataWhereInputSchema.optional(),
  orderBy: z.union([ FileMetadataOrderByWithRelationInputSchema.array(),FileMetadataOrderByWithRelationInputSchema ]).optional(),
  cursor: FileMetadataWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FileMetadataScalarFieldEnumSchema,FileMetadataScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FileMetadataAggregateArgsSchema: z.ZodType<Prisma.FileMetadataAggregateArgs> = z.object({
  where: FileMetadataWhereInputSchema.optional(),
  orderBy: z.union([ FileMetadataOrderByWithRelationInputSchema.array(),FileMetadataOrderByWithRelationInputSchema ]).optional(),
  cursor: FileMetadataWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FileMetadataGroupByArgsSchema: z.ZodType<Prisma.FileMetadataGroupByArgs> = z.object({
  where: FileMetadataWhereInputSchema.optional(),
  orderBy: z.union([ FileMetadataOrderByWithAggregationInputSchema.array(),FileMetadataOrderByWithAggregationInputSchema ]).optional(),
  by: FileMetadataScalarFieldEnumSchema.array(),
  having: FileMetadataScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FileMetadataFindUniqueArgsSchema: z.ZodType<Prisma.FileMetadataFindUniqueArgs> = z.object({
  select: FileMetadataSelectSchema.optional(),
  include: FileMetadataIncludeSchema.optional(),
  where: FileMetadataWhereUniqueInputSchema,
}).strict() ;

export const FileMetadataFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FileMetadataFindUniqueOrThrowArgs> = z.object({
  select: FileMetadataSelectSchema.optional(),
  include: FileMetadataIncludeSchema.optional(),
  where: FileMetadataWhereUniqueInputSchema,
}).strict() ;

export const InstitutionFindFirstArgsSchema: z.ZodType<Prisma.InstitutionFindFirstArgs> = z.object({
  select: InstitutionSelectSchema.optional(),
  include: InstitutionIncludeSchema.optional(),
  where: InstitutionWhereInputSchema.optional(),
  orderBy: z.union([ InstitutionOrderByWithRelationInputSchema.array(),InstitutionOrderByWithRelationInputSchema ]).optional(),
  cursor: InstitutionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InstitutionScalarFieldEnumSchema,InstitutionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InstitutionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InstitutionFindFirstOrThrowArgs> = z.object({
  select: InstitutionSelectSchema.optional(),
  include: InstitutionIncludeSchema.optional(),
  where: InstitutionWhereInputSchema.optional(),
  orderBy: z.union([ InstitutionOrderByWithRelationInputSchema.array(),InstitutionOrderByWithRelationInputSchema ]).optional(),
  cursor: InstitutionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InstitutionScalarFieldEnumSchema,InstitutionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InstitutionFindManyArgsSchema: z.ZodType<Prisma.InstitutionFindManyArgs> = z.object({
  select: InstitutionSelectSchema.optional(),
  include: InstitutionIncludeSchema.optional(),
  where: InstitutionWhereInputSchema.optional(),
  orderBy: z.union([ InstitutionOrderByWithRelationInputSchema.array(),InstitutionOrderByWithRelationInputSchema ]).optional(),
  cursor: InstitutionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InstitutionScalarFieldEnumSchema,InstitutionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InstitutionAggregateArgsSchema: z.ZodType<Prisma.InstitutionAggregateArgs> = z.object({
  where: InstitutionWhereInputSchema.optional(),
  orderBy: z.union([ InstitutionOrderByWithRelationInputSchema.array(),InstitutionOrderByWithRelationInputSchema ]).optional(),
  cursor: InstitutionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InstitutionGroupByArgsSchema: z.ZodType<Prisma.InstitutionGroupByArgs> = z.object({
  where: InstitutionWhereInputSchema.optional(),
  orderBy: z.union([ InstitutionOrderByWithAggregationInputSchema.array(),InstitutionOrderByWithAggregationInputSchema ]).optional(),
  by: InstitutionScalarFieldEnumSchema.array(),
  having: InstitutionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InstitutionFindUniqueArgsSchema: z.ZodType<Prisma.InstitutionFindUniqueArgs> = z.object({
  select: InstitutionSelectSchema.optional(),
  include: InstitutionIncludeSchema.optional(),
  where: InstitutionWhereUniqueInputSchema,
}).strict() ;

export const InstitutionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InstitutionFindUniqueOrThrowArgs> = z.object({
  select: InstitutionSelectSchema.optional(),
  include: InstitutionIncludeSchema.optional(),
  where: InstitutionWhereUniqueInputSchema,
}).strict() ;

export const DepartmentFindFirstArgsSchema: z.ZodType<Prisma.DepartmentFindFirstArgs> = z.object({
  select: DepartmentSelectSchema.optional(),
  include: DepartmentIncludeSchema.optional(),
  where: DepartmentWhereInputSchema.optional(),
  orderBy: z.union([ DepartmentOrderByWithRelationInputSchema.array(),DepartmentOrderByWithRelationInputSchema ]).optional(),
  cursor: DepartmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DepartmentScalarFieldEnumSchema,DepartmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DepartmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DepartmentFindFirstOrThrowArgs> = z.object({
  select: DepartmentSelectSchema.optional(),
  include: DepartmentIncludeSchema.optional(),
  where: DepartmentWhereInputSchema.optional(),
  orderBy: z.union([ DepartmentOrderByWithRelationInputSchema.array(),DepartmentOrderByWithRelationInputSchema ]).optional(),
  cursor: DepartmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DepartmentScalarFieldEnumSchema,DepartmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DepartmentFindManyArgsSchema: z.ZodType<Prisma.DepartmentFindManyArgs> = z.object({
  select: DepartmentSelectSchema.optional(),
  include: DepartmentIncludeSchema.optional(),
  where: DepartmentWhereInputSchema.optional(),
  orderBy: z.union([ DepartmentOrderByWithRelationInputSchema.array(),DepartmentOrderByWithRelationInputSchema ]).optional(),
  cursor: DepartmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DepartmentScalarFieldEnumSchema,DepartmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DepartmentAggregateArgsSchema: z.ZodType<Prisma.DepartmentAggregateArgs> = z.object({
  where: DepartmentWhereInputSchema.optional(),
  orderBy: z.union([ DepartmentOrderByWithRelationInputSchema.array(),DepartmentOrderByWithRelationInputSchema ]).optional(),
  cursor: DepartmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DepartmentGroupByArgsSchema: z.ZodType<Prisma.DepartmentGroupByArgs> = z.object({
  where: DepartmentWhereInputSchema.optional(),
  orderBy: z.union([ DepartmentOrderByWithAggregationInputSchema.array(),DepartmentOrderByWithAggregationInputSchema ]).optional(),
  by: DepartmentScalarFieldEnumSchema.array(),
  having: DepartmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DepartmentFindUniqueArgsSchema: z.ZodType<Prisma.DepartmentFindUniqueArgs> = z.object({
  select: DepartmentSelectSchema.optional(),
  include: DepartmentIncludeSchema.optional(),
  where: DepartmentWhereUniqueInputSchema,
}).strict() ;

export const DepartmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DepartmentFindUniqueOrThrowArgs> = z.object({
  select: DepartmentSelectSchema.optional(),
  include: DepartmentIncludeSchema.optional(),
  where: DepartmentWhereUniqueInputSchema,
}).strict() ;

export const UserDepartmentFindFirstArgsSchema: z.ZodType<Prisma.UserDepartmentFindFirstArgs> = z.object({
  select: UserDepartmentSelectSchema.optional(),
  include: UserDepartmentIncludeSchema.optional(),
  where: UserDepartmentWhereInputSchema.optional(),
  orderBy: z.union([ UserDepartmentOrderByWithRelationInputSchema.array(),UserDepartmentOrderByWithRelationInputSchema ]).optional(),
  cursor: UserDepartmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserDepartmentScalarFieldEnumSchema,UserDepartmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserDepartmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserDepartmentFindFirstOrThrowArgs> = z.object({
  select: UserDepartmentSelectSchema.optional(),
  include: UserDepartmentIncludeSchema.optional(),
  where: UserDepartmentWhereInputSchema.optional(),
  orderBy: z.union([ UserDepartmentOrderByWithRelationInputSchema.array(),UserDepartmentOrderByWithRelationInputSchema ]).optional(),
  cursor: UserDepartmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserDepartmentScalarFieldEnumSchema,UserDepartmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserDepartmentFindManyArgsSchema: z.ZodType<Prisma.UserDepartmentFindManyArgs> = z.object({
  select: UserDepartmentSelectSchema.optional(),
  include: UserDepartmentIncludeSchema.optional(),
  where: UserDepartmentWhereInputSchema.optional(),
  orderBy: z.union([ UserDepartmentOrderByWithRelationInputSchema.array(),UserDepartmentOrderByWithRelationInputSchema ]).optional(),
  cursor: UserDepartmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserDepartmentScalarFieldEnumSchema,UserDepartmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserDepartmentAggregateArgsSchema: z.ZodType<Prisma.UserDepartmentAggregateArgs> = z.object({
  where: UserDepartmentWhereInputSchema.optional(),
  orderBy: z.union([ UserDepartmentOrderByWithRelationInputSchema.array(),UserDepartmentOrderByWithRelationInputSchema ]).optional(),
  cursor: UserDepartmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserDepartmentGroupByArgsSchema: z.ZodType<Prisma.UserDepartmentGroupByArgs> = z.object({
  where: UserDepartmentWhereInputSchema.optional(),
  orderBy: z.union([ UserDepartmentOrderByWithAggregationInputSchema.array(),UserDepartmentOrderByWithAggregationInputSchema ]).optional(),
  by: UserDepartmentScalarFieldEnumSchema.array(),
  having: UserDepartmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserDepartmentFindUniqueArgsSchema: z.ZodType<Prisma.UserDepartmentFindUniqueArgs> = z.object({
  select: UserDepartmentSelectSchema.optional(),
  include: UserDepartmentIncludeSchema.optional(),
  where: UserDepartmentWhereUniqueInputSchema,
}).strict() ;

export const UserDepartmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserDepartmentFindUniqueOrThrowArgs> = z.object({
  select: UserDepartmentSelectSchema.optional(),
  include: UserDepartmentIncludeSchema.optional(),
  where: UserDepartmentWhereUniqueInputSchema,
}).strict() ;

export const TicketFindFirstArgsSchema: z.ZodType<Prisma.TicketFindFirstArgs> = z.object({
  select: TicketSelectSchema.optional(),
  include: TicketIncludeSchema.optional(),
  where: TicketWhereInputSchema.optional(),
  orderBy: z.union([ TicketOrderByWithRelationInputSchema.array(),TicketOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketScalarFieldEnumSchema,TicketScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TicketFindFirstOrThrowArgs> = z.object({
  select: TicketSelectSchema.optional(),
  include: TicketIncludeSchema.optional(),
  where: TicketWhereInputSchema.optional(),
  orderBy: z.union([ TicketOrderByWithRelationInputSchema.array(),TicketOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketScalarFieldEnumSchema,TicketScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketFindManyArgsSchema: z.ZodType<Prisma.TicketFindManyArgs> = z.object({
  select: TicketSelectSchema.optional(),
  include: TicketIncludeSchema.optional(),
  where: TicketWhereInputSchema.optional(),
  orderBy: z.union([ TicketOrderByWithRelationInputSchema.array(),TicketOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketScalarFieldEnumSchema,TicketScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketAggregateArgsSchema: z.ZodType<Prisma.TicketAggregateArgs> = z.object({
  where: TicketWhereInputSchema.optional(),
  orderBy: z.union([ TicketOrderByWithRelationInputSchema.array(),TicketOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketGroupByArgsSchema: z.ZodType<Prisma.TicketGroupByArgs> = z.object({
  where: TicketWhereInputSchema.optional(),
  orderBy: z.union([ TicketOrderByWithAggregationInputSchema.array(),TicketOrderByWithAggregationInputSchema ]).optional(),
  by: TicketScalarFieldEnumSchema.array(),
  having: TicketScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketFindUniqueArgsSchema: z.ZodType<Prisma.TicketFindUniqueArgs> = z.object({
  select: TicketSelectSchema.optional(),
  include: TicketIncludeSchema.optional(),
  where: TicketWhereUniqueInputSchema,
}).strict() ;

export const TicketFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TicketFindUniqueOrThrowArgs> = z.object({
  select: TicketSelectSchema.optional(),
  include: TicketIncludeSchema.optional(),
  where: TicketWhereUniqueInputSchema,
}).strict() ;

export const TicketStatusFindFirstArgsSchema: z.ZodType<Prisma.TicketStatusFindFirstArgs> = z.object({
  select: TicketStatusSelectSchema.optional(),
  include: TicketStatusIncludeSchema.optional(),
  where: TicketStatusWhereInputSchema.optional(),
  orderBy: z.union([ TicketStatusOrderByWithRelationInputSchema.array(),TicketStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketStatusScalarFieldEnumSchema,TicketStatusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketStatusFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TicketStatusFindFirstOrThrowArgs> = z.object({
  select: TicketStatusSelectSchema.optional(),
  include: TicketStatusIncludeSchema.optional(),
  where: TicketStatusWhereInputSchema.optional(),
  orderBy: z.union([ TicketStatusOrderByWithRelationInputSchema.array(),TicketStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketStatusScalarFieldEnumSchema,TicketStatusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketStatusFindManyArgsSchema: z.ZodType<Prisma.TicketStatusFindManyArgs> = z.object({
  select: TicketStatusSelectSchema.optional(),
  include: TicketStatusIncludeSchema.optional(),
  where: TicketStatusWhereInputSchema.optional(),
  orderBy: z.union([ TicketStatusOrderByWithRelationInputSchema.array(),TicketStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketStatusScalarFieldEnumSchema,TicketStatusScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketStatusAggregateArgsSchema: z.ZodType<Prisma.TicketStatusAggregateArgs> = z.object({
  where: TicketStatusWhereInputSchema.optional(),
  orderBy: z.union([ TicketStatusOrderByWithRelationInputSchema.array(),TicketStatusOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketStatusWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketStatusGroupByArgsSchema: z.ZodType<Prisma.TicketStatusGroupByArgs> = z.object({
  where: TicketStatusWhereInputSchema.optional(),
  orderBy: z.union([ TicketStatusOrderByWithAggregationInputSchema.array(),TicketStatusOrderByWithAggregationInputSchema ]).optional(),
  by: TicketStatusScalarFieldEnumSchema.array(),
  having: TicketStatusScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketStatusFindUniqueArgsSchema: z.ZodType<Prisma.TicketStatusFindUniqueArgs> = z.object({
  select: TicketStatusSelectSchema.optional(),
  include: TicketStatusIncludeSchema.optional(),
  where: TicketStatusWhereUniqueInputSchema,
}).strict() ;

export const TicketStatusFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TicketStatusFindUniqueOrThrowArgs> = z.object({
  select: TicketStatusSelectSchema.optional(),
  include: TicketStatusIncludeSchema.optional(),
  where: TicketStatusWhereUniqueInputSchema,
}).strict() ;

export const TicketPriorityFindFirstArgsSchema: z.ZodType<Prisma.TicketPriorityFindFirstArgs> = z.object({
  select: TicketPrioritySelectSchema.optional(),
  include: TicketPriorityIncludeSchema.optional(),
  where: TicketPriorityWhereInputSchema.optional(),
  orderBy: z.union([ TicketPriorityOrderByWithRelationInputSchema.array(),TicketPriorityOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketPriorityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketPriorityScalarFieldEnumSchema,TicketPriorityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketPriorityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TicketPriorityFindFirstOrThrowArgs> = z.object({
  select: TicketPrioritySelectSchema.optional(),
  include: TicketPriorityIncludeSchema.optional(),
  where: TicketPriorityWhereInputSchema.optional(),
  orderBy: z.union([ TicketPriorityOrderByWithRelationInputSchema.array(),TicketPriorityOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketPriorityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketPriorityScalarFieldEnumSchema,TicketPriorityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketPriorityFindManyArgsSchema: z.ZodType<Prisma.TicketPriorityFindManyArgs> = z.object({
  select: TicketPrioritySelectSchema.optional(),
  include: TicketPriorityIncludeSchema.optional(),
  where: TicketPriorityWhereInputSchema.optional(),
  orderBy: z.union([ TicketPriorityOrderByWithRelationInputSchema.array(),TicketPriorityOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketPriorityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketPriorityScalarFieldEnumSchema,TicketPriorityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketPriorityAggregateArgsSchema: z.ZodType<Prisma.TicketPriorityAggregateArgs> = z.object({
  where: TicketPriorityWhereInputSchema.optional(),
  orderBy: z.union([ TicketPriorityOrderByWithRelationInputSchema.array(),TicketPriorityOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketPriorityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketPriorityGroupByArgsSchema: z.ZodType<Prisma.TicketPriorityGroupByArgs> = z.object({
  where: TicketPriorityWhereInputSchema.optional(),
  orderBy: z.union([ TicketPriorityOrderByWithAggregationInputSchema.array(),TicketPriorityOrderByWithAggregationInputSchema ]).optional(),
  by: TicketPriorityScalarFieldEnumSchema.array(),
  having: TicketPriorityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketPriorityFindUniqueArgsSchema: z.ZodType<Prisma.TicketPriorityFindUniqueArgs> = z.object({
  select: TicketPrioritySelectSchema.optional(),
  include: TicketPriorityIncludeSchema.optional(),
  where: TicketPriorityWhereUniqueInputSchema,
}).strict() ;

export const TicketPriorityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TicketPriorityFindUniqueOrThrowArgs> = z.object({
  select: TicketPrioritySelectSchema.optional(),
  include: TicketPriorityIncludeSchema.optional(),
  where: TicketPriorityWhereUniqueInputSchema,
}).strict() ;

export const HelpTopicFindFirstArgsSchema: z.ZodType<Prisma.HelpTopicFindFirstArgs> = z.object({
  select: HelpTopicSelectSchema.optional(),
  include: HelpTopicIncludeSchema.optional(),
  where: HelpTopicWhereInputSchema.optional(),
  orderBy: z.union([ HelpTopicOrderByWithRelationInputSchema.array(),HelpTopicOrderByWithRelationInputSchema ]).optional(),
  cursor: HelpTopicWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ HelpTopicScalarFieldEnumSchema,HelpTopicScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const HelpTopicFindFirstOrThrowArgsSchema: z.ZodType<Prisma.HelpTopicFindFirstOrThrowArgs> = z.object({
  select: HelpTopicSelectSchema.optional(),
  include: HelpTopicIncludeSchema.optional(),
  where: HelpTopicWhereInputSchema.optional(),
  orderBy: z.union([ HelpTopicOrderByWithRelationInputSchema.array(),HelpTopicOrderByWithRelationInputSchema ]).optional(),
  cursor: HelpTopicWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ HelpTopicScalarFieldEnumSchema,HelpTopicScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const HelpTopicFindManyArgsSchema: z.ZodType<Prisma.HelpTopicFindManyArgs> = z.object({
  select: HelpTopicSelectSchema.optional(),
  include: HelpTopicIncludeSchema.optional(),
  where: HelpTopicWhereInputSchema.optional(),
  orderBy: z.union([ HelpTopicOrderByWithRelationInputSchema.array(),HelpTopicOrderByWithRelationInputSchema ]).optional(),
  cursor: HelpTopicWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ HelpTopicScalarFieldEnumSchema,HelpTopicScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const HelpTopicAggregateArgsSchema: z.ZodType<Prisma.HelpTopicAggregateArgs> = z.object({
  where: HelpTopicWhereInputSchema.optional(),
  orderBy: z.union([ HelpTopicOrderByWithRelationInputSchema.array(),HelpTopicOrderByWithRelationInputSchema ]).optional(),
  cursor: HelpTopicWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const HelpTopicGroupByArgsSchema: z.ZodType<Prisma.HelpTopicGroupByArgs> = z.object({
  where: HelpTopicWhereInputSchema.optional(),
  orderBy: z.union([ HelpTopicOrderByWithAggregationInputSchema.array(),HelpTopicOrderByWithAggregationInputSchema ]).optional(),
  by: HelpTopicScalarFieldEnumSchema.array(),
  having: HelpTopicScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const HelpTopicFindUniqueArgsSchema: z.ZodType<Prisma.HelpTopicFindUniqueArgs> = z.object({
  select: HelpTopicSelectSchema.optional(),
  include: HelpTopicIncludeSchema.optional(),
  where: HelpTopicWhereUniqueInputSchema,
}).strict() ;

export const HelpTopicFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.HelpTopicFindUniqueOrThrowArgs> = z.object({
  select: HelpTopicSelectSchema.optional(),
  include: HelpTopicIncludeSchema.optional(),
  where: HelpTopicWhereUniqueInputSchema,
}).strict() ;

export const SLAPlanFindFirstArgsSchema: z.ZodType<Prisma.SLAPlanFindFirstArgs> = z.object({
  select: SLAPlanSelectSchema.optional(),
  include: SLAPlanIncludeSchema.optional(),
  where: SLAPlanWhereInputSchema.optional(),
  orderBy: z.union([ SLAPlanOrderByWithRelationInputSchema.array(),SLAPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: SLAPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SLAPlanScalarFieldEnumSchema,SLAPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SLAPlanFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SLAPlanFindFirstOrThrowArgs> = z.object({
  select: SLAPlanSelectSchema.optional(),
  include: SLAPlanIncludeSchema.optional(),
  where: SLAPlanWhereInputSchema.optional(),
  orderBy: z.union([ SLAPlanOrderByWithRelationInputSchema.array(),SLAPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: SLAPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SLAPlanScalarFieldEnumSchema,SLAPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SLAPlanFindManyArgsSchema: z.ZodType<Prisma.SLAPlanFindManyArgs> = z.object({
  select: SLAPlanSelectSchema.optional(),
  include: SLAPlanIncludeSchema.optional(),
  where: SLAPlanWhereInputSchema.optional(),
  orderBy: z.union([ SLAPlanOrderByWithRelationInputSchema.array(),SLAPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: SLAPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SLAPlanScalarFieldEnumSchema,SLAPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SLAPlanAggregateArgsSchema: z.ZodType<Prisma.SLAPlanAggregateArgs> = z.object({
  where: SLAPlanWhereInputSchema.optional(),
  orderBy: z.union([ SLAPlanOrderByWithRelationInputSchema.array(),SLAPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: SLAPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SLAPlanGroupByArgsSchema: z.ZodType<Prisma.SLAPlanGroupByArgs> = z.object({
  where: SLAPlanWhereInputSchema.optional(),
  orderBy: z.union([ SLAPlanOrderByWithAggregationInputSchema.array(),SLAPlanOrderByWithAggregationInputSchema ]).optional(),
  by: SLAPlanScalarFieldEnumSchema.array(),
  having: SLAPlanScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SLAPlanFindUniqueArgsSchema: z.ZodType<Prisma.SLAPlanFindUniqueArgs> = z.object({
  select: SLAPlanSelectSchema.optional(),
  include: SLAPlanIncludeSchema.optional(),
  where: SLAPlanWhereUniqueInputSchema,
}).strict() ;

export const SLAPlanFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SLAPlanFindUniqueOrThrowArgs> = z.object({
  select: SLAPlanSelectSchema.optional(),
  include: SLAPlanIncludeSchema.optional(),
  where: SLAPlanWhereUniqueInputSchema,
}).strict() ;

export const TicketThreadFindFirstArgsSchema: z.ZodType<Prisma.TicketThreadFindFirstArgs> = z.object({
  select: TicketThreadSelectSchema.optional(),
  include: TicketThreadIncludeSchema.optional(),
  where: TicketThreadWhereInputSchema.optional(),
  orderBy: z.union([ TicketThreadOrderByWithRelationInputSchema.array(),TicketThreadOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketThreadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketThreadScalarFieldEnumSchema,TicketThreadScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketThreadFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TicketThreadFindFirstOrThrowArgs> = z.object({
  select: TicketThreadSelectSchema.optional(),
  include: TicketThreadIncludeSchema.optional(),
  where: TicketThreadWhereInputSchema.optional(),
  orderBy: z.union([ TicketThreadOrderByWithRelationInputSchema.array(),TicketThreadOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketThreadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketThreadScalarFieldEnumSchema,TicketThreadScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketThreadFindManyArgsSchema: z.ZodType<Prisma.TicketThreadFindManyArgs> = z.object({
  select: TicketThreadSelectSchema.optional(),
  include: TicketThreadIncludeSchema.optional(),
  where: TicketThreadWhereInputSchema.optional(),
  orderBy: z.union([ TicketThreadOrderByWithRelationInputSchema.array(),TicketThreadOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketThreadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketThreadScalarFieldEnumSchema,TicketThreadScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketThreadAggregateArgsSchema: z.ZodType<Prisma.TicketThreadAggregateArgs> = z.object({
  where: TicketThreadWhereInputSchema.optional(),
  orderBy: z.union([ TicketThreadOrderByWithRelationInputSchema.array(),TicketThreadOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketThreadWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketThreadGroupByArgsSchema: z.ZodType<Prisma.TicketThreadGroupByArgs> = z.object({
  where: TicketThreadWhereInputSchema.optional(),
  orderBy: z.union([ TicketThreadOrderByWithAggregationInputSchema.array(),TicketThreadOrderByWithAggregationInputSchema ]).optional(),
  by: TicketThreadScalarFieldEnumSchema.array(),
  having: TicketThreadScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketThreadFindUniqueArgsSchema: z.ZodType<Prisma.TicketThreadFindUniqueArgs> = z.object({
  select: TicketThreadSelectSchema.optional(),
  include: TicketThreadIncludeSchema.optional(),
  where: TicketThreadWhereUniqueInputSchema,
}).strict() ;

export const TicketThreadFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TicketThreadFindUniqueOrThrowArgs> = z.object({
  select: TicketThreadSelectSchema.optional(),
  include: TicketThreadIncludeSchema.optional(),
  where: TicketThreadWhereUniqueInputSchema,
}).strict() ;

export const TicketAttachmentFindFirstArgsSchema: z.ZodType<Prisma.TicketAttachmentFindFirstArgs> = z.object({
  select: TicketAttachmentSelectSchema.optional(),
  include: TicketAttachmentIncludeSchema.optional(),
  where: TicketAttachmentWhereInputSchema.optional(),
  orderBy: z.union([ TicketAttachmentOrderByWithRelationInputSchema.array(),TicketAttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketAttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketAttachmentScalarFieldEnumSchema,TicketAttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketAttachmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TicketAttachmentFindFirstOrThrowArgs> = z.object({
  select: TicketAttachmentSelectSchema.optional(),
  include: TicketAttachmentIncludeSchema.optional(),
  where: TicketAttachmentWhereInputSchema.optional(),
  orderBy: z.union([ TicketAttachmentOrderByWithRelationInputSchema.array(),TicketAttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketAttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketAttachmentScalarFieldEnumSchema,TicketAttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketAttachmentFindManyArgsSchema: z.ZodType<Prisma.TicketAttachmentFindManyArgs> = z.object({
  select: TicketAttachmentSelectSchema.optional(),
  include: TicketAttachmentIncludeSchema.optional(),
  where: TicketAttachmentWhereInputSchema.optional(),
  orderBy: z.union([ TicketAttachmentOrderByWithRelationInputSchema.array(),TicketAttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketAttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketAttachmentScalarFieldEnumSchema,TicketAttachmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketAttachmentAggregateArgsSchema: z.ZodType<Prisma.TicketAttachmentAggregateArgs> = z.object({
  where: TicketAttachmentWhereInputSchema.optional(),
  orderBy: z.union([ TicketAttachmentOrderByWithRelationInputSchema.array(),TicketAttachmentOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketAttachmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketAttachmentGroupByArgsSchema: z.ZodType<Prisma.TicketAttachmentGroupByArgs> = z.object({
  where: TicketAttachmentWhereInputSchema.optional(),
  orderBy: z.union([ TicketAttachmentOrderByWithAggregationInputSchema.array(),TicketAttachmentOrderByWithAggregationInputSchema ]).optional(),
  by: TicketAttachmentScalarFieldEnumSchema.array(),
  having: TicketAttachmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketAttachmentFindUniqueArgsSchema: z.ZodType<Prisma.TicketAttachmentFindUniqueArgs> = z.object({
  select: TicketAttachmentSelectSchema.optional(),
  include: TicketAttachmentIncludeSchema.optional(),
  where: TicketAttachmentWhereUniqueInputSchema,
}).strict() ;

export const TicketAttachmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TicketAttachmentFindUniqueOrThrowArgs> = z.object({
  select: TicketAttachmentSelectSchema.optional(),
  include: TicketAttachmentIncludeSchema.optional(),
  where: TicketAttachmentWhereUniqueInputSchema,
}).strict() ;

export const TicketCollaboratorFindFirstArgsSchema: z.ZodType<Prisma.TicketCollaboratorFindFirstArgs> = z.object({
  select: TicketCollaboratorSelectSchema.optional(),
  include: TicketCollaboratorIncludeSchema.optional(),
  where: TicketCollaboratorWhereInputSchema.optional(),
  orderBy: z.union([ TicketCollaboratorOrderByWithRelationInputSchema.array(),TicketCollaboratorOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketCollaboratorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketCollaboratorScalarFieldEnumSchema,TicketCollaboratorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketCollaboratorFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TicketCollaboratorFindFirstOrThrowArgs> = z.object({
  select: TicketCollaboratorSelectSchema.optional(),
  include: TicketCollaboratorIncludeSchema.optional(),
  where: TicketCollaboratorWhereInputSchema.optional(),
  orderBy: z.union([ TicketCollaboratorOrderByWithRelationInputSchema.array(),TicketCollaboratorOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketCollaboratorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketCollaboratorScalarFieldEnumSchema,TicketCollaboratorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketCollaboratorFindManyArgsSchema: z.ZodType<Prisma.TicketCollaboratorFindManyArgs> = z.object({
  select: TicketCollaboratorSelectSchema.optional(),
  include: TicketCollaboratorIncludeSchema.optional(),
  where: TicketCollaboratorWhereInputSchema.optional(),
  orderBy: z.union([ TicketCollaboratorOrderByWithRelationInputSchema.array(),TicketCollaboratorOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketCollaboratorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketCollaboratorScalarFieldEnumSchema,TicketCollaboratorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketCollaboratorAggregateArgsSchema: z.ZodType<Prisma.TicketCollaboratorAggregateArgs> = z.object({
  where: TicketCollaboratorWhereInputSchema.optional(),
  orderBy: z.union([ TicketCollaboratorOrderByWithRelationInputSchema.array(),TicketCollaboratorOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketCollaboratorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketCollaboratorGroupByArgsSchema: z.ZodType<Prisma.TicketCollaboratorGroupByArgs> = z.object({
  where: TicketCollaboratorWhereInputSchema.optional(),
  orderBy: z.union([ TicketCollaboratorOrderByWithAggregationInputSchema.array(),TicketCollaboratorOrderByWithAggregationInputSchema ]).optional(),
  by: TicketCollaboratorScalarFieldEnumSchema.array(),
  having: TicketCollaboratorScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketCollaboratorFindUniqueArgsSchema: z.ZodType<Prisma.TicketCollaboratorFindUniqueArgs> = z.object({
  select: TicketCollaboratorSelectSchema.optional(),
  include: TicketCollaboratorIncludeSchema.optional(),
  where: TicketCollaboratorWhereUniqueInputSchema,
}).strict() ;

export const TicketCollaboratorFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TicketCollaboratorFindUniqueOrThrowArgs> = z.object({
  select: TicketCollaboratorSelectSchema.optional(),
  include: TicketCollaboratorIncludeSchema.optional(),
  where: TicketCollaboratorWhereUniqueInputSchema,
}).strict() ;

export const CustomFieldFindFirstArgsSchema: z.ZodType<Prisma.CustomFieldFindFirstArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ CustomFieldOrderByWithRelationInputSchema.array(),CustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomFieldScalarFieldEnumSchema,CustomFieldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomFieldFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CustomFieldFindFirstOrThrowArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ CustomFieldOrderByWithRelationInputSchema.array(),CustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomFieldScalarFieldEnumSchema,CustomFieldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomFieldFindManyArgsSchema: z.ZodType<Prisma.CustomFieldFindManyArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ CustomFieldOrderByWithRelationInputSchema.array(),CustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomFieldScalarFieldEnumSchema,CustomFieldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomFieldAggregateArgsSchema: z.ZodType<Prisma.CustomFieldAggregateArgs> = z.object({
  where: CustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ CustomFieldOrderByWithRelationInputSchema.array(),CustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomFieldGroupByArgsSchema: z.ZodType<Prisma.CustomFieldGroupByArgs> = z.object({
  where: CustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ CustomFieldOrderByWithAggregationInputSchema.array(),CustomFieldOrderByWithAggregationInputSchema ]).optional(),
  by: CustomFieldScalarFieldEnumSchema.array(),
  having: CustomFieldScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomFieldFindUniqueArgsSchema: z.ZodType<Prisma.CustomFieldFindUniqueArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereUniqueInputSchema,
}).strict() ;

export const CustomFieldFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CustomFieldFindUniqueOrThrowArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereUniqueInputSchema,
}).strict() ;

export const TicketCustomFieldFindFirstArgsSchema: z.ZodType<Prisma.TicketCustomFieldFindFirstArgs> = z.object({
  select: TicketCustomFieldSelectSchema.optional(),
  include: TicketCustomFieldIncludeSchema.optional(),
  where: TicketCustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ TicketCustomFieldOrderByWithRelationInputSchema.array(),TicketCustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketCustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketCustomFieldScalarFieldEnumSchema,TicketCustomFieldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketCustomFieldFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TicketCustomFieldFindFirstOrThrowArgs> = z.object({
  select: TicketCustomFieldSelectSchema.optional(),
  include: TicketCustomFieldIncludeSchema.optional(),
  where: TicketCustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ TicketCustomFieldOrderByWithRelationInputSchema.array(),TicketCustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketCustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketCustomFieldScalarFieldEnumSchema,TicketCustomFieldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketCustomFieldFindManyArgsSchema: z.ZodType<Prisma.TicketCustomFieldFindManyArgs> = z.object({
  select: TicketCustomFieldSelectSchema.optional(),
  include: TicketCustomFieldIncludeSchema.optional(),
  where: TicketCustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ TicketCustomFieldOrderByWithRelationInputSchema.array(),TicketCustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketCustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketCustomFieldScalarFieldEnumSchema,TicketCustomFieldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketCustomFieldAggregateArgsSchema: z.ZodType<Prisma.TicketCustomFieldAggregateArgs> = z.object({
  where: TicketCustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ TicketCustomFieldOrderByWithRelationInputSchema.array(),TicketCustomFieldOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketCustomFieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketCustomFieldGroupByArgsSchema: z.ZodType<Prisma.TicketCustomFieldGroupByArgs> = z.object({
  where: TicketCustomFieldWhereInputSchema.optional(),
  orderBy: z.union([ TicketCustomFieldOrderByWithAggregationInputSchema.array(),TicketCustomFieldOrderByWithAggregationInputSchema ]).optional(),
  by: TicketCustomFieldScalarFieldEnumSchema.array(),
  having: TicketCustomFieldScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketCustomFieldFindUniqueArgsSchema: z.ZodType<Prisma.TicketCustomFieldFindUniqueArgs> = z.object({
  select: TicketCustomFieldSelectSchema.optional(),
  include: TicketCustomFieldIncludeSchema.optional(),
  where: TicketCustomFieldWhereUniqueInputSchema,
}).strict() ;

export const TicketCustomFieldFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TicketCustomFieldFindUniqueOrThrowArgs> = z.object({
  select: TicketCustomFieldSelectSchema.optional(),
  include: TicketCustomFieldIncludeSchema.optional(),
  where: TicketCustomFieldWhereUniqueInputSchema,
}).strict() ;

export const TaskUserFindFirstArgsSchema: z.ZodType<Prisma.TaskUserFindFirstArgs> = z.object({
  select: TaskUserSelectSchema.optional(),
  include: TaskUserIncludeSchema.optional(),
  where: TaskUserWhereInputSchema.optional(),
  orderBy: z.union([ TaskUserOrderByWithRelationInputSchema.array(),TaskUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskUserScalarFieldEnumSchema,TaskUserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskUserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaskUserFindFirstOrThrowArgs> = z.object({
  select: TaskUserSelectSchema.optional(),
  include: TaskUserIncludeSchema.optional(),
  where: TaskUserWhereInputSchema.optional(),
  orderBy: z.union([ TaskUserOrderByWithRelationInputSchema.array(),TaskUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskUserScalarFieldEnumSchema,TaskUserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskUserFindManyArgsSchema: z.ZodType<Prisma.TaskUserFindManyArgs> = z.object({
  select: TaskUserSelectSchema.optional(),
  include: TaskUserIncludeSchema.optional(),
  where: TaskUserWhereInputSchema.optional(),
  orderBy: z.union([ TaskUserOrderByWithRelationInputSchema.array(),TaskUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TaskUserScalarFieldEnumSchema,TaskUserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TaskUserAggregateArgsSchema: z.ZodType<Prisma.TaskUserAggregateArgs> = z.object({
  where: TaskUserWhereInputSchema.optional(),
  orderBy: z.union([ TaskUserOrderByWithRelationInputSchema.array(),TaskUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TaskUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TaskUserGroupByArgsSchema: z.ZodType<Prisma.TaskUserGroupByArgs> = z.object({
  where: TaskUserWhereInputSchema.optional(),
  orderBy: z.union([ TaskUserOrderByWithAggregationInputSchema.array(),TaskUserOrderByWithAggregationInputSchema ]).optional(),
  by: TaskUserScalarFieldEnumSchema.array(),
  having: TaskUserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TaskUserFindUniqueArgsSchema: z.ZodType<Prisma.TaskUserFindUniqueArgs> = z.object({
  select: TaskUserSelectSchema.optional(),
  include: TaskUserIncludeSchema.optional(),
  where: TaskUserWhereUniqueInputSchema,
}).strict() ;

export const TaskUserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaskUserFindUniqueOrThrowArgs> = z.object({
  select: TaskUserSelectSchema.optional(),
  include: TaskUserIncludeSchema.optional(),
  where: TaskUserWhereUniqueInputSchema,
}).strict() ;

export const TicketUserFindFirstArgsSchema: z.ZodType<Prisma.TicketUserFindFirstArgs> = z.object({
  select: TicketUserSelectSchema.optional(),
  include: TicketUserIncludeSchema.optional(),
  where: TicketUserWhereInputSchema.optional(),
  orderBy: z.union([ TicketUserOrderByWithRelationInputSchema.array(),TicketUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketUserScalarFieldEnumSchema,TicketUserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketUserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TicketUserFindFirstOrThrowArgs> = z.object({
  select: TicketUserSelectSchema.optional(),
  include: TicketUserIncludeSchema.optional(),
  where: TicketUserWhereInputSchema.optional(),
  orderBy: z.union([ TicketUserOrderByWithRelationInputSchema.array(),TicketUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketUserScalarFieldEnumSchema,TicketUserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketUserFindManyArgsSchema: z.ZodType<Prisma.TicketUserFindManyArgs> = z.object({
  select: TicketUserSelectSchema.optional(),
  include: TicketUserIncludeSchema.optional(),
  where: TicketUserWhereInputSchema.optional(),
  orderBy: z.union([ TicketUserOrderByWithRelationInputSchema.array(),TicketUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TicketUserScalarFieldEnumSchema,TicketUserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TicketUserAggregateArgsSchema: z.ZodType<Prisma.TicketUserAggregateArgs> = z.object({
  where: TicketUserWhereInputSchema.optional(),
  orderBy: z.union([ TicketUserOrderByWithRelationInputSchema.array(),TicketUserOrderByWithRelationInputSchema ]).optional(),
  cursor: TicketUserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketUserGroupByArgsSchema: z.ZodType<Prisma.TicketUserGroupByArgs> = z.object({
  where: TicketUserWhereInputSchema.optional(),
  orderBy: z.union([ TicketUserOrderByWithAggregationInputSchema.array(),TicketUserOrderByWithAggregationInputSchema ]).optional(),
  by: TicketUserScalarFieldEnumSchema.array(),
  having: TicketUserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TicketUserFindUniqueArgsSchema: z.ZodType<Prisma.TicketUserFindUniqueArgs> = z.object({
  select: TicketUserSelectSchema.optional(),
  include: TicketUserIncludeSchema.optional(),
  where: TicketUserWhereUniqueInputSchema,
}).strict() ;

export const TicketUserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TicketUserFindUniqueOrThrowArgs> = z.object({
  select: TicketUserSelectSchema.optional(),
  include: TicketUserIncludeSchema.optional(),
  where: TicketUserWhereUniqueInputSchema,
}).strict() ;

export const back3nd_userFindFirstArgsSchema: z.ZodType<Prisma.back3nd_userFindFirstArgs> = z.object({
  select: back3nd_userSelectSchema.optional(),
  include: back3nd_userIncludeSchema.optional(),
  where: back3nd_userWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_userOrderByWithRelationInputSchema.array(),back3nd_userOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_userScalarFieldEnumSchema,Back3nd_userScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_userFindFirstOrThrowArgsSchema: z.ZodType<Prisma.back3nd_userFindFirstOrThrowArgs> = z.object({
  select: back3nd_userSelectSchema.optional(),
  include: back3nd_userIncludeSchema.optional(),
  where: back3nd_userWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_userOrderByWithRelationInputSchema.array(),back3nd_userOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_userScalarFieldEnumSchema,Back3nd_userScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_userFindManyArgsSchema: z.ZodType<Prisma.back3nd_userFindManyArgs> = z.object({
  select: back3nd_userSelectSchema.optional(),
  include: back3nd_userIncludeSchema.optional(),
  where: back3nd_userWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_userOrderByWithRelationInputSchema.array(),back3nd_userOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_userScalarFieldEnumSchema,Back3nd_userScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_userAggregateArgsSchema: z.ZodType<Prisma.back3nd_userAggregateArgs> = z.object({
  where: back3nd_userWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_userOrderByWithRelationInputSchema.array(),back3nd_userOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_userWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const back3nd_userGroupByArgsSchema: z.ZodType<Prisma.back3nd_userGroupByArgs> = z.object({
  where: back3nd_userWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_userOrderByWithAggregationInputSchema.array(),back3nd_userOrderByWithAggregationInputSchema ]).optional(),
  by: Back3nd_userScalarFieldEnumSchema.array(),
  having: back3nd_userScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const back3nd_userFindUniqueArgsSchema: z.ZodType<Prisma.back3nd_userFindUniqueArgs> = z.object({
  select: back3nd_userSelectSchema.optional(),
  include: back3nd_userIncludeSchema.optional(),
  where: back3nd_userWhereUniqueInputSchema,
}).strict() ;

export const back3nd_userFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.back3nd_userFindUniqueOrThrowArgs> = z.object({
  select: back3nd_userSelectSchema.optional(),
  include: back3nd_userIncludeSchema.optional(),
  where: back3nd_userWhereUniqueInputSchema,
}).strict() ;

export const back3nd_roleFindFirstArgsSchema: z.ZodType<Prisma.back3nd_roleFindFirstArgs> = z.object({
  select: back3nd_roleSelectSchema.optional(),
  include: back3nd_roleIncludeSchema.optional(),
  where: back3nd_roleWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_roleOrderByWithRelationInputSchema.array(),back3nd_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_roleScalarFieldEnumSchema,Back3nd_roleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_roleFindFirstOrThrowArgsSchema: z.ZodType<Prisma.back3nd_roleFindFirstOrThrowArgs> = z.object({
  select: back3nd_roleSelectSchema.optional(),
  include: back3nd_roleIncludeSchema.optional(),
  where: back3nd_roleWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_roleOrderByWithRelationInputSchema.array(),back3nd_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_roleScalarFieldEnumSchema,Back3nd_roleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_roleFindManyArgsSchema: z.ZodType<Prisma.back3nd_roleFindManyArgs> = z.object({
  select: back3nd_roleSelectSchema.optional(),
  include: back3nd_roleIncludeSchema.optional(),
  where: back3nd_roleWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_roleOrderByWithRelationInputSchema.array(),back3nd_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_roleScalarFieldEnumSchema,Back3nd_roleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_roleAggregateArgsSchema: z.ZodType<Prisma.back3nd_roleAggregateArgs> = z.object({
  where: back3nd_roleWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_roleOrderByWithRelationInputSchema.array(),back3nd_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const back3nd_roleGroupByArgsSchema: z.ZodType<Prisma.back3nd_roleGroupByArgs> = z.object({
  where: back3nd_roleWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_roleOrderByWithAggregationInputSchema.array(),back3nd_roleOrderByWithAggregationInputSchema ]).optional(),
  by: Back3nd_roleScalarFieldEnumSchema.array(),
  having: back3nd_roleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const back3nd_roleFindUniqueArgsSchema: z.ZodType<Prisma.back3nd_roleFindUniqueArgs> = z.object({
  select: back3nd_roleSelectSchema.optional(),
  include: back3nd_roleIncludeSchema.optional(),
  where: back3nd_roleWhereUniqueInputSchema,
}).strict() ;

export const back3nd_roleFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.back3nd_roleFindUniqueOrThrowArgs> = z.object({
  select: back3nd_roleSelectSchema.optional(),
  include: back3nd_roleIncludeSchema.optional(),
  where: back3nd_roleWhereUniqueInputSchema,
}).strict() ;

export const back3nd_user_roleFindFirstArgsSchema: z.ZodType<Prisma.back3nd_user_roleFindFirstArgs> = z.object({
  select: back3nd_user_roleSelectSchema.optional(),
  include: back3nd_user_roleIncludeSchema.optional(),
  where: back3nd_user_roleWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_user_roleOrderByWithRelationInputSchema.array(),back3nd_user_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_user_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_user_roleScalarFieldEnumSchema,Back3nd_user_roleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_user_roleFindFirstOrThrowArgsSchema: z.ZodType<Prisma.back3nd_user_roleFindFirstOrThrowArgs> = z.object({
  select: back3nd_user_roleSelectSchema.optional(),
  include: back3nd_user_roleIncludeSchema.optional(),
  where: back3nd_user_roleWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_user_roleOrderByWithRelationInputSchema.array(),back3nd_user_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_user_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_user_roleScalarFieldEnumSchema,Back3nd_user_roleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_user_roleFindManyArgsSchema: z.ZodType<Prisma.back3nd_user_roleFindManyArgs> = z.object({
  select: back3nd_user_roleSelectSchema.optional(),
  include: back3nd_user_roleIncludeSchema.optional(),
  where: back3nd_user_roleWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_user_roleOrderByWithRelationInputSchema.array(),back3nd_user_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_user_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_user_roleScalarFieldEnumSchema,Back3nd_user_roleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_user_roleAggregateArgsSchema: z.ZodType<Prisma.back3nd_user_roleAggregateArgs> = z.object({
  where: back3nd_user_roleWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_user_roleOrderByWithRelationInputSchema.array(),back3nd_user_roleOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_user_roleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const back3nd_user_roleGroupByArgsSchema: z.ZodType<Prisma.back3nd_user_roleGroupByArgs> = z.object({
  where: back3nd_user_roleWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_user_roleOrderByWithAggregationInputSchema.array(),back3nd_user_roleOrderByWithAggregationInputSchema ]).optional(),
  by: Back3nd_user_roleScalarFieldEnumSchema.array(),
  having: back3nd_user_roleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const back3nd_user_roleFindUniqueArgsSchema: z.ZodType<Prisma.back3nd_user_roleFindUniqueArgs> = z.object({
  select: back3nd_user_roleSelectSchema.optional(),
  include: back3nd_user_roleIncludeSchema.optional(),
  where: back3nd_user_roleWhereUniqueInputSchema,
}).strict() ;

export const back3nd_user_roleFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.back3nd_user_roleFindUniqueOrThrowArgs> = z.object({
  select: back3nd_user_roleSelectSchema.optional(),
  include: back3nd_user_roleIncludeSchema.optional(),
  where: back3nd_user_roleWhereUniqueInputSchema,
}).strict() ;

export const back3nd_permissionFindFirstArgsSchema: z.ZodType<Prisma.back3nd_permissionFindFirstArgs> = z.object({
  select: back3nd_permissionSelectSchema.optional(),
  include: back3nd_permissionIncludeSchema.optional(),
  where: back3nd_permissionWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_permissionOrderByWithRelationInputSchema.array(),back3nd_permissionOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_permissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_permissionScalarFieldEnumSchema,Back3nd_permissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_permissionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.back3nd_permissionFindFirstOrThrowArgs> = z.object({
  select: back3nd_permissionSelectSchema.optional(),
  include: back3nd_permissionIncludeSchema.optional(),
  where: back3nd_permissionWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_permissionOrderByWithRelationInputSchema.array(),back3nd_permissionOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_permissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_permissionScalarFieldEnumSchema,Back3nd_permissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_permissionFindManyArgsSchema: z.ZodType<Prisma.back3nd_permissionFindManyArgs> = z.object({
  select: back3nd_permissionSelectSchema.optional(),
  include: back3nd_permissionIncludeSchema.optional(),
  where: back3nd_permissionWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_permissionOrderByWithRelationInputSchema.array(),back3nd_permissionOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_permissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_permissionScalarFieldEnumSchema,Back3nd_permissionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_permissionAggregateArgsSchema: z.ZodType<Prisma.back3nd_permissionAggregateArgs> = z.object({
  where: back3nd_permissionWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_permissionOrderByWithRelationInputSchema.array(),back3nd_permissionOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_permissionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const back3nd_permissionGroupByArgsSchema: z.ZodType<Prisma.back3nd_permissionGroupByArgs> = z.object({
  where: back3nd_permissionWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_permissionOrderByWithAggregationInputSchema.array(),back3nd_permissionOrderByWithAggregationInputSchema ]).optional(),
  by: Back3nd_permissionScalarFieldEnumSchema.array(),
  having: back3nd_permissionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const back3nd_permissionFindUniqueArgsSchema: z.ZodType<Prisma.back3nd_permissionFindUniqueArgs> = z.object({
  select: back3nd_permissionSelectSchema.optional(),
  include: back3nd_permissionIncludeSchema.optional(),
  where: back3nd_permissionWhereUniqueInputSchema,
}).strict() ;

export const back3nd_permissionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.back3nd_permissionFindUniqueOrThrowArgs> = z.object({
  select: back3nd_permissionSelectSchema.optional(),
  include: back3nd_permissionIncludeSchema.optional(),
  where: back3nd_permissionWhereUniqueInputSchema,
}).strict() ;

export const back3nd_password_resetFindFirstArgsSchema: z.ZodType<Prisma.back3nd_password_resetFindFirstArgs> = z.object({
  select: back3nd_password_resetSelectSchema.optional(),
  include: back3nd_password_resetIncludeSchema.optional(),
  where: back3nd_password_resetWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_password_resetOrderByWithRelationInputSchema.array(),back3nd_password_resetOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_password_resetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_password_resetScalarFieldEnumSchema,Back3nd_password_resetScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_password_resetFindFirstOrThrowArgsSchema: z.ZodType<Prisma.back3nd_password_resetFindFirstOrThrowArgs> = z.object({
  select: back3nd_password_resetSelectSchema.optional(),
  include: back3nd_password_resetIncludeSchema.optional(),
  where: back3nd_password_resetWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_password_resetOrderByWithRelationInputSchema.array(),back3nd_password_resetOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_password_resetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_password_resetScalarFieldEnumSchema,Back3nd_password_resetScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_password_resetFindManyArgsSchema: z.ZodType<Prisma.back3nd_password_resetFindManyArgs> = z.object({
  select: back3nd_password_resetSelectSchema.optional(),
  include: back3nd_password_resetIncludeSchema.optional(),
  where: back3nd_password_resetWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_password_resetOrderByWithRelationInputSchema.array(),back3nd_password_resetOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_password_resetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Back3nd_password_resetScalarFieldEnumSchema,Back3nd_password_resetScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const back3nd_password_resetAggregateArgsSchema: z.ZodType<Prisma.back3nd_password_resetAggregateArgs> = z.object({
  where: back3nd_password_resetWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_password_resetOrderByWithRelationInputSchema.array(),back3nd_password_resetOrderByWithRelationInputSchema ]).optional(),
  cursor: back3nd_password_resetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const back3nd_password_resetGroupByArgsSchema: z.ZodType<Prisma.back3nd_password_resetGroupByArgs> = z.object({
  where: back3nd_password_resetWhereInputSchema.optional(),
  orderBy: z.union([ back3nd_password_resetOrderByWithAggregationInputSchema.array(),back3nd_password_resetOrderByWithAggregationInputSchema ]).optional(),
  by: Back3nd_password_resetScalarFieldEnumSchema.array(),
  having: back3nd_password_resetScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const back3nd_password_resetFindUniqueArgsSchema: z.ZodType<Prisma.back3nd_password_resetFindUniqueArgs> = z.object({
  select: back3nd_password_resetSelectSchema.optional(),
  include: back3nd_password_resetIncludeSchema.optional(),
  where: back3nd_password_resetWhereUniqueInputSchema,
}).strict() ;

export const back3nd_password_resetFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.back3nd_password_resetFindUniqueOrThrowArgs> = z.object({
  select: back3nd_password_resetSelectSchema.optional(),
  include: back3nd_password_resetIncludeSchema.optional(),
  where: back3nd_password_resetWhereUniqueInputSchema,
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const DocumentCreateArgsSchema: z.ZodType<Prisma.DocumentCreateArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  include: DocumentIncludeSchema.optional(),
  data: z.union([ DocumentCreateInputSchema,DocumentUncheckedCreateInputSchema ]),
}).strict() ;

export const DocumentUpsertArgsSchema: z.ZodType<Prisma.DocumentUpsertArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  include: DocumentIncludeSchema.optional(),
  where: DocumentWhereUniqueInputSchema,
  create: z.union([ DocumentCreateInputSchema,DocumentUncheckedCreateInputSchema ]),
  update: z.union([ DocumentUpdateInputSchema,DocumentUncheckedUpdateInputSchema ]),
}).strict() ;

export const DocumentCreateManyArgsSchema: z.ZodType<Prisma.DocumentCreateManyArgs> = z.object({
  data: z.union([ DocumentCreateManyInputSchema,DocumentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DocumentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DocumentCreateManyAndReturnArgs> = z.object({
  data: z.union([ DocumentCreateManyInputSchema,DocumentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DocumentDeleteArgsSchema: z.ZodType<Prisma.DocumentDeleteArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  include: DocumentIncludeSchema.optional(),
  where: DocumentWhereUniqueInputSchema,
}).strict() ;

export const DocumentUpdateArgsSchema: z.ZodType<Prisma.DocumentUpdateArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  include: DocumentIncludeSchema.optional(),
  data: z.union([ DocumentUpdateInputSchema,DocumentUncheckedUpdateInputSchema ]),
  where: DocumentWhereUniqueInputSchema,
}).strict() ;

export const DocumentUpdateManyArgsSchema: z.ZodType<Prisma.DocumentUpdateManyArgs> = z.object({
  data: z.union([ DocumentUpdateManyMutationInputSchema,DocumentUncheckedUpdateManyInputSchema ]),
  where: DocumentWhereInputSchema.optional(),
}).strict() ;

export const DocumentDeleteManyArgsSchema: z.ZodType<Prisma.DocumentDeleteManyArgs> = z.object({
  where: DocumentWhereInputSchema.optional(),
}).strict() ;

export const UserOnDocumentsCreateArgsSchema: z.ZodType<Prisma.UserOnDocumentsCreateArgs> = z.object({
  select: UserOnDocumentsSelectSchema.optional(),
  include: UserOnDocumentsIncludeSchema.optional(),
  data: z.union([ UserOnDocumentsCreateInputSchema,UserOnDocumentsUncheckedCreateInputSchema ]),
}).strict() ;

export const UserOnDocumentsUpsertArgsSchema: z.ZodType<Prisma.UserOnDocumentsUpsertArgs> = z.object({
  select: UserOnDocumentsSelectSchema.optional(),
  include: UserOnDocumentsIncludeSchema.optional(),
  where: UserOnDocumentsWhereUniqueInputSchema,
  create: z.union([ UserOnDocumentsCreateInputSchema,UserOnDocumentsUncheckedCreateInputSchema ]),
  update: z.union([ UserOnDocumentsUpdateInputSchema,UserOnDocumentsUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserOnDocumentsCreateManyArgsSchema: z.ZodType<Prisma.UserOnDocumentsCreateManyArgs> = z.object({
  data: z.union([ UserOnDocumentsCreateManyInputSchema,UserOnDocumentsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserOnDocumentsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserOnDocumentsCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserOnDocumentsCreateManyInputSchema,UserOnDocumentsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserOnDocumentsDeleteArgsSchema: z.ZodType<Prisma.UserOnDocumentsDeleteArgs> = z.object({
  select: UserOnDocumentsSelectSchema.optional(),
  include: UserOnDocumentsIncludeSchema.optional(),
  where: UserOnDocumentsWhereUniqueInputSchema,
}).strict() ;

export const UserOnDocumentsUpdateArgsSchema: z.ZodType<Prisma.UserOnDocumentsUpdateArgs> = z.object({
  select: UserOnDocumentsSelectSchema.optional(),
  include: UserOnDocumentsIncludeSchema.optional(),
  data: z.union([ UserOnDocumentsUpdateInputSchema,UserOnDocumentsUncheckedUpdateInputSchema ]),
  where: UserOnDocumentsWhereUniqueInputSchema,
}).strict() ;

export const UserOnDocumentsUpdateManyArgsSchema: z.ZodType<Prisma.UserOnDocumentsUpdateManyArgs> = z.object({
  data: z.union([ UserOnDocumentsUpdateManyMutationInputSchema,UserOnDocumentsUncheckedUpdateManyInputSchema ]),
  where: UserOnDocumentsWhereInputSchema.optional(),
}).strict() ;

export const UserOnDocumentsDeleteManyArgsSchema: z.ZodType<Prisma.UserOnDocumentsDeleteManyArgs> = z.object({
  where: UserOnDocumentsWhereInputSchema.optional(),
}).strict() ;

export const DocumentUserCreateArgsSchema: z.ZodType<Prisma.DocumentUserCreateArgs> = z.object({
  select: DocumentUserSelectSchema.optional(),
  include: DocumentUserIncludeSchema.optional(),
  data: z.union([ DocumentUserCreateInputSchema,DocumentUserUncheckedCreateInputSchema ]),
}).strict() ;

export const DocumentUserUpsertArgsSchema: z.ZodType<Prisma.DocumentUserUpsertArgs> = z.object({
  select: DocumentUserSelectSchema.optional(),
  include: DocumentUserIncludeSchema.optional(),
  where: DocumentUserWhereUniqueInputSchema,
  create: z.union([ DocumentUserCreateInputSchema,DocumentUserUncheckedCreateInputSchema ]),
  update: z.union([ DocumentUserUpdateInputSchema,DocumentUserUncheckedUpdateInputSchema ]),
}).strict() ;

export const DocumentUserCreateManyArgsSchema: z.ZodType<Prisma.DocumentUserCreateManyArgs> = z.object({
  data: z.union([ DocumentUserCreateManyInputSchema,DocumentUserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DocumentUserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DocumentUserCreateManyAndReturnArgs> = z.object({
  data: z.union([ DocumentUserCreateManyInputSchema,DocumentUserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DocumentUserDeleteArgsSchema: z.ZodType<Prisma.DocumentUserDeleteArgs> = z.object({
  select: DocumentUserSelectSchema.optional(),
  include: DocumentUserIncludeSchema.optional(),
  where: DocumentUserWhereUniqueInputSchema,
}).strict() ;

export const DocumentUserUpdateArgsSchema: z.ZodType<Prisma.DocumentUserUpdateArgs> = z.object({
  select: DocumentUserSelectSchema.optional(),
  include: DocumentUserIncludeSchema.optional(),
  data: z.union([ DocumentUserUpdateInputSchema,DocumentUserUncheckedUpdateInputSchema ]),
  where: DocumentUserWhereUniqueInputSchema,
}).strict() ;

export const DocumentUserUpdateManyArgsSchema: z.ZodType<Prisma.DocumentUserUpdateManyArgs> = z.object({
  data: z.union([ DocumentUserUpdateManyMutationInputSchema,DocumentUserUncheckedUpdateManyInputSchema ]),
  where: DocumentUserWhereInputSchema.optional(),
}).strict() ;

export const DocumentUserDeleteManyArgsSchema: z.ZodType<Prisma.DocumentUserDeleteManyArgs> = z.object({
  where: DocumentUserWhereInputSchema.optional(),
}).strict() ;

export const DocumentVersionCreateArgsSchema: z.ZodType<Prisma.DocumentVersionCreateArgs> = z.object({
  select: DocumentVersionSelectSchema.optional(),
  include: DocumentVersionIncludeSchema.optional(),
  data: z.union([ DocumentVersionCreateInputSchema,DocumentVersionUncheckedCreateInputSchema ]),
}).strict() ;

export const DocumentVersionUpsertArgsSchema: z.ZodType<Prisma.DocumentVersionUpsertArgs> = z.object({
  select: DocumentVersionSelectSchema.optional(),
  include: DocumentVersionIncludeSchema.optional(),
  where: DocumentVersionWhereUniqueInputSchema,
  create: z.union([ DocumentVersionCreateInputSchema,DocumentVersionUncheckedCreateInputSchema ]),
  update: z.union([ DocumentVersionUpdateInputSchema,DocumentVersionUncheckedUpdateInputSchema ]),
}).strict() ;

export const DocumentVersionCreateManyArgsSchema: z.ZodType<Prisma.DocumentVersionCreateManyArgs> = z.object({
  data: z.union([ DocumentVersionCreateManyInputSchema,DocumentVersionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DocumentVersionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DocumentVersionCreateManyAndReturnArgs> = z.object({
  data: z.union([ DocumentVersionCreateManyInputSchema,DocumentVersionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DocumentVersionDeleteArgsSchema: z.ZodType<Prisma.DocumentVersionDeleteArgs> = z.object({
  select: DocumentVersionSelectSchema.optional(),
  include: DocumentVersionIncludeSchema.optional(),
  where: DocumentVersionWhereUniqueInputSchema,
}).strict() ;

export const DocumentVersionUpdateArgsSchema: z.ZodType<Prisma.DocumentVersionUpdateArgs> = z.object({
  select: DocumentVersionSelectSchema.optional(),
  include: DocumentVersionIncludeSchema.optional(),
  data: z.union([ DocumentVersionUpdateInputSchema,DocumentVersionUncheckedUpdateInputSchema ]),
  where: DocumentVersionWhereUniqueInputSchema,
}).strict() ;

export const DocumentVersionUpdateManyArgsSchema: z.ZodType<Prisma.DocumentVersionUpdateManyArgs> = z.object({
  data: z.union([ DocumentVersionUpdateManyMutationInputSchema,DocumentVersionUncheckedUpdateManyInputSchema ]),
  where: DocumentVersionWhereInputSchema.optional(),
}).strict() ;

export const DocumentVersionDeleteManyArgsSchema: z.ZodType<Prisma.DocumentVersionDeleteManyArgs> = z.object({
  where: DocumentVersionWhereInputSchema.optional(),
}).strict() ;

export const DocumentVersionCreatorCreateArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateArgs> = z.object({
  select: DocumentVersionCreatorSelectSchema.optional(),
  include: DocumentVersionCreatorIncludeSchema.optional(),
  data: z.union([ DocumentVersionCreatorCreateInputSchema,DocumentVersionCreatorUncheckedCreateInputSchema ]),
}).strict() ;

export const DocumentVersionCreatorUpsertArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorUpsertArgs> = z.object({
  select: DocumentVersionCreatorSelectSchema.optional(),
  include: DocumentVersionCreatorIncludeSchema.optional(),
  where: DocumentVersionCreatorWhereUniqueInputSchema,
  create: z.union([ DocumentVersionCreatorCreateInputSchema,DocumentVersionCreatorUncheckedCreateInputSchema ]),
  update: z.union([ DocumentVersionCreatorUpdateInputSchema,DocumentVersionCreatorUncheckedUpdateInputSchema ]),
}).strict() ;

export const DocumentVersionCreatorCreateManyArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateManyArgs> = z.object({
  data: z.union([ DocumentVersionCreatorCreateManyInputSchema,DocumentVersionCreatorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DocumentVersionCreatorCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorCreateManyAndReturnArgs> = z.object({
  data: z.union([ DocumentVersionCreatorCreateManyInputSchema,DocumentVersionCreatorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DocumentVersionCreatorDeleteArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorDeleteArgs> = z.object({
  select: DocumentVersionCreatorSelectSchema.optional(),
  include: DocumentVersionCreatorIncludeSchema.optional(),
  where: DocumentVersionCreatorWhereUniqueInputSchema,
}).strict() ;

export const DocumentVersionCreatorUpdateArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateArgs> = z.object({
  select: DocumentVersionCreatorSelectSchema.optional(),
  include: DocumentVersionCreatorIncludeSchema.optional(),
  data: z.union([ DocumentVersionCreatorUpdateInputSchema,DocumentVersionCreatorUncheckedUpdateInputSchema ]),
  where: DocumentVersionCreatorWhereUniqueInputSchema,
}).strict() ;

export const DocumentVersionCreatorUpdateManyArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorUpdateManyArgs> = z.object({
  data: z.union([ DocumentVersionCreatorUpdateManyMutationInputSchema,DocumentVersionCreatorUncheckedUpdateManyInputSchema ]),
  where: DocumentVersionCreatorWhereInputSchema.optional(),
}).strict() ;

export const DocumentVersionCreatorDeleteManyArgsSchema: z.ZodType<Prisma.DocumentVersionCreatorDeleteManyArgs> = z.object({
  where: DocumentVersionCreatorWhereInputSchema.optional(),
}).strict() ;

export const SharedDocumentCreateArgsSchema: z.ZodType<Prisma.SharedDocumentCreateArgs> = z.object({
  select: SharedDocumentSelectSchema.optional(),
  include: SharedDocumentIncludeSchema.optional(),
  data: z.union([ SharedDocumentCreateInputSchema,SharedDocumentUncheckedCreateInputSchema ]),
}).strict() ;

export const SharedDocumentUpsertArgsSchema: z.ZodType<Prisma.SharedDocumentUpsertArgs> = z.object({
  select: SharedDocumentSelectSchema.optional(),
  include: SharedDocumentIncludeSchema.optional(),
  where: SharedDocumentWhereUniqueInputSchema,
  create: z.union([ SharedDocumentCreateInputSchema,SharedDocumentUncheckedCreateInputSchema ]),
  update: z.union([ SharedDocumentUpdateInputSchema,SharedDocumentUncheckedUpdateInputSchema ]),
}).strict() ;

export const SharedDocumentCreateManyArgsSchema: z.ZodType<Prisma.SharedDocumentCreateManyArgs> = z.object({
  data: z.union([ SharedDocumentCreateManyInputSchema,SharedDocumentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SharedDocumentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SharedDocumentCreateManyAndReturnArgs> = z.object({
  data: z.union([ SharedDocumentCreateManyInputSchema,SharedDocumentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SharedDocumentDeleteArgsSchema: z.ZodType<Prisma.SharedDocumentDeleteArgs> = z.object({
  select: SharedDocumentSelectSchema.optional(),
  include: SharedDocumentIncludeSchema.optional(),
  where: SharedDocumentWhereUniqueInputSchema,
}).strict() ;

export const SharedDocumentUpdateArgsSchema: z.ZodType<Prisma.SharedDocumentUpdateArgs> = z.object({
  select: SharedDocumentSelectSchema.optional(),
  include: SharedDocumentIncludeSchema.optional(),
  data: z.union([ SharedDocumentUpdateInputSchema,SharedDocumentUncheckedUpdateInputSchema ]),
  where: SharedDocumentWhereUniqueInputSchema,
}).strict() ;

export const SharedDocumentUpdateManyArgsSchema: z.ZodType<Prisma.SharedDocumentUpdateManyArgs> = z.object({
  data: z.union([ SharedDocumentUpdateManyMutationInputSchema,SharedDocumentUncheckedUpdateManyInputSchema ]),
  where: SharedDocumentWhereInputSchema.optional(),
}).strict() ;

export const SharedDocumentDeleteManyArgsSchema: z.ZodType<Prisma.SharedDocumentDeleteManyArgs> = z.object({
  where: SharedDocumentWhereInputSchema.optional(),
}).strict() ;

export const WorkflowCreateArgsSchema: z.ZodType<Prisma.WorkflowCreateArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  data: z.union([ WorkflowCreateInputSchema,WorkflowUncheckedCreateInputSchema ]),
}).strict() ;

export const WorkflowUpsertArgsSchema: z.ZodType<Prisma.WorkflowUpsertArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereUniqueInputSchema,
  create: z.union([ WorkflowCreateInputSchema,WorkflowUncheckedCreateInputSchema ]),
  update: z.union([ WorkflowUpdateInputSchema,WorkflowUncheckedUpdateInputSchema ]),
}).strict() ;

export const WorkflowCreateManyArgsSchema: z.ZodType<Prisma.WorkflowCreateManyArgs> = z.object({
  data: z.union([ WorkflowCreateManyInputSchema,WorkflowCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WorkflowCreateManyAndReturnArgsSchema: z.ZodType<Prisma.WorkflowCreateManyAndReturnArgs> = z.object({
  data: z.union([ WorkflowCreateManyInputSchema,WorkflowCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WorkflowDeleteArgsSchema: z.ZodType<Prisma.WorkflowDeleteArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  where: WorkflowWhereUniqueInputSchema,
}).strict() ;

export const WorkflowUpdateArgsSchema: z.ZodType<Prisma.WorkflowUpdateArgs> = z.object({
  select: WorkflowSelectSchema.optional(),
  include: WorkflowIncludeSchema.optional(),
  data: z.union([ WorkflowUpdateInputSchema,WorkflowUncheckedUpdateInputSchema ]),
  where: WorkflowWhereUniqueInputSchema,
}).strict() ;

export const WorkflowUpdateManyArgsSchema: z.ZodType<Prisma.WorkflowUpdateManyArgs> = z.object({
  data: z.union([ WorkflowUpdateManyMutationInputSchema,WorkflowUncheckedUpdateManyInputSchema ]),
  where: WorkflowWhereInputSchema.optional(),
}).strict() ;

export const WorkflowDeleteManyArgsSchema: z.ZodType<Prisma.WorkflowDeleteManyArgs> = z.object({
  where: WorkflowWhereInputSchema.optional(),
}).strict() ;

export const TaskCreateArgsSchema: z.ZodType<Prisma.TaskCreateArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  data: z.union([ TaskCreateInputSchema,TaskUncheckedCreateInputSchema ]),
}).strict() ;

export const TaskUpsertArgsSchema: z.ZodType<Prisma.TaskUpsertArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
  create: z.union([ TaskCreateInputSchema,TaskUncheckedCreateInputSchema ]),
  update: z.union([ TaskUpdateInputSchema,TaskUncheckedUpdateInputSchema ]),
}).strict() ;

export const TaskCreateManyArgsSchema: z.ZodType<Prisma.TaskCreateManyArgs> = z.object({
  data: z.union([ TaskCreateManyInputSchema,TaskCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TaskCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TaskCreateManyAndReturnArgs> = z.object({
  data: z.union([ TaskCreateManyInputSchema,TaskCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TaskDeleteArgsSchema: z.ZodType<Prisma.TaskDeleteArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const TaskUpdateArgsSchema: z.ZodType<Prisma.TaskUpdateArgs> = z.object({
  select: TaskSelectSchema.optional(),
  include: TaskIncludeSchema.optional(),
  data: z.union([ TaskUpdateInputSchema,TaskUncheckedUpdateInputSchema ]),
  where: TaskWhereUniqueInputSchema,
}).strict() ;

export const TaskUpdateManyArgsSchema: z.ZodType<Prisma.TaskUpdateManyArgs> = z.object({
  data: z.union([ TaskUpdateManyMutationInputSchema,TaskUncheckedUpdateManyInputSchema ]),
  where: TaskWhereInputSchema.optional(),
}).strict() ;

export const TaskDeleteManyArgsSchema: z.ZodType<Prisma.TaskDeleteManyArgs> = z.object({
  where: TaskWhereInputSchema.optional(),
}).strict() ;

export const AuditLogCreateArgsSchema: z.ZodType<Prisma.AuditLogCreateArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  data: z.union([ AuditLogCreateInputSchema,AuditLogUncheckedCreateInputSchema ]),
}).strict() ;

export const AuditLogUpsertArgsSchema: z.ZodType<Prisma.AuditLogUpsertArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
  create: z.union([ AuditLogCreateInputSchema,AuditLogUncheckedCreateInputSchema ]),
  update: z.union([ AuditLogUpdateInputSchema,AuditLogUncheckedUpdateInputSchema ]),
}).strict() ;

export const AuditLogCreateManyArgsSchema: z.ZodType<Prisma.AuditLogCreateManyArgs> = z.object({
  data: z.union([ AuditLogCreateManyInputSchema,AuditLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AuditLogCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AuditLogCreateManyAndReturnArgs> = z.object({
  data: z.union([ AuditLogCreateManyInputSchema,AuditLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AuditLogDeleteArgsSchema: z.ZodType<Prisma.AuditLogDeleteArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogUpdateArgsSchema: z.ZodType<Prisma.AuditLogUpdateArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  data: z.union([ AuditLogUpdateInputSchema,AuditLogUncheckedUpdateInputSchema ]),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogUpdateManyArgsSchema: z.ZodType<Prisma.AuditLogUpdateManyArgs> = z.object({
  data: z.union([ AuditLogUpdateManyMutationInputSchema,AuditLogUncheckedUpdateManyInputSchema ]),
  where: AuditLogWhereInputSchema.optional(),
}).strict() ;

export const AuditLogDeleteManyArgsSchema: z.ZodType<Prisma.AuditLogDeleteManyArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
}).strict() ;

export const NotificationCreateArgsSchema: z.ZodType<Prisma.NotificationCreateArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  data: z.union([ NotificationCreateInputSchema,NotificationUncheckedCreateInputSchema ]),
}).strict() ;

export const NotificationUpsertArgsSchema: z.ZodType<Prisma.NotificationUpsertArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereUniqueInputSchema,
  create: z.union([ NotificationCreateInputSchema,NotificationUncheckedCreateInputSchema ]),
  update: z.union([ NotificationUpdateInputSchema,NotificationUncheckedUpdateInputSchema ]),
}).strict() ;

export const NotificationCreateManyArgsSchema: z.ZodType<Prisma.NotificationCreateManyArgs> = z.object({
  data: z.union([ NotificationCreateManyInputSchema,NotificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const NotificationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.NotificationCreateManyAndReturnArgs> = z.object({
  data: z.union([ NotificationCreateManyInputSchema,NotificationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const NotificationDeleteArgsSchema: z.ZodType<Prisma.NotificationDeleteArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  where: NotificationWhereUniqueInputSchema,
}).strict() ;

export const NotificationUpdateArgsSchema: z.ZodType<Prisma.NotificationUpdateArgs> = z.object({
  select: NotificationSelectSchema.optional(),
  include: NotificationIncludeSchema.optional(),
  data: z.union([ NotificationUpdateInputSchema,NotificationUncheckedUpdateInputSchema ]),
  where: NotificationWhereUniqueInputSchema,
}).strict() ;

export const NotificationUpdateManyArgsSchema: z.ZodType<Prisma.NotificationUpdateManyArgs> = z.object({
  data: z.union([ NotificationUpdateManyMutationInputSchema,NotificationUncheckedUpdateManyInputSchema ]),
  where: NotificationWhereInputSchema.optional(),
}).strict() ;

export const NotificationDeleteManyArgsSchema: z.ZodType<Prisma.NotificationDeleteManyArgs> = z.object({
  where: NotificationWhereInputSchema.optional(),
}).strict() ;

export const AttachmentCreateArgsSchema: z.ZodType<Prisma.AttachmentCreateArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  data: z.union([ AttachmentCreateInputSchema,AttachmentUncheckedCreateInputSchema ]),
}).strict() ;

export const AttachmentUpsertArgsSchema: z.ZodType<Prisma.AttachmentUpsertArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
  create: z.union([ AttachmentCreateInputSchema,AttachmentUncheckedCreateInputSchema ]),
  update: z.union([ AttachmentUpdateInputSchema,AttachmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const AttachmentCreateManyArgsSchema: z.ZodType<Prisma.AttachmentCreateManyArgs> = z.object({
  data: z.union([ AttachmentCreateManyInputSchema,AttachmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AttachmentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AttachmentCreateManyAndReturnArgs> = z.object({
  data: z.union([ AttachmentCreateManyInputSchema,AttachmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AttachmentDeleteArgsSchema: z.ZodType<Prisma.AttachmentDeleteArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const AttachmentUpdateArgsSchema: z.ZodType<Prisma.AttachmentUpdateArgs> = z.object({
  select: AttachmentSelectSchema.optional(),
  include: AttachmentIncludeSchema.optional(),
  data: z.union([ AttachmentUpdateInputSchema,AttachmentUncheckedUpdateInputSchema ]),
  where: AttachmentWhereUniqueInputSchema,
}).strict() ;

export const AttachmentUpdateManyArgsSchema: z.ZodType<Prisma.AttachmentUpdateManyArgs> = z.object({
  data: z.union([ AttachmentUpdateManyMutationInputSchema,AttachmentUncheckedUpdateManyInputSchema ]),
  where: AttachmentWhereInputSchema.optional(),
}).strict() ;

export const AttachmentDeleteManyArgsSchema: z.ZodType<Prisma.AttachmentDeleteManyArgs> = z.object({
  where: AttachmentWhereInputSchema.optional(),
}).strict() ;

export const DigitalCertificateCreateArgsSchema: z.ZodType<Prisma.DigitalCertificateCreateArgs> = z.object({
  select: DigitalCertificateSelectSchema.optional(),
  include: DigitalCertificateIncludeSchema.optional(),
  data: z.union([ DigitalCertificateCreateInputSchema,DigitalCertificateUncheckedCreateInputSchema ]),
}).strict() ;

export const DigitalCertificateUpsertArgsSchema: z.ZodType<Prisma.DigitalCertificateUpsertArgs> = z.object({
  select: DigitalCertificateSelectSchema.optional(),
  include: DigitalCertificateIncludeSchema.optional(),
  where: DigitalCertificateWhereUniqueInputSchema,
  create: z.union([ DigitalCertificateCreateInputSchema,DigitalCertificateUncheckedCreateInputSchema ]),
  update: z.union([ DigitalCertificateUpdateInputSchema,DigitalCertificateUncheckedUpdateInputSchema ]),
}).strict() ;

export const DigitalCertificateCreateManyArgsSchema: z.ZodType<Prisma.DigitalCertificateCreateManyArgs> = z.object({
  data: z.union([ DigitalCertificateCreateManyInputSchema,DigitalCertificateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DigitalCertificateCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DigitalCertificateCreateManyAndReturnArgs> = z.object({
  data: z.union([ DigitalCertificateCreateManyInputSchema,DigitalCertificateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DigitalCertificateDeleteArgsSchema: z.ZodType<Prisma.DigitalCertificateDeleteArgs> = z.object({
  select: DigitalCertificateSelectSchema.optional(),
  include: DigitalCertificateIncludeSchema.optional(),
  where: DigitalCertificateWhereUniqueInputSchema,
}).strict() ;

export const DigitalCertificateUpdateArgsSchema: z.ZodType<Prisma.DigitalCertificateUpdateArgs> = z.object({
  select: DigitalCertificateSelectSchema.optional(),
  include: DigitalCertificateIncludeSchema.optional(),
  data: z.union([ DigitalCertificateUpdateInputSchema,DigitalCertificateUncheckedUpdateInputSchema ]),
  where: DigitalCertificateWhereUniqueInputSchema,
}).strict() ;

export const DigitalCertificateUpdateManyArgsSchema: z.ZodType<Prisma.DigitalCertificateUpdateManyArgs> = z.object({
  data: z.union([ DigitalCertificateUpdateManyMutationInputSchema,DigitalCertificateUncheckedUpdateManyInputSchema ]),
  where: DigitalCertificateWhereInputSchema.optional(),
}).strict() ;

export const DigitalCertificateDeleteManyArgsSchema: z.ZodType<Prisma.DigitalCertificateDeleteManyArgs> = z.object({
  where: DigitalCertificateWhereInputSchema.optional(),
}).strict() ;

export const FileMetadataCreateArgsSchema: z.ZodType<Prisma.FileMetadataCreateArgs> = z.object({
  select: FileMetadataSelectSchema.optional(),
  include: FileMetadataIncludeSchema.optional(),
  data: z.union([ FileMetadataCreateInputSchema,FileMetadataUncheckedCreateInputSchema ]),
}).strict() ;

export const FileMetadataUpsertArgsSchema: z.ZodType<Prisma.FileMetadataUpsertArgs> = z.object({
  select: FileMetadataSelectSchema.optional(),
  include: FileMetadataIncludeSchema.optional(),
  where: FileMetadataWhereUniqueInputSchema,
  create: z.union([ FileMetadataCreateInputSchema,FileMetadataUncheckedCreateInputSchema ]),
  update: z.union([ FileMetadataUpdateInputSchema,FileMetadataUncheckedUpdateInputSchema ]),
}).strict() ;

export const FileMetadataCreateManyArgsSchema: z.ZodType<Prisma.FileMetadataCreateManyArgs> = z.object({
  data: z.union([ FileMetadataCreateManyInputSchema,FileMetadataCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FileMetadataCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FileMetadataCreateManyAndReturnArgs> = z.object({
  data: z.union([ FileMetadataCreateManyInputSchema,FileMetadataCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FileMetadataDeleteArgsSchema: z.ZodType<Prisma.FileMetadataDeleteArgs> = z.object({
  select: FileMetadataSelectSchema.optional(),
  include: FileMetadataIncludeSchema.optional(),
  where: FileMetadataWhereUniqueInputSchema,
}).strict() ;

export const FileMetadataUpdateArgsSchema: z.ZodType<Prisma.FileMetadataUpdateArgs> = z.object({
  select: FileMetadataSelectSchema.optional(),
  include: FileMetadataIncludeSchema.optional(),
  data: z.union([ FileMetadataUpdateInputSchema,FileMetadataUncheckedUpdateInputSchema ]),
  where: FileMetadataWhereUniqueInputSchema,
}).strict() ;

export const FileMetadataUpdateManyArgsSchema: z.ZodType<Prisma.FileMetadataUpdateManyArgs> = z.object({
  data: z.union([ FileMetadataUpdateManyMutationInputSchema,FileMetadataUncheckedUpdateManyInputSchema ]),
  where: FileMetadataWhereInputSchema.optional(),
}).strict() ;

export const FileMetadataDeleteManyArgsSchema: z.ZodType<Prisma.FileMetadataDeleteManyArgs> = z.object({
  where: FileMetadataWhereInputSchema.optional(),
}).strict() ;

export const InstitutionCreateArgsSchema: z.ZodType<Prisma.InstitutionCreateArgs> = z.object({
  select: InstitutionSelectSchema.optional(),
  include: InstitutionIncludeSchema.optional(),
  data: z.union([ InstitutionCreateInputSchema,InstitutionUncheckedCreateInputSchema ]),
}).strict() ;

export const InstitutionUpsertArgsSchema: z.ZodType<Prisma.InstitutionUpsertArgs> = z.object({
  select: InstitutionSelectSchema.optional(),
  include: InstitutionIncludeSchema.optional(),
  where: InstitutionWhereUniqueInputSchema,
  create: z.union([ InstitutionCreateInputSchema,InstitutionUncheckedCreateInputSchema ]),
  update: z.union([ InstitutionUpdateInputSchema,InstitutionUncheckedUpdateInputSchema ]),
}).strict() ;

export const InstitutionCreateManyArgsSchema: z.ZodType<Prisma.InstitutionCreateManyArgs> = z.object({
  data: z.union([ InstitutionCreateManyInputSchema,InstitutionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InstitutionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InstitutionCreateManyAndReturnArgs> = z.object({
  data: z.union([ InstitutionCreateManyInputSchema,InstitutionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InstitutionDeleteArgsSchema: z.ZodType<Prisma.InstitutionDeleteArgs> = z.object({
  select: InstitutionSelectSchema.optional(),
  include: InstitutionIncludeSchema.optional(),
  where: InstitutionWhereUniqueInputSchema,
}).strict() ;

export const InstitutionUpdateArgsSchema: z.ZodType<Prisma.InstitutionUpdateArgs> = z.object({
  select: InstitutionSelectSchema.optional(),
  include: InstitutionIncludeSchema.optional(),
  data: z.union([ InstitutionUpdateInputSchema,InstitutionUncheckedUpdateInputSchema ]),
  where: InstitutionWhereUniqueInputSchema,
}).strict() ;

export const InstitutionUpdateManyArgsSchema: z.ZodType<Prisma.InstitutionUpdateManyArgs> = z.object({
  data: z.union([ InstitutionUpdateManyMutationInputSchema,InstitutionUncheckedUpdateManyInputSchema ]),
  where: InstitutionWhereInputSchema.optional(),
}).strict() ;

export const InstitutionDeleteManyArgsSchema: z.ZodType<Prisma.InstitutionDeleteManyArgs> = z.object({
  where: InstitutionWhereInputSchema.optional(),
}).strict() ;

export const DepartmentCreateArgsSchema: z.ZodType<Prisma.DepartmentCreateArgs> = z.object({
  select: DepartmentSelectSchema.optional(),
  include: DepartmentIncludeSchema.optional(),
  data: z.union([ DepartmentCreateInputSchema,DepartmentUncheckedCreateInputSchema ]),
}).strict() ;

export const DepartmentUpsertArgsSchema: z.ZodType<Prisma.DepartmentUpsertArgs> = z.object({
  select: DepartmentSelectSchema.optional(),
  include: DepartmentIncludeSchema.optional(),
  where: DepartmentWhereUniqueInputSchema,
  create: z.union([ DepartmentCreateInputSchema,DepartmentUncheckedCreateInputSchema ]),
  update: z.union([ DepartmentUpdateInputSchema,DepartmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const DepartmentCreateManyArgsSchema: z.ZodType<Prisma.DepartmentCreateManyArgs> = z.object({
  data: z.union([ DepartmentCreateManyInputSchema,DepartmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DepartmentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DepartmentCreateManyAndReturnArgs> = z.object({
  data: z.union([ DepartmentCreateManyInputSchema,DepartmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DepartmentDeleteArgsSchema: z.ZodType<Prisma.DepartmentDeleteArgs> = z.object({
  select: DepartmentSelectSchema.optional(),
  include: DepartmentIncludeSchema.optional(),
  where: DepartmentWhereUniqueInputSchema,
}).strict() ;

export const DepartmentUpdateArgsSchema: z.ZodType<Prisma.DepartmentUpdateArgs> = z.object({
  select: DepartmentSelectSchema.optional(),
  include: DepartmentIncludeSchema.optional(),
  data: z.union([ DepartmentUpdateInputSchema,DepartmentUncheckedUpdateInputSchema ]),
  where: DepartmentWhereUniqueInputSchema,
}).strict() ;

export const DepartmentUpdateManyArgsSchema: z.ZodType<Prisma.DepartmentUpdateManyArgs> = z.object({
  data: z.union([ DepartmentUpdateManyMutationInputSchema,DepartmentUncheckedUpdateManyInputSchema ]),
  where: DepartmentWhereInputSchema.optional(),
}).strict() ;

export const DepartmentDeleteManyArgsSchema: z.ZodType<Prisma.DepartmentDeleteManyArgs> = z.object({
  where: DepartmentWhereInputSchema.optional(),
}).strict() ;

export const UserDepartmentCreateArgsSchema: z.ZodType<Prisma.UserDepartmentCreateArgs> = z.object({
  select: UserDepartmentSelectSchema.optional(),
  include: UserDepartmentIncludeSchema.optional(),
  data: z.union([ UserDepartmentCreateInputSchema,UserDepartmentUncheckedCreateInputSchema ]),
}).strict() ;

export const UserDepartmentUpsertArgsSchema: z.ZodType<Prisma.UserDepartmentUpsertArgs> = z.object({
  select: UserDepartmentSelectSchema.optional(),
  include: UserDepartmentIncludeSchema.optional(),
  where: UserDepartmentWhereUniqueInputSchema,
  create: z.union([ UserDepartmentCreateInputSchema,UserDepartmentUncheckedCreateInputSchema ]),
  update: z.union([ UserDepartmentUpdateInputSchema,UserDepartmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserDepartmentCreateManyArgsSchema: z.ZodType<Prisma.UserDepartmentCreateManyArgs> = z.object({
  data: z.union([ UserDepartmentCreateManyInputSchema,UserDepartmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDepartmentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserDepartmentCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserDepartmentCreateManyInputSchema,UserDepartmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDepartmentDeleteArgsSchema: z.ZodType<Prisma.UserDepartmentDeleteArgs> = z.object({
  select: UserDepartmentSelectSchema.optional(),
  include: UserDepartmentIncludeSchema.optional(),
  where: UserDepartmentWhereUniqueInputSchema,
}).strict() ;

export const UserDepartmentUpdateArgsSchema: z.ZodType<Prisma.UserDepartmentUpdateArgs> = z.object({
  select: UserDepartmentSelectSchema.optional(),
  include: UserDepartmentIncludeSchema.optional(),
  data: z.union([ UserDepartmentUpdateInputSchema,UserDepartmentUncheckedUpdateInputSchema ]),
  where: UserDepartmentWhereUniqueInputSchema,
}).strict() ;

export const UserDepartmentUpdateManyArgsSchema: z.ZodType<Prisma.UserDepartmentUpdateManyArgs> = z.object({
  data: z.union([ UserDepartmentUpdateManyMutationInputSchema,UserDepartmentUncheckedUpdateManyInputSchema ]),
  where: UserDepartmentWhereInputSchema.optional(),
}).strict() ;

export const UserDepartmentDeleteManyArgsSchema: z.ZodType<Prisma.UserDepartmentDeleteManyArgs> = z.object({
  where: UserDepartmentWhereInputSchema.optional(),
}).strict() ;

export const TicketCreateArgsSchema: z.ZodType<Prisma.TicketCreateArgs> = z.object({
  select: TicketSelectSchema.optional(),
  include: TicketIncludeSchema.optional(),
  data: z.union([ TicketCreateInputSchema,TicketUncheckedCreateInputSchema ]),
}).strict() ;

export const TicketUpsertArgsSchema: z.ZodType<Prisma.TicketUpsertArgs> = z.object({
  select: TicketSelectSchema.optional(),
  include: TicketIncludeSchema.optional(),
  where: TicketWhereUniqueInputSchema,
  create: z.union([ TicketCreateInputSchema,TicketUncheckedCreateInputSchema ]),
  update: z.union([ TicketUpdateInputSchema,TicketUncheckedUpdateInputSchema ]),
}).strict() ;

export const TicketCreateManyArgsSchema: z.ZodType<Prisma.TicketCreateManyArgs> = z.object({
  data: z.union([ TicketCreateManyInputSchema,TicketCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TicketCreateManyAndReturnArgs> = z.object({
  data: z.union([ TicketCreateManyInputSchema,TicketCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketDeleteArgsSchema: z.ZodType<Prisma.TicketDeleteArgs> = z.object({
  select: TicketSelectSchema.optional(),
  include: TicketIncludeSchema.optional(),
  where: TicketWhereUniqueInputSchema,
}).strict() ;

export const TicketUpdateArgsSchema: z.ZodType<Prisma.TicketUpdateArgs> = z.object({
  select: TicketSelectSchema.optional(),
  include: TicketIncludeSchema.optional(),
  data: z.union([ TicketUpdateInputSchema,TicketUncheckedUpdateInputSchema ]),
  where: TicketWhereUniqueInputSchema,
}).strict() ;

export const TicketUpdateManyArgsSchema: z.ZodType<Prisma.TicketUpdateManyArgs> = z.object({
  data: z.union([ TicketUpdateManyMutationInputSchema,TicketUncheckedUpdateManyInputSchema ]),
  where: TicketWhereInputSchema.optional(),
}).strict() ;

export const TicketDeleteManyArgsSchema: z.ZodType<Prisma.TicketDeleteManyArgs> = z.object({
  where: TicketWhereInputSchema.optional(),
}).strict() ;

export const TicketStatusCreateArgsSchema: z.ZodType<Prisma.TicketStatusCreateArgs> = z.object({
  select: TicketStatusSelectSchema.optional(),
  include: TicketStatusIncludeSchema.optional(),
  data: z.union([ TicketStatusCreateInputSchema,TicketStatusUncheckedCreateInputSchema ]),
}).strict() ;

export const TicketStatusUpsertArgsSchema: z.ZodType<Prisma.TicketStatusUpsertArgs> = z.object({
  select: TicketStatusSelectSchema.optional(),
  include: TicketStatusIncludeSchema.optional(),
  where: TicketStatusWhereUniqueInputSchema,
  create: z.union([ TicketStatusCreateInputSchema,TicketStatusUncheckedCreateInputSchema ]),
  update: z.union([ TicketStatusUpdateInputSchema,TicketStatusUncheckedUpdateInputSchema ]),
}).strict() ;

export const TicketStatusCreateManyArgsSchema: z.ZodType<Prisma.TicketStatusCreateManyArgs> = z.object({
  data: z.union([ TicketStatusCreateManyInputSchema,TicketStatusCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketStatusCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TicketStatusCreateManyAndReturnArgs> = z.object({
  data: z.union([ TicketStatusCreateManyInputSchema,TicketStatusCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketStatusDeleteArgsSchema: z.ZodType<Prisma.TicketStatusDeleteArgs> = z.object({
  select: TicketStatusSelectSchema.optional(),
  include: TicketStatusIncludeSchema.optional(),
  where: TicketStatusWhereUniqueInputSchema,
}).strict() ;

export const TicketStatusUpdateArgsSchema: z.ZodType<Prisma.TicketStatusUpdateArgs> = z.object({
  select: TicketStatusSelectSchema.optional(),
  include: TicketStatusIncludeSchema.optional(),
  data: z.union([ TicketStatusUpdateInputSchema,TicketStatusUncheckedUpdateInputSchema ]),
  where: TicketStatusWhereUniqueInputSchema,
}).strict() ;

export const TicketStatusUpdateManyArgsSchema: z.ZodType<Prisma.TicketStatusUpdateManyArgs> = z.object({
  data: z.union([ TicketStatusUpdateManyMutationInputSchema,TicketStatusUncheckedUpdateManyInputSchema ]),
  where: TicketStatusWhereInputSchema.optional(),
}).strict() ;

export const TicketStatusDeleteManyArgsSchema: z.ZodType<Prisma.TicketStatusDeleteManyArgs> = z.object({
  where: TicketStatusWhereInputSchema.optional(),
}).strict() ;

export const TicketPriorityCreateArgsSchema: z.ZodType<Prisma.TicketPriorityCreateArgs> = z.object({
  select: TicketPrioritySelectSchema.optional(),
  include: TicketPriorityIncludeSchema.optional(),
  data: z.union([ TicketPriorityCreateInputSchema,TicketPriorityUncheckedCreateInputSchema ]),
}).strict() ;

export const TicketPriorityUpsertArgsSchema: z.ZodType<Prisma.TicketPriorityUpsertArgs> = z.object({
  select: TicketPrioritySelectSchema.optional(),
  include: TicketPriorityIncludeSchema.optional(),
  where: TicketPriorityWhereUniqueInputSchema,
  create: z.union([ TicketPriorityCreateInputSchema,TicketPriorityUncheckedCreateInputSchema ]),
  update: z.union([ TicketPriorityUpdateInputSchema,TicketPriorityUncheckedUpdateInputSchema ]),
}).strict() ;

export const TicketPriorityCreateManyArgsSchema: z.ZodType<Prisma.TicketPriorityCreateManyArgs> = z.object({
  data: z.union([ TicketPriorityCreateManyInputSchema,TicketPriorityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketPriorityCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TicketPriorityCreateManyAndReturnArgs> = z.object({
  data: z.union([ TicketPriorityCreateManyInputSchema,TicketPriorityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketPriorityDeleteArgsSchema: z.ZodType<Prisma.TicketPriorityDeleteArgs> = z.object({
  select: TicketPrioritySelectSchema.optional(),
  include: TicketPriorityIncludeSchema.optional(),
  where: TicketPriorityWhereUniqueInputSchema,
}).strict() ;

export const TicketPriorityUpdateArgsSchema: z.ZodType<Prisma.TicketPriorityUpdateArgs> = z.object({
  select: TicketPrioritySelectSchema.optional(),
  include: TicketPriorityIncludeSchema.optional(),
  data: z.union([ TicketPriorityUpdateInputSchema,TicketPriorityUncheckedUpdateInputSchema ]),
  where: TicketPriorityWhereUniqueInputSchema,
}).strict() ;

export const TicketPriorityUpdateManyArgsSchema: z.ZodType<Prisma.TicketPriorityUpdateManyArgs> = z.object({
  data: z.union([ TicketPriorityUpdateManyMutationInputSchema,TicketPriorityUncheckedUpdateManyInputSchema ]),
  where: TicketPriorityWhereInputSchema.optional(),
}).strict() ;

export const TicketPriorityDeleteManyArgsSchema: z.ZodType<Prisma.TicketPriorityDeleteManyArgs> = z.object({
  where: TicketPriorityWhereInputSchema.optional(),
}).strict() ;

export const HelpTopicCreateArgsSchema: z.ZodType<Prisma.HelpTopicCreateArgs> = z.object({
  select: HelpTopicSelectSchema.optional(),
  include: HelpTopicIncludeSchema.optional(),
  data: z.union([ HelpTopicCreateInputSchema,HelpTopicUncheckedCreateInputSchema ]),
}).strict() ;

export const HelpTopicUpsertArgsSchema: z.ZodType<Prisma.HelpTopicUpsertArgs> = z.object({
  select: HelpTopicSelectSchema.optional(),
  include: HelpTopicIncludeSchema.optional(),
  where: HelpTopicWhereUniqueInputSchema,
  create: z.union([ HelpTopicCreateInputSchema,HelpTopicUncheckedCreateInputSchema ]),
  update: z.union([ HelpTopicUpdateInputSchema,HelpTopicUncheckedUpdateInputSchema ]),
}).strict() ;

export const HelpTopicCreateManyArgsSchema: z.ZodType<Prisma.HelpTopicCreateManyArgs> = z.object({
  data: z.union([ HelpTopicCreateManyInputSchema,HelpTopicCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const HelpTopicCreateManyAndReturnArgsSchema: z.ZodType<Prisma.HelpTopicCreateManyAndReturnArgs> = z.object({
  data: z.union([ HelpTopicCreateManyInputSchema,HelpTopicCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const HelpTopicDeleteArgsSchema: z.ZodType<Prisma.HelpTopicDeleteArgs> = z.object({
  select: HelpTopicSelectSchema.optional(),
  include: HelpTopicIncludeSchema.optional(),
  where: HelpTopicWhereUniqueInputSchema,
}).strict() ;

export const HelpTopicUpdateArgsSchema: z.ZodType<Prisma.HelpTopicUpdateArgs> = z.object({
  select: HelpTopicSelectSchema.optional(),
  include: HelpTopicIncludeSchema.optional(),
  data: z.union([ HelpTopicUpdateInputSchema,HelpTopicUncheckedUpdateInputSchema ]),
  where: HelpTopicWhereUniqueInputSchema,
}).strict() ;

export const HelpTopicUpdateManyArgsSchema: z.ZodType<Prisma.HelpTopicUpdateManyArgs> = z.object({
  data: z.union([ HelpTopicUpdateManyMutationInputSchema,HelpTopicUncheckedUpdateManyInputSchema ]),
  where: HelpTopicWhereInputSchema.optional(),
}).strict() ;

export const HelpTopicDeleteManyArgsSchema: z.ZodType<Prisma.HelpTopicDeleteManyArgs> = z.object({
  where: HelpTopicWhereInputSchema.optional(),
}).strict() ;

export const SLAPlanCreateArgsSchema: z.ZodType<Prisma.SLAPlanCreateArgs> = z.object({
  select: SLAPlanSelectSchema.optional(),
  include: SLAPlanIncludeSchema.optional(),
  data: z.union([ SLAPlanCreateInputSchema,SLAPlanUncheckedCreateInputSchema ]),
}).strict() ;

export const SLAPlanUpsertArgsSchema: z.ZodType<Prisma.SLAPlanUpsertArgs> = z.object({
  select: SLAPlanSelectSchema.optional(),
  include: SLAPlanIncludeSchema.optional(),
  where: SLAPlanWhereUniqueInputSchema,
  create: z.union([ SLAPlanCreateInputSchema,SLAPlanUncheckedCreateInputSchema ]),
  update: z.union([ SLAPlanUpdateInputSchema,SLAPlanUncheckedUpdateInputSchema ]),
}).strict() ;

export const SLAPlanCreateManyArgsSchema: z.ZodType<Prisma.SLAPlanCreateManyArgs> = z.object({
  data: z.union([ SLAPlanCreateManyInputSchema,SLAPlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SLAPlanCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SLAPlanCreateManyAndReturnArgs> = z.object({
  data: z.union([ SLAPlanCreateManyInputSchema,SLAPlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SLAPlanDeleteArgsSchema: z.ZodType<Prisma.SLAPlanDeleteArgs> = z.object({
  select: SLAPlanSelectSchema.optional(),
  include: SLAPlanIncludeSchema.optional(),
  where: SLAPlanWhereUniqueInputSchema,
}).strict() ;

export const SLAPlanUpdateArgsSchema: z.ZodType<Prisma.SLAPlanUpdateArgs> = z.object({
  select: SLAPlanSelectSchema.optional(),
  include: SLAPlanIncludeSchema.optional(),
  data: z.union([ SLAPlanUpdateInputSchema,SLAPlanUncheckedUpdateInputSchema ]),
  where: SLAPlanWhereUniqueInputSchema,
}).strict() ;

export const SLAPlanUpdateManyArgsSchema: z.ZodType<Prisma.SLAPlanUpdateManyArgs> = z.object({
  data: z.union([ SLAPlanUpdateManyMutationInputSchema,SLAPlanUncheckedUpdateManyInputSchema ]),
  where: SLAPlanWhereInputSchema.optional(),
}).strict() ;

export const SLAPlanDeleteManyArgsSchema: z.ZodType<Prisma.SLAPlanDeleteManyArgs> = z.object({
  where: SLAPlanWhereInputSchema.optional(),
}).strict() ;

export const TicketThreadCreateArgsSchema: z.ZodType<Prisma.TicketThreadCreateArgs> = z.object({
  select: TicketThreadSelectSchema.optional(),
  include: TicketThreadIncludeSchema.optional(),
  data: z.union([ TicketThreadCreateInputSchema,TicketThreadUncheckedCreateInputSchema ]),
}).strict() ;

export const TicketThreadUpsertArgsSchema: z.ZodType<Prisma.TicketThreadUpsertArgs> = z.object({
  select: TicketThreadSelectSchema.optional(),
  include: TicketThreadIncludeSchema.optional(),
  where: TicketThreadWhereUniqueInputSchema,
  create: z.union([ TicketThreadCreateInputSchema,TicketThreadUncheckedCreateInputSchema ]),
  update: z.union([ TicketThreadUpdateInputSchema,TicketThreadUncheckedUpdateInputSchema ]),
}).strict() ;

export const TicketThreadCreateManyArgsSchema: z.ZodType<Prisma.TicketThreadCreateManyArgs> = z.object({
  data: z.union([ TicketThreadCreateManyInputSchema,TicketThreadCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketThreadCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TicketThreadCreateManyAndReturnArgs> = z.object({
  data: z.union([ TicketThreadCreateManyInputSchema,TicketThreadCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketThreadDeleteArgsSchema: z.ZodType<Prisma.TicketThreadDeleteArgs> = z.object({
  select: TicketThreadSelectSchema.optional(),
  include: TicketThreadIncludeSchema.optional(),
  where: TicketThreadWhereUniqueInputSchema,
}).strict() ;

export const TicketThreadUpdateArgsSchema: z.ZodType<Prisma.TicketThreadUpdateArgs> = z.object({
  select: TicketThreadSelectSchema.optional(),
  include: TicketThreadIncludeSchema.optional(),
  data: z.union([ TicketThreadUpdateInputSchema,TicketThreadUncheckedUpdateInputSchema ]),
  where: TicketThreadWhereUniqueInputSchema,
}).strict() ;

export const TicketThreadUpdateManyArgsSchema: z.ZodType<Prisma.TicketThreadUpdateManyArgs> = z.object({
  data: z.union([ TicketThreadUpdateManyMutationInputSchema,TicketThreadUncheckedUpdateManyInputSchema ]),
  where: TicketThreadWhereInputSchema.optional(),
}).strict() ;

export const TicketThreadDeleteManyArgsSchema: z.ZodType<Prisma.TicketThreadDeleteManyArgs> = z.object({
  where: TicketThreadWhereInputSchema.optional(),
}).strict() ;

export const TicketAttachmentCreateArgsSchema: z.ZodType<Prisma.TicketAttachmentCreateArgs> = z.object({
  select: TicketAttachmentSelectSchema.optional(),
  include: TicketAttachmentIncludeSchema.optional(),
  data: z.union([ TicketAttachmentCreateInputSchema,TicketAttachmentUncheckedCreateInputSchema ]),
}).strict() ;

export const TicketAttachmentUpsertArgsSchema: z.ZodType<Prisma.TicketAttachmentUpsertArgs> = z.object({
  select: TicketAttachmentSelectSchema.optional(),
  include: TicketAttachmentIncludeSchema.optional(),
  where: TicketAttachmentWhereUniqueInputSchema,
  create: z.union([ TicketAttachmentCreateInputSchema,TicketAttachmentUncheckedCreateInputSchema ]),
  update: z.union([ TicketAttachmentUpdateInputSchema,TicketAttachmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const TicketAttachmentCreateManyArgsSchema: z.ZodType<Prisma.TicketAttachmentCreateManyArgs> = z.object({
  data: z.union([ TicketAttachmentCreateManyInputSchema,TicketAttachmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketAttachmentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TicketAttachmentCreateManyAndReturnArgs> = z.object({
  data: z.union([ TicketAttachmentCreateManyInputSchema,TicketAttachmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketAttachmentDeleteArgsSchema: z.ZodType<Prisma.TicketAttachmentDeleteArgs> = z.object({
  select: TicketAttachmentSelectSchema.optional(),
  include: TicketAttachmentIncludeSchema.optional(),
  where: TicketAttachmentWhereUniqueInputSchema,
}).strict() ;

export const TicketAttachmentUpdateArgsSchema: z.ZodType<Prisma.TicketAttachmentUpdateArgs> = z.object({
  select: TicketAttachmentSelectSchema.optional(),
  include: TicketAttachmentIncludeSchema.optional(),
  data: z.union([ TicketAttachmentUpdateInputSchema,TicketAttachmentUncheckedUpdateInputSchema ]),
  where: TicketAttachmentWhereUniqueInputSchema,
}).strict() ;

export const TicketAttachmentUpdateManyArgsSchema: z.ZodType<Prisma.TicketAttachmentUpdateManyArgs> = z.object({
  data: z.union([ TicketAttachmentUpdateManyMutationInputSchema,TicketAttachmentUncheckedUpdateManyInputSchema ]),
  where: TicketAttachmentWhereInputSchema.optional(),
}).strict() ;

export const TicketAttachmentDeleteManyArgsSchema: z.ZodType<Prisma.TicketAttachmentDeleteManyArgs> = z.object({
  where: TicketAttachmentWhereInputSchema.optional(),
}).strict() ;

export const TicketCollaboratorCreateArgsSchema: z.ZodType<Prisma.TicketCollaboratorCreateArgs> = z.object({
  select: TicketCollaboratorSelectSchema.optional(),
  include: TicketCollaboratorIncludeSchema.optional(),
  data: z.union([ TicketCollaboratorCreateInputSchema,TicketCollaboratorUncheckedCreateInputSchema ]),
}).strict() ;

export const TicketCollaboratorUpsertArgsSchema: z.ZodType<Prisma.TicketCollaboratorUpsertArgs> = z.object({
  select: TicketCollaboratorSelectSchema.optional(),
  include: TicketCollaboratorIncludeSchema.optional(),
  where: TicketCollaboratorWhereUniqueInputSchema,
  create: z.union([ TicketCollaboratorCreateInputSchema,TicketCollaboratorUncheckedCreateInputSchema ]),
  update: z.union([ TicketCollaboratorUpdateInputSchema,TicketCollaboratorUncheckedUpdateInputSchema ]),
}).strict() ;

export const TicketCollaboratorCreateManyArgsSchema: z.ZodType<Prisma.TicketCollaboratorCreateManyArgs> = z.object({
  data: z.union([ TicketCollaboratorCreateManyInputSchema,TicketCollaboratorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketCollaboratorCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TicketCollaboratorCreateManyAndReturnArgs> = z.object({
  data: z.union([ TicketCollaboratorCreateManyInputSchema,TicketCollaboratorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketCollaboratorDeleteArgsSchema: z.ZodType<Prisma.TicketCollaboratorDeleteArgs> = z.object({
  select: TicketCollaboratorSelectSchema.optional(),
  include: TicketCollaboratorIncludeSchema.optional(),
  where: TicketCollaboratorWhereUniqueInputSchema,
}).strict() ;

export const TicketCollaboratorUpdateArgsSchema: z.ZodType<Prisma.TicketCollaboratorUpdateArgs> = z.object({
  select: TicketCollaboratorSelectSchema.optional(),
  include: TicketCollaboratorIncludeSchema.optional(),
  data: z.union([ TicketCollaboratorUpdateInputSchema,TicketCollaboratorUncheckedUpdateInputSchema ]),
  where: TicketCollaboratorWhereUniqueInputSchema,
}).strict() ;

export const TicketCollaboratorUpdateManyArgsSchema: z.ZodType<Prisma.TicketCollaboratorUpdateManyArgs> = z.object({
  data: z.union([ TicketCollaboratorUpdateManyMutationInputSchema,TicketCollaboratorUncheckedUpdateManyInputSchema ]),
  where: TicketCollaboratorWhereInputSchema.optional(),
}).strict() ;

export const TicketCollaboratorDeleteManyArgsSchema: z.ZodType<Prisma.TicketCollaboratorDeleteManyArgs> = z.object({
  where: TicketCollaboratorWhereInputSchema.optional(),
}).strict() ;

export const CustomFieldCreateArgsSchema: z.ZodType<Prisma.CustomFieldCreateArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  data: z.union([ CustomFieldCreateInputSchema,CustomFieldUncheckedCreateInputSchema ]),
}).strict() ;

export const CustomFieldUpsertArgsSchema: z.ZodType<Prisma.CustomFieldUpsertArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereUniqueInputSchema,
  create: z.union([ CustomFieldCreateInputSchema,CustomFieldUncheckedCreateInputSchema ]),
  update: z.union([ CustomFieldUpdateInputSchema,CustomFieldUncheckedUpdateInputSchema ]),
}).strict() ;

export const CustomFieldCreateManyArgsSchema: z.ZodType<Prisma.CustomFieldCreateManyArgs> = z.object({
  data: z.union([ CustomFieldCreateManyInputSchema,CustomFieldCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomFieldCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomFieldCreateManyAndReturnArgs> = z.object({
  data: z.union([ CustomFieldCreateManyInputSchema,CustomFieldCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomFieldDeleteArgsSchema: z.ZodType<Prisma.CustomFieldDeleteArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  where: CustomFieldWhereUniqueInputSchema,
}).strict() ;

export const CustomFieldUpdateArgsSchema: z.ZodType<Prisma.CustomFieldUpdateArgs> = z.object({
  select: CustomFieldSelectSchema.optional(),
  include: CustomFieldIncludeSchema.optional(),
  data: z.union([ CustomFieldUpdateInputSchema,CustomFieldUncheckedUpdateInputSchema ]),
  where: CustomFieldWhereUniqueInputSchema,
}).strict() ;

export const CustomFieldUpdateManyArgsSchema: z.ZodType<Prisma.CustomFieldUpdateManyArgs> = z.object({
  data: z.union([ CustomFieldUpdateManyMutationInputSchema,CustomFieldUncheckedUpdateManyInputSchema ]),
  where: CustomFieldWhereInputSchema.optional(),
}).strict() ;

export const CustomFieldDeleteManyArgsSchema: z.ZodType<Prisma.CustomFieldDeleteManyArgs> = z.object({
  where: CustomFieldWhereInputSchema.optional(),
}).strict() ;

export const TicketCustomFieldCreateArgsSchema: z.ZodType<Prisma.TicketCustomFieldCreateArgs> = z.object({
  select: TicketCustomFieldSelectSchema.optional(),
  include: TicketCustomFieldIncludeSchema.optional(),
  data: z.union([ TicketCustomFieldCreateInputSchema,TicketCustomFieldUncheckedCreateInputSchema ]),
}).strict() ;

export const TicketCustomFieldUpsertArgsSchema: z.ZodType<Prisma.TicketCustomFieldUpsertArgs> = z.object({
  select: TicketCustomFieldSelectSchema.optional(),
  include: TicketCustomFieldIncludeSchema.optional(),
  where: TicketCustomFieldWhereUniqueInputSchema,
  create: z.union([ TicketCustomFieldCreateInputSchema,TicketCustomFieldUncheckedCreateInputSchema ]),
  update: z.union([ TicketCustomFieldUpdateInputSchema,TicketCustomFieldUncheckedUpdateInputSchema ]),
}).strict() ;

export const TicketCustomFieldCreateManyArgsSchema: z.ZodType<Prisma.TicketCustomFieldCreateManyArgs> = z.object({
  data: z.union([ TicketCustomFieldCreateManyInputSchema,TicketCustomFieldCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketCustomFieldCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TicketCustomFieldCreateManyAndReturnArgs> = z.object({
  data: z.union([ TicketCustomFieldCreateManyInputSchema,TicketCustomFieldCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketCustomFieldDeleteArgsSchema: z.ZodType<Prisma.TicketCustomFieldDeleteArgs> = z.object({
  select: TicketCustomFieldSelectSchema.optional(),
  include: TicketCustomFieldIncludeSchema.optional(),
  where: TicketCustomFieldWhereUniqueInputSchema,
}).strict() ;

export const TicketCustomFieldUpdateArgsSchema: z.ZodType<Prisma.TicketCustomFieldUpdateArgs> = z.object({
  select: TicketCustomFieldSelectSchema.optional(),
  include: TicketCustomFieldIncludeSchema.optional(),
  data: z.union([ TicketCustomFieldUpdateInputSchema,TicketCustomFieldUncheckedUpdateInputSchema ]),
  where: TicketCustomFieldWhereUniqueInputSchema,
}).strict() ;

export const TicketCustomFieldUpdateManyArgsSchema: z.ZodType<Prisma.TicketCustomFieldUpdateManyArgs> = z.object({
  data: z.union([ TicketCustomFieldUpdateManyMutationInputSchema,TicketCustomFieldUncheckedUpdateManyInputSchema ]),
  where: TicketCustomFieldWhereInputSchema.optional(),
}).strict() ;

export const TicketCustomFieldDeleteManyArgsSchema: z.ZodType<Prisma.TicketCustomFieldDeleteManyArgs> = z.object({
  where: TicketCustomFieldWhereInputSchema.optional(),
}).strict() ;

export const TaskUserCreateArgsSchema: z.ZodType<Prisma.TaskUserCreateArgs> = z.object({
  select: TaskUserSelectSchema.optional(),
  include: TaskUserIncludeSchema.optional(),
  data: z.union([ TaskUserCreateInputSchema,TaskUserUncheckedCreateInputSchema ]),
}).strict() ;

export const TaskUserUpsertArgsSchema: z.ZodType<Prisma.TaskUserUpsertArgs> = z.object({
  select: TaskUserSelectSchema.optional(),
  include: TaskUserIncludeSchema.optional(),
  where: TaskUserWhereUniqueInputSchema,
  create: z.union([ TaskUserCreateInputSchema,TaskUserUncheckedCreateInputSchema ]),
  update: z.union([ TaskUserUpdateInputSchema,TaskUserUncheckedUpdateInputSchema ]),
}).strict() ;

export const TaskUserCreateManyArgsSchema: z.ZodType<Prisma.TaskUserCreateManyArgs> = z.object({
  data: z.union([ TaskUserCreateManyInputSchema,TaskUserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TaskUserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TaskUserCreateManyAndReturnArgs> = z.object({
  data: z.union([ TaskUserCreateManyInputSchema,TaskUserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TaskUserDeleteArgsSchema: z.ZodType<Prisma.TaskUserDeleteArgs> = z.object({
  select: TaskUserSelectSchema.optional(),
  include: TaskUserIncludeSchema.optional(),
  where: TaskUserWhereUniqueInputSchema,
}).strict() ;

export const TaskUserUpdateArgsSchema: z.ZodType<Prisma.TaskUserUpdateArgs> = z.object({
  select: TaskUserSelectSchema.optional(),
  include: TaskUserIncludeSchema.optional(),
  data: z.union([ TaskUserUpdateInputSchema,TaskUserUncheckedUpdateInputSchema ]),
  where: TaskUserWhereUniqueInputSchema,
}).strict() ;

export const TaskUserUpdateManyArgsSchema: z.ZodType<Prisma.TaskUserUpdateManyArgs> = z.object({
  data: z.union([ TaskUserUpdateManyMutationInputSchema,TaskUserUncheckedUpdateManyInputSchema ]),
  where: TaskUserWhereInputSchema.optional(),
}).strict() ;

export const TaskUserDeleteManyArgsSchema: z.ZodType<Prisma.TaskUserDeleteManyArgs> = z.object({
  where: TaskUserWhereInputSchema.optional(),
}).strict() ;

export const TicketUserCreateArgsSchema: z.ZodType<Prisma.TicketUserCreateArgs> = z.object({
  select: TicketUserSelectSchema.optional(),
  include: TicketUserIncludeSchema.optional(),
  data: z.union([ TicketUserCreateInputSchema,TicketUserUncheckedCreateInputSchema ]),
}).strict() ;

export const TicketUserUpsertArgsSchema: z.ZodType<Prisma.TicketUserUpsertArgs> = z.object({
  select: TicketUserSelectSchema.optional(),
  include: TicketUserIncludeSchema.optional(),
  where: TicketUserWhereUniqueInputSchema,
  create: z.union([ TicketUserCreateInputSchema,TicketUserUncheckedCreateInputSchema ]),
  update: z.union([ TicketUserUpdateInputSchema,TicketUserUncheckedUpdateInputSchema ]),
}).strict() ;

export const TicketUserCreateManyArgsSchema: z.ZodType<Prisma.TicketUserCreateManyArgs> = z.object({
  data: z.union([ TicketUserCreateManyInputSchema,TicketUserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketUserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.TicketUserCreateManyAndReturnArgs> = z.object({
  data: z.union([ TicketUserCreateManyInputSchema,TicketUserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const TicketUserDeleteArgsSchema: z.ZodType<Prisma.TicketUserDeleteArgs> = z.object({
  select: TicketUserSelectSchema.optional(),
  include: TicketUserIncludeSchema.optional(),
  where: TicketUserWhereUniqueInputSchema,
}).strict() ;

export const TicketUserUpdateArgsSchema: z.ZodType<Prisma.TicketUserUpdateArgs> = z.object({
  select: TicketUserSelectSchema.optional(),
  include: TicketUserIncludeSchema.optional(),
  data: z.union([ TicketUserUpdateInputSchema,TicketUserUncheckedUpdateInputSchema ]),
  where: TicketUserWhereUniqueInputSchema,
}).strict() ;

export const TicketUserUpdateManyArgsSchema: z.ZodType<Prisma.TicketUserUpdateManyArgs> = z.object({
  data: z.union([ TicketUserUpdateManyMutationInputSchema,TicketUserUncheckedUpdateManyInputSchema ]),
  where: TicketUserWhereInputSchema.optional(),
}).strict() ;

export const TicketUserDeleteManyArgsSchema: z.ZodType<Prisma.TicketUserDeleteManyArgs> = z.object({
  where: TicketUserWhereInputSchema.optional(),
}).strict() ;

export const back3nd_userCreateArgsSchema: z.ZodType<Prisma.back3nd_userCreateArgs> = z.object({
  select: back3nd_userSelectSchema.optional(),
  include: back3nd_userIncludeSchema.optional(),
  data: z.union([ back3nd_userCreateInputSchema,back3nd_userUncheckedCreateInputSchema ]),
}).strict() ;

export const back3nd_userUpsertArgsSchema: z.ZodType<Prisma.back3nd_userUpsertArgs> = z.object({
  select: back3nd_userSelectSchema.optional(),
  include: back3nd_userIncludeSchema.optional(),
  where: back3nd_userWhereUniqueInputSchema,
  create: z.union([ back3nd_userCreateInputSchema,back3nd_userUncheckedCreateInputSchema ]),
  update: z.union([ back3nd_userUpdateInputSchema,back3nd_userUncheckedUpdateInputSchema ]),
}).strict() ;

export const back3nd_userCreateManyArgsSchema: z.ZodType<Prisma.back3nd_userCreateManyArgs> = z.object({
  data: z.union([ back3nd_userCreateManyInputSchema,back3nd_userCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const back3nd_userCreateManyAndReturnArgsSchema: z.ZodType<Prisma.back3nd_userCreateManyAndReturnArgs> = z.object({
  data: z.union([ back3nd_userCreateManyInputSchema,back3nd_userCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const back3nd_userDeleteArgsSchema: z.ZodType<Prisma.back3nd_userDeleteArgs> = z.object({
  select: back3nd_userSelectSchema.optional(),
  include: back3nd_userIncludeSchema.optional(),
  where: back3nd_userWhereUniqueInputSchema,
}).strict() ;

export const back3nd_userUpdateArgsSchema: z.ZodType<Prisma.back3nd_userUpdateArgs> = z.object({
  select: back3nd_userSelectSchema.optional(),
  include: back3nd_userIncludeSchema.optional(),
  data: z.union([ back3nd_userUpdateInputSchema,back3nd_userUncheckedUpdateInputSchema ]),
  where: back3nd_userWhereUniqueInputSchema,
}).strict() ;

export const back3nd_userUpdateManyArgsSchema: z.ZodType<Prisma.back3nd_userUpdateManyArgs> = z.object({
  data: z.union([ back3nd_userUpdateManyMutationInputSchema,back3nd_userUncheckedUpdateManyInputSchema ]),
  where: back3nd_userWhereInputSchema.optional(),
}).strict() ;

export const back3nd_userDeleteManyArgsSchema: z.ZodType<Prisma.back3nd_userDeleteManyArgs> = z.object({
  where: back3nd_userWhereInputSchema.optional(),
}).strict() ;

export const back3nd_roleCreateArgsSchema: z.ZodType<Prisma.back3nd_roleCreateArgs> = z.object({
  select: back3nd_roleSelectSchema.optional(),
  include: back3nd_roleIncludeSchema.optional(),
  data: z.union([ back3nd_roleCreateInputSchema,back3nd_roleUncheckedCreateInputSchema ]),
}).strict() ;

export const back3nd_roleUpsertArgsSchema: z.ZodType<Prisma.back3nd_roleUpsertArgs> = z.object({
  select: back3nd_roleSelectSchema.optional(),
  include: back3nd_roleIncludeSchema.optional(),
  where: back3nd_roleWhereUniqueInputSchema,
  create: z.union([ back3nd_roleCreateInputSchema,back3nd_roleUncheckedCreateInputSchema ]),
  update: z.union([ back3nd_roleUpdateInputSchema,back3nd_roleUncheckedUpdateInputSchema ]),
}).strict() ;

export const back3nd_roleCreateManyArgsSchema: z.ZodType<Prisma.back3nd_roleCreateManyArgs> = z.object({
  data: z.union([ back3nd_roleCreateManyInputSchema,back3nd_roleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const back3nd_roleCreateManyAndReturnArgsSchema: z.ZodType<Prisma.back3nd_roleCreateManyAndReturnArgs> = z.object({
  data: z.union([ back3nd_roleCreateManyInputSchema,back3nd_roleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const back3nd_roleDeleteArgsSchema: z.ZodType<Prisma.back3nd_roleDeleteArgs> = z.object({
  select: back3nd_roleSelectSchema.optional(),
  include: back3nd_roleIncludeSchema.optional(),
  where: back3nd_roleWhereUniqueInputSchema,
}).strict() ;

export const back3nd_roleUpdateArgsSchema: z.ZodType<Prisma.back3nd_roleUpdateArgs> = z.object({
  select: back3nd_roleSelectSchema.optional(),
  include: back3nd_roleIncludeSchema.optional(),
  data: z.union([ back3nd_roleUpdateInputSchema,back3nd_roleUncheckedUpdateInputSchema ]),
  where: back3nd_roleWhereUniqueInputSchema,
}).strict() ;

export const back3nd_roleUpdateManyArgsSchema: z.ZodType<Prisma.back3nd_roleUpdateManyArgs> = z.object({
  data: z.union([ back3nd_roleUpdateManyMutationInputSchema,back3nd_roleUncheckedUpdateManyInputSchema ]),
  where: back3nd_roleWhereInputSchema.optional(),
}).strict() ;

export const back3nd_roleDeleteManyArgsSchema: z.ZodType<Prisma.back3nd_roleDeleteManyArgs> = z.object({
  where: back3nd_roleWhereInputSchema.optional(),
}).strict() ;

export const back3nd_user_roleCreateArgsSchema: z.ZodType<Prisma.back3nd_user_roleCreateArgs> = z.object({
  select: back3nd_user_roleSelectSchema.optional(),
  include: back3nd_user_roleIncludeSchema.optional(),
  data: z.union([ back3nd_user_roleCreateInputSchema,back3nd_user_roleUncheckedCreateInputSchema ]),
}).strict() ;

export const back3nd_user_roleUpsertArgsSchema: z.ZodType<Prisma.back3nd_user_roleUpsertArgs> = z.object({
  select: back3nd_user_roleSelectSchema.optional(),
  include: back3nd_user_roleIncludeSchema.optional(),
  where: back3nd_user_roleWhereUniqueInputSchema,
  create: z.union([ back3nd_user_roleCreateInputSchema,back3nd_user_roleUncheckedCreateInputSchema ]),
  update: z.union([ back3nd_user_roleUpdateInputSchema,back3nd_user_roleUncheckedUpdateInputSchema ]),
}).strict() ;

export const back3nd_user_roleCreateManyArgsSchema: z.ZodType<Prisma.back3nd_user_roleCreateManyArgs> = z.object({
  data: z.union([ back3nd_user_roleCreateManyInputSchema,back3nd_user_roleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const back3nd_user_roleCreateManyAndReturnArgsSchema: z.ZodType<Prisma.back3nd_user_roleCreateManyAndReturnArgs> = z.object({
  data: z.union([ back3nd_user_roleCreateManyInputSchema,back3nd_user_roleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const back3nd_user_roleDeleteArgsSchema: z.ZodType<Prisma.back3nd_user_roleDeleteArgs> = z.object({
  select: back3nd_user_roleSelectSchema.optional(),
  include: back3nd_user_roleIncludeSchema.optional(),
  where: back3nd_user_roleWhereUniqueInputSchema,
}).strict() ;

export const back3nd_user_roleUpdateArgsSchema: z.ZodType<Prisma.back3nd_user_roleUpdateArgs> = z.object({
  select: back3nd_user_roleSelectSchema.optional(),
  include: back3nd_user_roleIncludeSchema.optional(),
  data: z.union([ back3nd_user_roleUpdateInputSchema,back3nd_user_roleUncheckedUpdateInputSchema ]),
  where: back3nd_user_roleWhereUniqueInputSchema,
}).strict() ;

export const back3nd_user_roleUpdateManyArgsSchema: z.ZodType<Prisma.back3nd_user_roleUpdateManyArgs> = z.object({
  data: z.union([ back3nd_user_roleUpdateManyMutationInputSchema,back3nd_user_roleUncheckedUpdateManyInputSchema ]),
  where: back3nd_user_roleWhereInputSchema.optional(),
}).strict() ;

export const back3nd_user_roleDeleteManyArgsSchema: z.ZodType<Prisma.back3nd_user_roleDeleteManyArgs> = z.object({
  where: back3nd_user_roleWhereInputSchema.optional(),
}).strict() ;

export const back3nd_permissionCreateArgsSchema: z.ZodType<Prisma.back3nd_permissionCreateArgs> = z.object({
  select: back3nd_permissionSelectSchema.optional(),
  include: back3nd_permissionIncludeSchema.optional(),
  data: z.union([ back3nd_permissionCreateInputSchema,back3nd_permissionUncheckedCreateInputSchema ]),
}).strict() ;

export const back3nd_permissionUpsertArgsSchema: z.ZodType<Prisma.back3nd_permissionUpsertArgs> = z.object({
  select: back3nd_permissionSelectSchema.optional(),
  include: back3nd_permissionIncludeSchema.optional(),
  where: back3nd_permissionWhereUniqueInputSchema,
  create: z.union([ back3nd_permissionCreateInputSchema,back3nd_permissionUncheckedCreateInputSchema ]),
  update: z.union([ back3nd_permissionUpdateInputSchema,back3nd_permissionUncheckedUpdateInputSchema ]),
}).strict() ;

export const back3nd_permissionCreateManyArgsSchema: z.ZodType<Prisma.back3nd_permissionCreateManyArgs> = z.object({
  data: z.union([ back3nd_permissionCreateManyInputSchema,back3nd_permissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const back3nd_permissionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.back3nd_permissionCreateManyAndReturnArgs> = z.object({
  data: z.union([ back3nd_permissionCreateManyInputSchema,back3nd_permissionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const back3nd_permissionDeleteArgsSchema: z.ZodType<Prisma.back3nd_permissionDeleteArgs> = z.object({
  select: back3nd_permissionSelectSchema.optional(),
  include: back3nd_permissionIncludeSchema.optional(),
  where: back3nd_permissionWhereUniqueInputSchema,
}).strict() ;

export const back3nd_permissionUpdateArgsSchema: z.ZodType<Prisma.back3nd_permissionUpdateArgs> = z.object({
  select: back3nd_permissionSelectSchema.optional(),
  include: back3nd_permissionIncludeSchema.optional(),
  data: z.union([ back3nd_permissionUpdateInputSchema,back3nd_permissionUncheckedUpdateInputSchema ]),
  where: back3nd_permissionWhereUniqueInputSchema,
}).strict() ;

export const back3nd_permissionUpdateManyArgsSchema: z.ZodType<Prisma.back3nd_permissionUpdateManyArgs> = z.object({
  data: z.union([ back3nd_permissionUpdateManyMutationInputSchema,back3nd_permissionUncheckedUpdateManyInputSchema ]),
  where: back3nd_permissionWhereInputSchema.optional(),
}).strict() ;

export const back3nd_permissionDeleteManyArgsSchema: z.ZodType<Prisma.back3nd_permissionDeleteManyArgs> = z.object({
  where: back3nd_permissionWhereInputSchema.optional(),
}).strict() ;

export const back3nd_password_resetCreateArgsSchema: z.ZodType<Prisma.back3nd_password_resetCreateArgs> = z.object({
  select: back3nd_password_resetSelectSchema.optional(),
  include: back3nd_password_resetIncludeSchema.optional(),
  data: z.union([ back3nd_password_resetCreateInputSchema,back3nd_password_resetUncheckedCreateInputSchema ]),
}).strict() ;

export const back3nd_password_resetUpsertArgsSchema: z.ZodType<Prisma.back3nd_password_resetUpsertArgs> = z.object({
  select: back3nd_password_resetSelectSchema.optional(),
  include: back3nd_password_resetIncludeSchema.optional(),
  where: back3nd_password_resetWhereUniqueInputSchema,
  create: z.union([ back3nd_password_resetCreateInputSchema,back3nd_password_resetUncheckedCreateInputSchema ]),
  update: z.union([ back3nd_password_resetUpdateInputSchema,back3nd_password_resetUncheckedUpdateInputSchema ]),
}).strict() ;

export const back3nd_password_resetCreateManyArgsSchema: z.ZodType<Prisma.back3nd_password_resetCreateManyArgs> = z.object({
  data: z.union([ back3nd_password_resetCreateManyInputSchema,back3nd_password_resetCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const back3nd_password_resetCreateManyAndReturnArgsSchema: z.ZodType<Prisma.back3nd_password_resetCreateManyAndReturnArgs> = z.object({
  data: z.union([ back3nd_password_resetCreateManyInputSchema,back3nd_password_resetCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const back3nd_password_resetDeleteArgsSchema: z.ZodType<Prisma.back3nd_password_resetDeleteArgs> = z.object({
  select: back3nd_password_resetSelectSchema.optional(),
  include: back3nd_password_resetIncludeSchema.optional(),
  where: back3nd_password_resetWhereUniqueInputSchema,
}).strict() ;

export const back3nd_password_resetUpdateArgsSchema: z.ZodType<Prisma.back3nd_password_resetUpdateArgs> = z.object({
  select: back3nd_password_resetSelectSchema.optional(),
  include: back3nd_password_resetIncludeSchema.optional(),
  data: z.union([ back3nd_password_resetUpdateInputSchema,back3nd_password_resetUncheckedUpdateInputSchema ]),
  where: back3nd_password_resetWhereUniqueInputSchema,
}).strict() ;

export const back3nd_password_resetUpdateManyArgsSchema: z.ZodType<Prisma.back3nd_password_resetUpdateManyArgs> = z.object({
  data: z.union([ back3nd_password_resetUpdateManyMutationInputSchema,back3nd_password_resetUncheckedUpdateManyInputSchema ]),
  where: back3nd_password_resetWhereInputSchema.optional(),
}).strict() ;

export const back3nd_password_resetDeleteManyArgsSchema: z.ZodType<Prisma.back3nd_password_resetDeleteManyArgs> = z.object({
  where: back3nd_password_resetWhereInputSchema.optional(),
}).strict() ;