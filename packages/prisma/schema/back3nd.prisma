/// The `User` model represents system users.
/// In a GED context, users can create, own, and share documents.
/// In a BPM context, users may be assigned tasks within workflows or manage them.
/// A `role` field helps define user permissions and responsibilities.
model User {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  apiUserId           String              @unique
  email               String              @unique
  name                String?
  role                String              @default("user") // Roles: user, admin, secretary
  createdAt           DateTime            @default(now())
  userOnDocuments     UserOnDocuments[]   // Relacionamento N:M com Document via tabela intermediária
  documentUsers       DocumentUser[]      @relation("DocumentUser_User")
  documentVersionCreators DocumentVersionCreator[] @relation("DocumentVersionCreator_User")
  sharedDocuments     SharedDocument[]    @relation("SharedDocument_User")
  tasksAssigned       Task[]              @relation("Task_AssignedTo")
  auditLogs           AuditLog[]          @relation("AuditLog_PerformedBy")
  notifications       Notification[]
  userDepartments     UserDepartment[]
  ticketsCreated      Ticket[]            @relation("TicketsCreated")
  ticketsAssigned     Ticket[]            @relation("TicketsAssigned")
  ticketThreads       TicketThread[]
  ticketCollaborators TicketCollaborator[]
  taskUsers           TaskUser[]
  ticketUsers         TicketUser[]
  digitalCertificates DigitalCertificate[]
}

model Document {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title               String
  filePath            String
  mimeType            String              // MIME type to handle different file formats.
  keywords            String[]            // Keywords for search indexing.
  ocrText             String?             // OCR-extracted text for full-text search.
  ownerId             String              @db.Uuid
  sharedWith          SharedDocument[]    @relation("sharedWith") // Many-to-Many relation for shared documents.
  signed              Boolean             @default(false)
  signedAt            DateTime?           // Date and time the document was signed.
  signature           String?             // Details or file path for the digital signature.
  versions            DocumentVersion[]   // Document version history.
  tasks               Task[]              // Tasks associated with the document in workflows.
  fileMetadata        FileMetadata?       // Metadata (size, checksum) for document management.
  attachments         Attachment[]        // Additional files linked to the document.
  userOnDocuments     UserOnDocuments[]   // Relacionamento N:M com User via tabela intermediária
  createdAt           DateTime            @default(now())
  documentUsers       DocumentUser[]      @relation("DocumentUser_Document")
  sharedDocuments     SharedDocument[]    @relation("SharedDocument_Document")
}

model UserOnDocuments {
  user        User      @relation(fields: [userId], references: [id]) // Relaciona com User
  userId      String    @db.Uuid
  document    Document  @relation(fields: [documentId], references: [id]) // Relaciona com Document
  documentId  String    @db.Uuid
  assignedAt  DateTime  @default(now()) // Quando o usuário foi associado ao documento
  role        String    // Papel do usuário no documento (e.g., owner, viewer, editor)

  @@id([userId, documentId]) // Chave composta para evitar duplicação
}

model DocumentUser {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @db.Uuid
  documentId  String   @db.Uuid
  user        User     @relation("DocumentUser_User", fields: [userId], references: [id]) // Relaciona com User
  document    Document @relation("DocumentUser_Document", fields: [documentId], references: [id]) // Relaciona com Document
}

model DocumentVersion {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentId          String              @db.Uuid
  document            Document            @relation(fields: [documentId], references: [id])
  versionNumber       Int                 // Indicates the version order of the document.
  filePath            String              // Path to the version file.
  changesDescription  String?             // Describes changes made in this version.
  createdById         String              @db.Uuid
  createdAt           DateTime            @default(now())
  documentVersionCreators DocumentVersionCreator[] @relation("DocumentVersionCreator_Version")
}

model DocumentVersionCreator {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @db.Uuid
  versionId   String   @db.Uuid
  user        User     @relation("DocumentVersionCreator_User", fields: [userId], references: [id]) // Relaciona com User
  version     DocumentVersion @relation("DocumentVersionCreator_Version", fields: [versionId], references: [id]) // Relaciona com DocumentVersion
}

model SharedDocument {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  documentId  String   @db.Uuid
  userId      String   @db.Uuid
  document    Document @relation("SharedDocument_Document", fields: [documentId], references: [id], map: "SharedDocument_documentId_fkey") // Relaciona com Document
  sharedWith  Document @relation("sharedWith", fields: [documentId], references: [id], map: "SharedDocument_sharedWith_fkey")
  user        User     @relation("SharedDocument_User", fields: [userId], references: [id]) // Relaciona com User
  sharedAt    DateTime @default(now()) // Data do compartilhamento
  permission  String   @default("read") // Permissões (e.g., read, write)
}

/// The `Workflow` model organizes business processes for document-based tasks in BPM.
/// Workflows represent entire processes with multiple tasks (`steps`) for document approvals,
/// reviews, and other interactions. `status` allows monitoring of the workflow's current state.
model Workflow {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String              // Workflow name, e.g., "Document Approval".
  description         String?             // Details the workflow purpose.
  type                String              @default("general") // Workflow type: general, approval, information
  status              String              // Tracks the workflow state (e.g., active, completed).
  tasks               Task[]              // List of steps within the workflow.
  auditLogs           AuditLog[]          // Logs tracking actions within the workflow.
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

/// The `Task` model defines a single step in a `Workflow`, representing an actionable item.
/// Tasks can be associated with specific documents (e.g., approval or review) and assigned to users.
/// `status` tracks task progress, and `dueDate` enforces deadlines, aiding in process management.
model Task {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workflow            Workflow            @relation(fields: [workflowId], references: [id])
  workflowId          String              @db.Uuid
  assignedTo          User?               @relation("Task_AssignedTo", fields: [assignedToId], references: [id])
  assignedToId        String?             @db.Uuid
  document            Document?           @relation(fields: [documentId], references: [id])
  documentId          String?             @db.Uuid
  title               String              // Task title (e.g., "Review Document").
  description         String?             // Additional details about the task.
  status              String              // Task progress (e.g., pending, in_progress, completed).
  dueDate             DateTime?           // Task deadline.
  auditLogs           AuditLog[]          // Logs of actions for accountability.
  taskUsers           TaskUser[]          @relation("Task_TaskUser")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

/// The `AuditLog` model tracks actions taken on a `Task` or `Workflow`, supporting a detailed audit trail.
/// It records each action, who performed it, and when, enabling transparency and accountability.
model AuditLog {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task                Task?               @relation(fields: [taskId], references: [id])
  taskId              String?             @db.Uuid
  workflow            Workflow?           @relation(fields: [workflowId], references: [id])
  workflowId          String?             @db.Uuid
  action              String              // Action performed (e.g., creation, edit, signature).
  performedBy         User                @relation("AuditLog_PerformedBy", fields: [performedById], references: [id])
  performedById       String              @db.Uuid
  timestamp           DateTime            @default(now()) // Action date and time.
  description         String?             // Additional details about the action.
}

/// The `Notification` model centralizes alerts and updates sent to users.
/// It tracks which notifications have been read.
model Notification {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                User                @relation(fields: [userId], references: [id])
  userId              String              @db.Uuid
  message             String              // Notification message.
  read                Boolean             @default(false) // Indicates if the notification has been read.
  createdAt           DateTime            @default(now())
}

/// The `Attachment` model stores additional files linked to a document.
/// Attachments provide supplemental information for a document or task.
model Attachment {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document            Document            @relation(fields: [documentId], references: [id])
  documentId          String              @db.Uuid
  filePath            String              // Path to the attachment file.
  fileName            String              // Name of the attachment file.
  mimeType            String              // MIME type of the attachment.
  createdAt           DateTime            @default(now())
}

/// The `DigitalCertificate` model holds certificates for digital signing, crucial for document authentication.
model DigitalCertificate {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                User                @relation(fields: [userId], references: [id])
  userId              String              @db.Uuid
  filePath            String              // Path to the .p12 digital certificate file.
  password            String              // Encrypted password for certificate access.
  createdAt           DateTime            @default(now())
}

/// The `FileMetadata` model stores additional information for document files.
model FileMetadata {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document            Document            @relation(fields: [documentId], references: [id])
  documentId          String              @unique @db.Uuid
  fileSize            Int                 // File size in bytes.
  mimeType            String              // MIME type for handling various file formats.
  checksum            String              // Checksum for file integrity verification.
  createdAt           DateTime            @default(now())
}

// Modelo Institution
model Institution {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  departments         Department[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

// Modelo Department
model Department {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String?
  isSecretariat       Boolean             @default(false) // True se for uma secretaria
  institution         Institution         @relation(fields: [institutionId], references: [id])
  institutionId       String              @db.Uuid
  parentSecretariat   Department?         @relation("ParentDepartment", fields: [parentSecretariatId], references: [id])
  parentSecretariatId Int?
  childDepartments    Department[]        @relation("ParentDepartment")
  tickets             Ticket[]
  userDepartments     UserDepartment[]    // Opposite relation field for UserDepartment
  helpTopics          HelpTopic[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

// Modelo UserDepartment
model UserDepartment {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                User                @relation(fields: [userId], references: [id])
  userId              String              @db.Uuid
  department          Department          @relation(fields: [departmentId], references: [id])
  departmentId        Int
  role                String              // e.g., "member", "manager"
  createdAt           DateTime            @default(now())
}

// Modelo Ticket
model Ticket {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subject             String
  description         String
  status              TicketStatus        @relation(fields: [statusId], references: [id])
  statusId            Int
  priority            TicketPriority      @relation(fields: [priorityId], references: [id])
  priorityId          Int
  createdBy           User                @relation("TicketsCreated", fields: [createdById], references: [id])
  createdById         String              @db.Uuid
  assignedTo          User?               @relation("TicketsAssigned", fields: [assignedToId], references: [id])
  assignedToId        String?             @db.Uuid
  department          Department          @relation(fields: [departmentId], references: [id])
  departmentId        Int
  helpTopic           HelpTopic           @relation(fields: [helpTopicId], references: [id])
  helpTopicId         Int
  slaPlan             SLAPlan?            @relation(fields: [slaPlanId], references: [id])
  slaPlanId           Int?
  dueDate             DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  closedAt            DateTime?
  lastResponseAt      DateTime?
  threads             TicketThread[]
  attachments         TicketAttachment[]
  collaborators       TicketCollaborator[] @relation("Ticket_TicketUser")
  customFields        TicketCustomField[]
  ticketUsers         TicketUser[]        @relation("Ticket_TicketUser")
}

// Modelo TicketStatus
model TicketStatus {
  id                  Int                 @id @default(autoincrement())
  name                String
  tickets             Ticket[]
}

// Modelo TicketPriority
model TicketPriority {
  id                  Int                 @id @default(autoincrement())
  name                String
  tickets             Ticket[]
}

// Modelo HelpTopic
model HelpTopic {
  id                  Int                 @id @default(autoincrement())
  topic               String
  description         String?
  department          Department          @relation(fields: [departmentId], references: [id])
  departmentId        Int
  tickets             Ticket[]
}

// Modelo SLAPlan
model SLAPlan {
  id                  Int                 @id @default(autoincrement())
  name                String
  gracePeriod         Int                 // em horas
  tickets             Ticket[]
}

// Modelo TicketThread
model TicketThread {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticket              Ticket              @relation(fields: [ticketId], references: [id])
  ticketId            String              @unique @db.Uuid
  user                User                @relation(fields: [userId], references: [id])
  userId              String              @db.Uuid
  message             String
  createdAt           DateTime            @default(now())
  attachments         TicketAttachment[]  @relation("TicketThread_TicketAttachment")
}

// Modelo TicketAttachment
model TicketAttachment {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticketId            String              @db.Uuid
  ticket              Ticket              @relation(fields: [ticketId], references: [id])
  ticketThread        TicketThread        @relation("TicketThread_TicketAttachment", fields: [ticketThreadId], references: [ticketId])
  ticketThreadId      String              @db.Uuid
  filePath            String
  fileName            String
  mimeType            String
  createdAt           DateTime            @default(now())
}

// Modelo TicketCollaborator
model TicketCollaborator {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticket              Ticket              @relation("Ticket_TicketUser", fields: [ticketId], references: [id])
  ticketId            String              @db.Uuid
  user                User                @relation(fields: [userId], references: [id])
  userId              String              @db.Uuid
}

// Modelo CustomField
model CustomField {
  id                  Int                 @id @default(autoincrement())
  name                String
  fieldType           String              // e.g., 'text', 'number', 'date'
  tickets             TicketCustomField[]
}

// Modelo TicketCustomField
model TicketCustomField {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticket              Ticket              @relation(fields: [ticketId], references: [id])
  ticketId            String              @db.Uuid
  field               CustomField         @relation(fields: [fieldId], references: [id])
  fieldId             Int
  value               String
}

model TaskUser {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  task                Task                @relation("Task_TaskUser", fields: [taskId], references: [id])
  taskId              String              @db.Uuid
  user                User                @relation(fields: [userId], references: [id])
  userId              String              @db.Uuid
}

model TicketUser {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ticket              Ticket              @relation("Ticket_TicketUser", fields: [ticketId], references: [id])
  ticketId            String              @db.Uuid
  user                User                @relation(fields: [userId], references: [id])
  userId              String              @db.Uuid
}
